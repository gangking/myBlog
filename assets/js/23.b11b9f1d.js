(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{198:function(t,e,a){"use strict";a.r(e);var n=a(0),s=Object(n.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react慕课网学习笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react慕课网学习笔记","aria-hidden":"true"}},[t._v("#")]),t._v(" React慕课网学习笔记")]),t._v(" "),a("p",[t._v("facebook2013年五月推出")]),t._v(" "),a("p",[t._v("函数式编程")]),t._v(" "),a("p",[t._v("官网：https://reactjs.org/")]),t._v(" "),a("p",[t._v("React Fibar指React16版本")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("比VUE更灵活")])]),t._v(" "),a("li",[a("p",[t._v("VUE的API丰富")])])]),t._v(" "),a("h2",{attrs:{id:"环境搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建","aria-hidden":"true"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("引入.js文件来使用React(性能低，维护麻烦)")])]),t._v(" "),a("li",[a("p",[t._v("通过脚手架工具来编码（Creacte-react-app）")])])]),t._v(" "),a("h3",{attrs:{id:"creacte-react-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creacte-react-app","aria-hidden":"true"}},[t._v("#")]),t._v(" Creacte-react-app")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm i -g create-react-app\n\ncreate-react-app my-app\n\n- 不能包含大写字母\n- 不能喝同级目录下项目重名\n\ncd my-app\n\nnpm start\n\n")])])]),a("h3",{attrs:{id:"工程目录简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工程目录简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 工程目录简介")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("yarn.lock  记录安装地址")])]),t._v(" "),a("li",[a("p",[t._v("README.md 项目说明")])]),t._v(" "),a("li",[a("p",[t._v("package.json  命令配置文件（node包文件）")])]),t._v(" "),a("li",[a("p",[t._v(".gitignore  告诉git不要上传那些文件")])]),t._v(" "),a("li",[a("p",[t._v("node_modules 存放项目依赖的第三方模块")])]),t._v(" "),a("li",[a("p",[t._v("public")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("主页面 index.html\n项目图标 favicon.ico\nmanifest.json\n\t网页如果当成APP用，可以用来配置快捷方式图标\n")])])])]),t._v(" "),a("li",[a("p",[t._v("src  项目主文件夹")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("只需要保留两个文件\nindex.js 项目主文件\nApp.js 主组件\n\n概念：serviceWorker\nPWA 通过写网页来写手机APP应用\nhttps协议的服务器上 帮助把上次网页存起来，防止断网\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"react中的组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react中的组件","aria-hidden":"true"}},[t._v("#")]),t._v(" react中的组件")]),t._v(" "),a("p",[t._v("组件拆分，有利于维护页面")]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("标题： 标题组件")])]),t._v(" "),a("li",[a("p",[t._v("搜索框 ：input组件  button组件")])])]),t._v(" "),a("p",[t._v("只需要维护对应的组件即可。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\n\nclass App extends React.Component {\n\n  render() {\n    return ( \n      <div>\n      hello word \n      </div>\n    );\n  }\n}\n\nexport default App;\n")])])]),a("h4",{attrs:{id:"reactdom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reactdom","aria-hidden":"true"}},[t._v("#")]),t._v(" ReactDOM")]),t._v(" "),a("p",[t._v("​\t将react组件挂载到页面。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// jsx语法\nReactDOM.render(<App />, document.getElementById('root'));\n")])])]),a("h2",{attrs:{id:"jsx语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx语法","aria-hidden":"true"}},[t._v("#")]),t._v(" JSX语法")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("不用单引号包裹")])]),t._v(" "),a("li",[a("p",[t._v("可以自定义标签")])]),t._v(" "),a("li",[a("p",[t._v("使用组件必须将组件名标签化")]),t._v(" "),a("p",[t._v("注意：组件名必须大写字母开头")])])]),t._v(" "),a("h2",{attrs:{id:"案例todolist功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例todolist功能","aria-hidden":"true"}},[t._v("#")]),t._v(" 案例TodoList功能")]),t._v(" "),a("h3",{attrs:{id:"新概念："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新概念：","aria-hidden":"true"}},[t._v("#")]),t._v(" 新概念：")]),t._v(" "),a("p",[t._v("​\tFragment(占位符) 可以代替最外层div")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("render(){\n    return (\n      <Fragment>\n        <input />\n        <button>提交</button>\n        <ul>\n          <li>学英语</li>\n          <li>linerning React</li>\n        </ul>\n        todolist\n      </Fragment>\n    );\n  }\n")])])]),a("h3",{attrs:{id:"数据声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据声明","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据声明")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 构造函数，最先被执行\n  constructor(props) {\n    super(props);// 调用父类构造函数\n    // 组件数据(也叫组建状态)\n    this.state = {\n      inputValue: '请输入',\n      list: []\n    }\n  }\n")])])]),a("h3",{attrs:{id:"事件绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件绑定","aria-hidden":"true"}},[t._v("#")]),t._v(" 事件绑定")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("注意:必须绑定this\n<input \n    value = {this.state.inputValue}\n    onChange = {this.handleInputChange.bind(this)}\n/>\n\n上述写法会占用性能，下面写法更佳！\nconstructor (props) {\n  super(props);\n  this.handleClick = this.handleClick.bind(this);\n}\n\nrender () {\n   return (\n       <div \n          onClick={this.handleClick}>\n          {this.props.content}\n       </div>\n    )\n}\n")])])]),a("h3",{attrs:{id:"数据修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据修改","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据修改")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("数据只能通过setState来修改：\nthis.setState({\n   inputValue: e.target.value\n})\n")])])]),a("p",[t._v("注意：用index做key值是不太好的。")]),t._v(" "),a("p",[t._v("全部代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React, { Fragment } from 'react';\nclass TodoList extends React.Component {\n  // 构造函数，最先被执行\n  constructor(props) {\n    super(props);// 调用父类构造函数\n    // 组件数据(也叫组建状态)\n    this.state = {\n      inputValue: '请输入',\n      list: ['学习英文','学习React']\n    }\n  }\n  render(){\n    return (\n      <Fragment>\n        <input \n          value = {this.state.inputValue}\n          onChange = {this.handleInputChange.bind(this)}\n        />\n        <button onClick={this.handleBtnClick.bind(this)}>提交</button>\n        <ul>\n          {\n            this.state.list.map((item,index)=>{\n              return (\n                <li \n                  key={index} onClick={this.handleItemDelete.bind(this,index)}>{item}\n                </li>\n              )\n            })\n          }\n        </ul>\n        todolist\n      </Fragment>\n    );\n  }\n  handleInputChange(e){\n    console.log(e.target.value);\n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n  handleBtnClick(e){\n    this.setState({\n      // list: this.state.list.push(this.state.inputValue),\n      list: [...this.state.list, this.state.inputValue], // 展开运算符\n      inputValue: '' // 同时清空\n    })\n  }\n  handleItemDelete(index){\n    // imuteble的概念：\n    // state 不允许我们做任何改变\n    const list = [...this.state.list];\n    list.splice(index, 1);\n    this.setState({\n      list: list\n    })\n    console.log(index)\n  }\n}\nexport default TodoList;\n\n")])])]),a("h3",{attrs:{id:"代码优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码优化")]),t._v(" "),a("p",[t._v("TodoItem.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("解构赋值的方式获取值和方法：\nrender () {\n    const { content } = this.props;\n    return (\n       <div \n          onClick={this.handleClick}>\n          {content}\n       </div>\n    )\n}\n\nhandleClick() {\n    const { deleteItem, index } = this.props;\n    deleteItem(index);\n}\n")])])]),a("p",[t._v("TodoList.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("这种写法不推荐：\nthis.setState({\n    inputValue: e.target.value\n})\n推荐下面写法：\nconst value = e.target.value\nthis.setState(() => ({\n    inputValue: value\n}))\n注意：必须要用const来接受一下value值（涉及到异步操作）\n\n1、prevState\n指this.state数据修改前的值。\n所以下面this.state就可以用prevState代替。\n// prevState数据修改前的值\nthis.setState((prevState) => ({\n  list: [...prevState.list, prevState.inputValue], // 展开运算符\n   inputValue: '' // 同时清空\n}))\n\n2、修改handleItemDelete\nhandleItemDelete(index){\n   this.setState((prevState)=>{\n     const list = [...prevState.list];\n     list.splice(index, 1);\n     return {list}\n   })\n}\n\n3、用index做key值是有可能造成错误的\n")])])]),a("h2",{attrs:{id:"jsx语法细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx语法细节","aria-hidden":"true"}},[t._v("#")]),t._v(" JSX语法细节")]),t._v(" "),a("h3",{attrs:{id:"注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注释","aria-hidden":"true"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("多行注释：\n{/*下面是一个input框*/}\n\n单行注释：\n{\n    // 下面是一个input框\n}\n\n")])])]),a("h3",{attrs:{id:"类名样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类名样式","aria-hidden":"true"}},[t._v("#")]),t._v(" 类名样式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("className='input'\n")])])]),a("h3",{attrs:{id:"dangerouslysetinnerhtml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dangerouslysetinnerhtml","aria-hidden":"true"}},[t._v("#")]),t._v(" dangerouslySetInnerHTML")]),t._v(" "),a("p",[t._v("​\t能识别字符串中的html代码。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<li \n    key={index} \n    onClick={this.handleItemDelete.bind(this,index)}>\n    dangerouslySetInnerHTML={{__html: item}}\n</li>\n        \n即： \ndangerouslySetInnerHTML={{__html: item}}\n")])])]),a("h3",{attrs:{id:"htmlfor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#htmlfor","aria-hidden":"true"}},[t._v("#")]),t._v(" htmlFor")]),t._v(" "),a("p",[t._v("案例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<label htmlFor=\"insertArea\">输入内容</label>\n<input \n   id='insertArea'\n   className='input'\n   value = {this.state.inputValue}\n   onChange = {this.handleInputChange.bind(this)}\n   placeholder=\"请输入\"\n/>\n\n直接用for属性是不允许的，虽然一样有效果。\n")])])]),a("h2",{attrs:{id:"组件拆分和组件传值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件拆分和组件传值","aria-hidden":"true"}},[t._v("#")]),t._v(" 组件拆分和组件传值")]),t._v(" "),a("p",[t._v("一个页面的逻辑会复杂，如果拆分为一个个小组件，每个部分逻辑就比较简单了。")]),t._v(" "),a("h3",{attrs:{id:"父向子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父向子","aria-hidden":"true"}},[t._v("#")]),t._v(" 父向子")]),t._v(" "),a("p",[t._v("父组件向子组件通过属性的形式传值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<TodoItem content={item}/>\n")])])]),a("p",[t._v("子组件通过props获取父组件的传值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<div>\n   {this.props.content}\n</div>\n")])])]),a("h3",{attrs:{id:"子向父"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子向父","aria-hidden":"true"}},[t._v("#")]),t._v(" 子向父")]),t._v(" "),a("p",[t._v("父组件将事件传递给子组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<TodoItem\n    index={index}\n    content={item}\n    deleteItem = {this.handleItemDelete.bind(this)}\n/>\n\n注意：这里父组件将方法的this指向绑定给自身了。\n")])])]),a("p",[t._v("子组件再通过调用父组件方法，将值传回来。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("handleClick() {\n    this.props.deleteItem(this.props.index);\n}\n")])])]),a("h2",{attrs:{id:"原理进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理进阶","aria-hidden":"true"}},[t._v("#")]),t._v(" 原理进阶")]),t._v(" "),a("p",[t._v("命名式开发：大量的dom操作")]),t._v(" "),a("p",[t._v("声明式开发：面向数据编程（react,vue）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("可以与其他框架共存")])]),t._v(" "),a("li",[a("p",[t._v("组件化")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class继承React.Component\n组件名首字母大写\n父子传值\n")])])])]),t._v(" "),a("li",[a("p",[t._v("单向数据流")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("父组件可以向子组件传内容；\n但是子组件只能使用这个值，不能改变这个值；\n目的：开发方便，避免遇坑\n")])])])]),t._v(" "),a("li",[a("p",[t._v("视图层框架")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("父子组件通过属性传值\n1、组件传给非父子组件，对于大型项目很崩溃；\n2、所以要引入数据层框架来处理辅助传值；\n3、因此react专注于视图层；\n")])])])]),t._v(" "),a("li",[a("p",[t._v("函数式编程")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("维护方便；\n自动化测试方便；\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"react调试工具安装及使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react调试工具安装及使用","aria-hidden":"true"}},[t._v("#")]),t._v(" React调试工具安装及使用")]),t._v(" "),a("p",[t._v("在谷歌浏览器商店下载，需要翻墙哦~")]),t._v(" "),a("p",[t._v("搜：Reactdevelopertools")]),t._v(" "),a("ul",[a("li",[t._v("知乎是用React开发的，线上版本代码对应为黑色线上代码会压缩，精简一些）")]),t._v(" "),a("li",[t._v("本地代码为红色")]),t._v(" "),a("li",[t._v("安装完成后控制台，会出现一个‘React’选项")])]),t._v(" "),a("h2",{attrs:{id:"proptypes与defaultprops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proptypes与defaultprops","aria-hidden":"true"}},[t._v("#")]),t._v(" PropTypes与DefaultProps")]),t._v(" "),a("p",[t._v("父子组件传参的时候，涉及到参数类型和参数默认值")]),t._v(" "),a("h3",{attrs:{id:"proptypes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proptypes","aria-hidden":"true"}},[t._v("#")]),t._v(" PropTypes")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install --save-dev prop-types\n在脚手架工具中不需要执行上一步\n\n引入：\nimport PropTypes from 'prop-types';\n\n在TodoItem.js中：\n注意这边propTypes首字母小写的；\nTodoItem.propTypes = {\n    content: PropTypes.string, \n    deleteItem: PropTypes.func, \n    index: PropTypes.number \n}\n\n1、设置参数必填：\ntest: PropTypes.string.isRequired\n2、给参数可以声明两种类型（会报错）：\ncontent: PropTypes.arrayOf(PropTypes.number,PropTypes.string), \n这种写法，值类型为数组，数组组成内容可以是数值和字符串\n\n所以要改为：\ncontent: PropTypes.oneOfType([PropTypes.number,PropTypes.string]),\n")])])]),a("h3",{attrs:{id:"defaultprops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defaultprops","aria-hidden":"true"}},[t._v("#")]),t._v(" DefaultProps")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("设置默认值：\nTodoItem.defaultProps = {\n    test: 'hello word'\n}\n")])])]),a("p",[t._v("官网文档："),a("a",{attrs:{href:"https://reactjs.org/docs/typechecking-with-proptypes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://reactjs.org/docs/typechecking-with-proptypes.html"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"props-state与render函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#props-state与render函数","aria-hidden":"true"}},[t._v("#")]),t._v(" Props,State与render函数")]),t._v(" "),a("p",[t._v("底层运行原理:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("当组件的state或者props发生改变的时候，render函数就会重新执行。")])]),t._v(" "),a("li",[a("p",[t._v("这也是数据变化，页面就会发生变化的原因")])])]),t._v(" "),a("h2",{attrs:{id:"虚拟dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚拟DOM")]),t._v(" "),a("h3",{attrs:{id:"例："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例：","aria-hidden":"true"}},[t._v("#")]),t._v(" 例：")]),t._v(" "),a("p",[t._v("###原始DOM操作：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("方案1：\n\t1、定义一个 state数据\n\t2、模板\n\t3、数据 + 模板 结合，生成真实的DOM，来显示\n\t4、state 发生改变\n\t5、数据 + 模板 结合，生真实DOM。替换原始DOM\n缺陷：\n\t第一次生成一个完整DOM片段\n\t第二次生成一个完整DOM片段\n\t第二次替换第一次DOM片段，非常耗性能\n\n方案2：\n\t1、state数据\n\t2、JSX模板\n\t3、数据 + 模板 结合，生成真实DOM\n\t4、state数据 发生改变\n\t5、数据 + 模板 结合，生成真实DOM，并不直接替换原始DOM\n\t6、新的DOM 和 原始 DOM 做对比，找差异\n\t7、找出 input 框 发生了变化\n\t8、只用新的DOM中 input元素，替换掉老的DOM中的input元素\n损耗了新的DOM和原始DOM的对比性能\n缺陷：新能提升不明显。\n")])])]),a("p",[t._v("###虚拟DOM:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、state数据\n2、jsx 模板\n3、数据 + 模板 结合，生成真实DOM，并展示\n<div id='abc'><span>hello word</span></div>\n4、生成虚拟DOM（虚拟DOM就是一个JS对象，用来描述真实DOM）（损耗了性能）\n['div',{id: 'abc'},{'span',{},'hello word'}]\n5、state发生变化\n6、数据 + 模板，生成新的虚拟DOM（极大提升了性能）\n['div',{id: 'abc'},{'span',{},'bye bye'}]\n7、比较原始虚拟DOM和新的虚拟DOM区别，找到区别是span中的内容（极大提升了性能）\n8、直接操作DOM，改变span中的内容；\n\n生成一个js对象，性能损耗比较低；\n减少了生成真实DOM操作，和真实DOM之间的对比\n")])])]),a("h3",{attrs:{id:"深入了解虚拟dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深入了解虚拟dom","aria-hidden":"true"}},[t._v("#")]),t._v(" 深入了解虚拟DOM")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("真实情况 3 和 4 顺序是反过来的；")])]),t._v(" "),a("li",[a("p",[t._v("先生成虚拟DOM，然后再生成真实DOM")])]),t._v(" "),a("li",[a("p",[t._v("JSX -  createElement -> 虚拟DOM(js 对象) ->  真实DOM")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// createElement更偏向底层\n// 直接将JS对象变成虚拟DOM 再转换成 虚拟DOM\n// JSX -  createElement -> 虚拟DOM(js 对象) ->  真实DOM\nreturn React.createElement('div',{},'item内容')\n\n嵌套写法：\nreturn React.createElement('div',{},React.createElement('span',{},'span内容'))\n")])])]),a("p",[t._v("注意："),a("strong",[t._v("Vue也是用的同样的DOM机制")])]),t._v(" "),a("h4",{attrs:{id:"虚拟dom带来的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom带来的好处","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚拟DOM带来的好处")]),t._v(" "),a("ol",[a("li",[t._v("性能提升了。")]),t._v(" "),a("li",[t._v("它使得跨端应用得以实现，React Native。")])]),t._v(" "),a("h2",{attrs:{id:"虚拟dom中的diff算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom中的diff算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚拟DOM中的Diff算法")]),t._v(" "),a("p",[t._v("全称：diffrence(差异)")]),t._v(" "),a("p",[t._v("大大提升了两个虚拟DOM之间的比对性能。")]),t._v(" "),a("p",[t._v("setState 触发比对")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("异步的")])]),t._v(" "),a("li",[a("p",[t._v("连续调用第三次的话，React可以把三次合并为一次，只做一次虚拟DOM比对，生成真的DOM。")])]),t._v(" "),a("li",[a("p",[t._v("同级比较，首先第一层，再比较第二层...，如果第一层就有差异，则将这个原始一层DOM下面的虚拟DOM对应的所有DOM节点都删除掉。重新生成一遍DOM节点，再生成真实DOM。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("好处：\n\t算法简单，所以比对速度快！\n思考：\n\t新生成的虚拟DOM节点的key,最好还是原来的KEY值，这样好比对。\n\t所以，如果KEY 值设置为index，那么原始虚拟dom上的key和新生成虚拟DOM上的KEY 值就不一致了。\n\n所以用 item 做key值最好！\n即，使用一个稳定的数值做key值最好！\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"react中ref的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react中ref的使用","aria-hidden":"true"}},[t._v("#")]),t._v(" React中ref的使用")]),t._v(" "),a("p",[t._v("引用，用来DOM")]),t._v(" "),a("p",[t._v("一般可以用 e.target")]),t._v(" "),a("p",[t._v("用ref（实际不推荐）:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ref = {(input) => {this.input = input}}\n构建一个ref引用 ，指向input对应的DOM节点\n\n所以：\nhandleInputChange(e){\n   // const value = e.target.value\n   const value =this.input.value\n   this.setState(() => ({\n       inputValue: value\n   }))\n}\n\n缺陷：\n1、案例：\n<ul ref = {(ul) => {this.ul = ul}}>\n    {\n      this.getTodoItem()\n    }\n</ul>\n\n当生成一个li，但输出为0\nconsole.log(this.ul.querySelectorAll('div').length)\n原因：\n\tsetState是异步，不会立即被执行，所以console有可能提前执行\n解决：\nsetState有回调方法，即：\n// prevState数据修改前的值\nthis.setState((prevState) => ({\n   list: [...prevState.list, prevState.inputValue], // 展开运算符\n      inputValue: '' // 同时清空\n}),()=>{\n   // querySelectorAll原生方法，获取ul下内容\n   console.log(this.ul.querySelectorAll('div').length)\n})\n这样输出就为1了。\n")])])]),a("p",[t._v("一般情况下，尽量别用。")]),t._v(" "),a("h2",{attrs:{id:"react生命周期函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react生命周期函数","aria-hidden":"true"}},[t._v("#")]),t._v(" React生命周期函数")]),t._v(" "),a("p",[t._v("指在某个时刻组件会自动执行的函数。")]),t._v(" "),a("p",[t._v("所以:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("render() - 数据变化时刻")])]),t._v(" "),a("li",[a("p",[t._v("constructor() - 组件一创建时刻")])]),t._v(" "),a("li",[a("p",[t._v("也算生命周期函数。")])])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("页面初始化  Initialization")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("state props setup\n")])])])]),t._v(" "),a("li",[a("p",[t._v("挂载  - Mounting")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、componentWillMount  \n2、render\n3、componentDidMount\ncomponentWillMount，componentDidMount只会在第一被挂载时执行\n\ncomponentWillMount用法：\n    // 组件即将挂载到页面时，自动被执行(比render())\n    componentWillMount() {\n        console.log('componentWillMount');\n    }\n\ncomponentDidMount用法：\n    // 组件被挂载到页面之后，自动被执行\n    componentDidMount(){\n        console.log('componentDidMount');\n    }\n")])])])]),t._v(" "),a("li",[a("p",[t._v("组件更新 - Updation")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n更新 - props:\n1、componentWillReceiveProps\n2、shouldComponentUpdate\n3、componentWillUpdate\n4、render\n5、componentDidUpdate\n\n更新 - state:\n1、shouldComponentUpdate\n2、componentWillUpdate\n3、render\n4、componentDidUpdate\n\nshouldComponentUpdate用法：\n// 组件更新前自动被执行\nshouldComponentUpdate() {\n    console.log('shouldComponentUpdate')\n    return true;// 必须返回一个布尔类型\n}\n--如果返回false，组件就不会更新了\n\ncomponentWillUpdate用法：\n// 组件被更新前被执行，但是在shouldComponentUpdate后被执行\n// 如果shouldComponentUpdate返回true才会执行\n// 如果shouldComponentUpdate返回false不会被执行\ncomponentWillUpdate(){\n  console.log('componentWillUpdate')\n}\n\ncomponentDidUpdate用法：\n// 组件更新完成之后会被执行\ncomponentDidUpdate(){\n   console.log('componentDidUpdate')\n}\n\ncomponentWillReceiveProps用法：\n// 组件没有props就不会被执行\n// 一个组件要从父组件接受参数\n// 只要父组件的render函数被重新执行了，子组件的这个生命周期函数会被执行。\n// 也就是如果这个组件第一次存在于父组件中，不会执行\n// 如果这个组件之前已经存在于父组件中，才会执行\ncomponentWillReceiveProps(){\n  console.log('componentWillReceiveProps')\n}\n")])])])]),t._v(" "),a("li",[a("p",[t._v("组件剔除 - Unmounting")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("componentWillUnmount用法：\n// 组件即将从页面剔除时执行\ncomponentWillUnmount(){\n   console.log('componentWillUnmount')\n}\n")])])]),a("p",[t._v("每个组件都可能拥有这些生命周期函数.")])])]),t._v(" "),a("h2",{attrs:{id:"react生命周期的应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react生命周期的应用场景","aria-hidden":"true"}},[t._v("#")]),t._v(" React生命周期的应用场景")]),t._v(" "),a("p",[t._v("​\t所有生命周期函数可以不存在，但是render()必须存在。")]),t._v(" "),a("ul",[a("li",[t._v("因为 Component默认内置了所有的生命周期函数,唯独没有内置render函数。")])]),t._v(" "),a("h3",{attrs:{id:"场景1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景1","aria-hidden":"true"}},[t._v("#")]),t._v(" 场景1")]),t._v(" "),a("div",{staticClass:"language-{ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、F12打开浏览器调试工具；\n2、勾选Hight Updates，发现input内容变化，父子组件都会重新被渲染。\nrender函数执行情况：\n\tstate props数据发生变化时，子组件被重新渲染\n\t父组件render重新执行时，子组件render也会被重新执行\n所以第二点会有性能问题。\n\n1、这个时候就可以用到shouldComponentUpdate\n在子组件中定义：\n// 询问组件是否更新\nshouldComponentUpdate() {\n     return false;\n}\n意思就是：\n\t我的子组件被渲染一次之后，如果子组件需要更新，那么强制要求不更新。\n\t但不是最优写法；\n需要用到两个参数：nextProps(最新props) nextState(最新state)\n// 判断最新props和当前props是否一样\n// 也就是判断props值是否发生了变化\nif (nextProps.content != this.props.content){\n    return true;\n} else {\n    return false;\n}\n")])])]),a("h3",{attrs:{id:"性能优化总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 性能优化总结")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、方法绑定定义在constructor中\n\tthis.handleClick = this.handleClick.bind(this);\n2、setState内置性能提升机制，能够将多次虚拟DOM改变，合并成一次来做。\n3、虚拟DOM、同层比对、Key值（提高比对速度）\n4、借助shouldComponentUpdate 提升组件性能\n")])])]),a("h3",{attrs:{id:"场景二，ajax-axios"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景二，ajax-axios","aria-hidden":"true"}},[t._v("#")]),t._v(" 场景二，Ajax(axios)")]),t._v(" "),a("p",[t._v("获取Ajax数据")]),t._v(" "),a("p",[t._v("在componentDidMount中获取")]),t._v(" "),a("p",[t._v("为什么不在componentWillMount中获取呢？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("其实也行\n\t在做React Native，或者做服务器端同构以及更深层次的技术时，可能会有冲突。\n\tconsotructor中也行\n")])])]),a("p",[t._v("如果和Ajax请求？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm i axios -S\n\nimport axion from 'axios'\n\n\naxios.get('')\n\t.then(()=>{\n    \talert('scc')\n\t})\n\t.catch(()=>{\n    \talert('erro')\n\t})\n")])])]),a("h2",{attrs:{id:"使用charles进行接口模拟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用charles进行接口模拟","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用Charles进行接口模拟")]),t._v(" "),a("p",[t._v("Charles官网："),a("a",{attrs:{href:"https://www.charlesproxy.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.charlesproxy.com/"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("使用教程："),a("a",{attrs:{href:"https://blog.csdn.net/liuwkk/article/details/81258522",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/liuwkk/article/details/81258522"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("我一般用easy mock方便~")]),t._v(" "),a("h2",{attrs:{id:"react的css过渡动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react的css过渡动画","aria-hidden":"true"}},[t._v("#")]),t._v(" React的CSS过渡动画")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("就是纯Css3过渡效果\n.show{\n opacity: 1;\n transition: all 1s ease-in;\n}\n\n.hide{\n opacity: 0;\n transition: all 1s ease-in;\n}\n")])])]),a("h2",{attrs:{id:"react的css动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react的css动画","aria-hidden":"true"}},[t._v("#")]),t._v(" React的CSS动画")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".show {\n    opacity: 1;\n    transition: all 1s ease-in;\n}\n\n.hide {\n    opacity: 0;\n    transition: all 1s ease-in forwards;\n    animation: hide-item 2s ease-in;\n}\n\n@keyframes hide-item {\n    0% {\n        opacity: 1;\n\n        color: red;\n    }\n\n    50% {\n        opacity: 0.5;\n\n        color: green;\n    }\n\n    100% {\n        opacity: 0;\n        color: blue\n    }\n\n}\n\n@keyframes show-item {\n    0% {\n        opacity: 0;\n\n        color: red;\n    }\n\n    50% {\n        opacity: 0.5;\n\n        color: green;\n    }\n\n    100% {\n        opacity: 1;\n        color: blue\n    }\n\n}\n")])])]),a("p",[t._v("知识点:")]),t._v(" "),a("ul",[a("li",[t._v("forwards - 动画执行完保留最后一帧")])]),t._v(" "),a("h2",{attrs:{id:"使用react-transition-group实现动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用react-transition-group实现动画","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用react-transition-group实现动画)")]),t._v(" "),a("p",[t._v("官网："),a("a",{attrs:{href:"https://reactcommunity.org/react-transition-group/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://reactcommunity.org/react-transition-group/"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm i react-transition-group - S\n")])])]),a("h3",{attrs:{id:"csstransiton"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csstransiton","aria-hidden":"true"}},[t._v("#")]),t._v(" CSSTransiton")]),t._v(" "),a("p",[t._v("主要学习：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://reactcommunity.org/react-transition-group/css-transition",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSSTransition"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("如果不满足需求，还可以用：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://reactcommunity.org/react-transition-group/transition",target:"_blank",rel:"noopener noreferrer"}},[t._v("Transition"),a("OutboundLink")],1),t._v("基本上就能满足了，它更偏底层")])]),t._v(" "),a("h4",{attrs:{id:"基本设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本设置","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本设置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { CSSTransition } from 'react-transition-group';\n<CSSTransition\n   classNames = 'fader'\n   in={this.state.show}\n   timeout={1000}\n>\n<div>hello words</div>\n</CSSTransition>\n\nCSSTransition嵌套要动画元素\nin={this.state.show} - 要启动动画的变量\ntimeout={1000} - 动画时间\nclassNames - 动画类名\n")])])]),a("h4",{attrs:{id:"入场动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#入场动画","aria-hidden":"true"}},[t._v("#")]),t._v(" 入场动画")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/* 入场动画执行的瞬间 */\n.fader-enter {\n    opacity: 0;\n}\n\n/* 刚进入入场动画瞬间存在，直到入场动画执行完成之前时段 */\n.fader-enter-active {\n    opacity: 1;\n    transition:  opacity 1s ease-in;\n}\n\n/* 整个入场动画执行完之后 */\n.fader-enter-done {\n    opacity: 1;\n\n}\n")])])]),a("h4",{attrs:{id:"出场动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#出场动画","aria-hidden":"true"}},[t._v("#")]),t._v(" 出场动画")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/* 出场动画执行的瞬间 */\n.fader-exit {\n    opacity: 1;\n}\n\n/* 刚进入出场动画瞬间存在，直到出场动画执行完成之前时段 */\n.fader-exit-active {\n    opacity: 0;\n    transition:  opacity 1s ease-in;\n}\n\n/* 整个出场动画执行完之后 */\n.fader-exit-done {\n    opacity: 0;\n\n}\n")])])]),a("h4",{attrs:{id:"unmountonexit-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unmountonexit-属性","aria-hidden":"true"}},[t._v("#")]),t._v(" unmountOnExit 属性")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<CSSTransition\n    classNames = 'fader'\n    in={this.state.show}\n    timeout={1000}\n    unmountOnExit\n>\n<div>hello words</div>\n</CSSTransition>\n\n有DOM移除效果\n")])])]),a("h3",{attrs:{id:"动画钩子函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动画钩子函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 动画钩子函数")]),t._v(" "),a("h4",{attrs:{id:"onentered"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onentered","aria-hidden":"true"}},[t._v("#")]),t._v(" onEntered")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 当入场动画执行结束之后\nonEntered = {(el)=>{el.style.color='blue'}}\n")])])]),a("h4",{attrs:{id:"appear"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#appear","aria-hidden":"true"}},[t._v("#")]),t._v(" appear")]),t._v(" "),a("p",[t._v("​\t如果想第一次展示的时候也有动画效果")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("添加属性appear：\n<CSSTransition\n    classNames = 'fader'\n    in={this.state.show}\n    timeout={1000}\n    unmountOnExit\n    // 当入场动画执行结束之后\n    onEntered = {(el)=>{el.style.color='blue'}}\n    // 第一次展示在页面上也有有动画效果\n    appear={true}\n>\n    <div>hello words</div>\n</CSSTransition>\n同时增加css样式类名：\n/* 入场动画执行的瞬间 */\n.fader-enter,.fader-appear {\n    opacity: 0;\n}\n\n/* 刚进入入场动画瞬间存在，直到入场动画执行完成之前时段 */\n.fader-enter-active,.fader-appear-active {\n    opacity: 1;\n    transition:  opacity 1s ease-in;\n}\n")])])]),a("h4",{attrs:{id:"onenter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onenter","aria-hidden":"true"}},[t._v("#")]),t._v(" onEnter")]),t._v(" "),a("p",[t._v("​\t入场动画第一帧")]),t._v(" "),a("h4",{attrs:{id:"onentering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onentering","aria-hidden":"true"}},[t._v("#")]),t._v(" onEntering")]),t._v(" "),a("p",[t._v("​\t入场动画第二帧")]),t._v(" "),a("p",[t._v("​\t文档："),a("a",{attrs:{href:"http://reactcommunity.org/react-transition-group/css-transition#CSSTransition-prop-onEntering",target:"_blank",rel:"noopener noreferrer"}},[t._v("onEntering"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"onexit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onexit","aria-hidden":"true"}},[t._v("#")]),t._v(" onExit")]),t._v(" "),a("p",[t._v("​\t出场动画第一帧")]),t._v(" "),a("h4",{attrs:{id:"onexiting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onexiting","aria-hidden":"true"}},[t._v("#")]),t._v(" onExiting")]),t._v(" "),a("p",[t._v("​\t出场动画第二帧")]),t._v(" "),a("p",[t._v("####onExited")]),t._v(" "),a("p",[t._v("​\t出场动画执行完")]),t._v(" "),a("h3",{attrs:{id:"多个元素的dom动画切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个元素的dom动画切换","aria-hidden":"true"}},[t._v("#")]),t._v(" 多个元素的DOM动画切换")]),t._v(" "),a("h4",{attrs:{id:"transitiongroup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transitiongroup","aria-hidden":"true"}},[t._v("#")]),t._v(" TransitionGroup")]),t._v(" "),a("p",[t._v("官网："),a("a",{attrs:{href:"https://reactcommunity.org/react-transition-group/transition-group",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://reactcommunity.org/react-transition-group/transition-group"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("内部要嵌套")]),t._v(" "),a("p",[t._v("CSSTransition")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { CSSTransition,TransitionGroup } from 'react-transition-group';\n\n<TransitionGroup>\n    {this.state.list.map((item,index)=>{\n          return (\n          <CSSTransition\n             classNames = 'fader'\n             timeout={1000}\n             unmountOnExit\n             // 当入场动画执行结束之后\n             onEntered = {(el)=>{el.style.color='blue'}}\n             // 第一次展示在页面上也有有动画效果\n             appear={true}\n             key = {index}\n           >\n             <div>{item}</div>\n            </CSSTransition>\n          )\n       })}\n</TransitionGroup>\n\nkey要传给CSSTransition\n\n")])])]),a("h2",{attrs:{id:"redux工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux工作流程","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux工作流程")]),t._v(" "),a("h3",{attrs:{id:"概念简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念简述","aria-hidden":"true"}},[t._v("#")]),t._v(" 概念简述")]),t._v(" "),a("p",[t._v("​\treact只是轻量级视图层框架，需要数据型框架结合使用，开发大型项目。")]),t._v(" "),a("p",[t._v("​\t组件间传值就会变得简单，数据放在公共Store中，不存在组件自身，组件会自动感受到Stroe中对应的数据变化。")]),t._v(" "),a("p",[t._v("​\t组件改变数据就不需要传递了，直接通过Stroe去取就行了，")]),t._v(" "),a("h3",{attrs:{id:"redux-reducer-flux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-reducer-flux","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux = Reducer + Flux")]),t._v(" "),a("p",[t._v("重点：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/mukeReactJiChu/redux.png",alt:""}})]),t._v(" "),a("p",[t._v("Redux Flow")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/mukeReactJiChu/reduxflow.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数据型框架，组件的数据都放在Store中（存储数据的公共区域）")]),t._v(" "),a("p",[t._v("图书馆管理员")])]),t._v(" "),a("li",[a("p",[t._v("React Component  - 指组件(借书人)")])]),t._v(" "),a("li",[a("p",[t._v("Axtion Creators （要借什么书？）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("发送指令\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Reducers （记录本）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("要查下有没有这本书？\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"使用antd实现todolist页面布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用antd实现todolist页面布局","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用Antd实现TodoList页面布局")]),t._v(" "),a("p",[t._v("antd官网："),a("a",{attrs:{href:"https://ant.design/docs/react/introduce-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://ant.design/docs/react/introduce-cn"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { Input,Button } from 'antd';\n\n return (\n    <div style={{marginTop:'10px',marginLeft:'10px'}}>\n         <div>\n             <Input placeholder=\"todo list info\" style={{marginRight:'10px',width: '300px'}} />\n             <Button type=\"primary\">提交</Button>\n             <List \n                    style ={{marginTop:'10px',paddingLeft:'10px'}}\n                    bordered\n                    dataSource={data}\n                    renderItem={item => (\n                      <List.Item>\n                        {item}\n                      </List.Item>\n                 }\n             />\n        </div>\n    </div>\n);\n")])])]),a("p",[t._v("看官方文档即可！")]),t._v(" "),a("h2",{attrs:{id:"redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),a("h3",{attrs:{id:"store创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#store创建","aria-hidden":"true"}},[t._v("#")]),t._v(" Store创建")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yarn add redux\n\n新建文件夹store\n- store\n-- index.js\n-- reducer.js\n")])])]),a("p",[t._v("index.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { createStore } from \"redux\";\nimport reducer from './reducer';\n\n// 创建一个数据的公共存储仓库\nconst store = createStore(reducer);\n\nexport default store;\n\n注意：\n\t要先创建reducer\n\t再把reducer传进来\n")])])]),a("p",[t._v("reducer.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/* \n    state \n    - 存储整个仓库数据\n    action\n*/ \n// 定义默认数据为空\nconst defaultState = {\n    inputValue: '123',\n    list: [1,2,3]\n};\nexport default (state=defaultState, action) => {\n    return state;\n}\n\n返回必须是函数：\n\t传入两个参数state,action\n")])])]),a("p",[t._v("在组件中调用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、首先引入store文件\nimport strore from './store/index.js';\n注意：如果文件夹下要引用index.js，则只需要写\nimport strore from './store'; 即可\n2、传给this.state\nconstructor(props){\n   super(props);\n   console.log(strore.getState())\n   this.state = strore.getState();\n   console.log(this.state)\n}\n\n\n")])])]),a("h3",{attrs:{id:"action和reducer的编写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#action和reducer的编写","aria-hidden":"true"}},[t._v("#")]),t._v(" Action和Reducer的编写")]),t._v(" "),a("p",[t._v("需要谷歌浏览器插件来帮助redux调试")]),t._v(" "),a("p",[t._v("redux devtools  （记得翻墙）")]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("第一次进会有提示")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("No store found. Make sure to follow the instructions.\n")])])])]),t._v(" "),a("li",[a("p",[t._v("点击’ "),a("a",{attrs:{href:"https://github.com/zalmoxisus/redux-devtools-extension#usage",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux-devtools-extension"),a("OutboundLink")],1),t._v(" ‘进行配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const store = createStore(\n    reducer,\n+   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    );\n意思就是：\n\t如果安装了redux devtools 那就在浏览器中使用这个工具\n")])])])])]),t._v(" "),a("p",[t._v("应用场景")]),t._v(" "),a("p",[t._v("​\t改变Store数据。")]),t._v(" "),a("h4",{attrs:{id:"创建action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建action","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建action")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const action = {\n     type: 'change_input_value',\n     value: e.target.value\n}\n")])])]),a("h4",{attrs:{id:"发送action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发送action","aria-hidden":"true"}},[t._v("#")]),t._v(" 发送action")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 将action传给reducer\nstore.dispatch(action);\n")])])]),a("h4",{attrs:{id:"reducer返回newsrore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reducer返回newsrore","aria-hidden":"true"}},[t._v("#")]),t._v(" reducer返回newSrore")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// reducer可以接受state, 但是绝不能修改state\nexport default (state=defaultState, action) => {\n    // state 指上次的数据\n    // action 指传过来的指令\n    console.log(state,action);\n    if (action.type == 'change_input_value') {\n        // 做一次深拷贝\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.inputValue = action.value;\n        return newState;\n    }\n    return state;\n}\n")])])]),a("p",[t._v("但是目前，输入框依然不会改变。")]),t._v(" "),a("h4",{attrs:{id:"更新页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新页面","aria-hidden":"true"}},[t._v("#")]),t._v(" 更新页面")]),t._v(" "),a("p",[t._v("利用subscribe ，传入方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("constructor(props){\n   super(props);\n   this.state = strore.getState();\n   console.log(this.state)\n   this.handleInputChange = this.handleInputChange.bind(this);\n   // store数据只要发生改变可以在subscript中写一个函数\n   // 这个函数就会被立即执行\n   this.handleStoreChange = this.handleStoreChange.bind(this);\n   store.subscribe(this.handleStoreChange);\n}\n")])])]),a("p",[t._v("通过store数据变化调用的方法来更新state数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("handleStoreChange() {\n   console.log('store change');\n   // 当store发生变化后重新取数据\n   // 再通过setState更新数据\n   this.setState(strore.getState());\n}\n")])])]),a("h4",{attrs:{id:"实现提交功能，加深印象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现提交功能，加深印象","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现提交功能，加深印象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("handleBtnClick(){\n   const action = {\n        type: 'add_todo_item'\n   }\n   store.dispatch(action)\n}\n\n因为input框的值变化更新已经写了，所以不用在传value；\n在reducer那边直接取即可\n\nif (action.type === 'add_todo_item') {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.list.push(newState.inputValue);\n    newState.inputValue = '';\n    return newState;\n}\n\n因为之前已经写了subscribe更新页面，所以不用再写了\n")])])]),a("h4",{attrs:{id:"实现删除功能，加深印象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现删除功能，加深印象","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现删除功能，加深印象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("handeleItemClick(index) {\n  console.log(index);\n  const action = {\n     type: 'deleted_todo_item',\n     index: index\n  }\n  store.dispatch(action)\n}\n    \n    \nif (action.type === 'deleted_todo_item') {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.list.splice(action.index,1);\n    return newState;\n}   \n    \n    \n")])])]),a("h2",{attrs:{id:"actiontypes的拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#actiontypes的拆分","aria-hidden":"true"}},[t._v("#")]),t._v(" ActionTypes的拆分")]),t._v(" "),a("p",[t._v("防止定义action时写错")]),t._v(" "),a("p",[t._v("新建ActionTypes.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("export const CHANGE_INPUT_VALUE= 'change_input_value';\nexport const ADD_TODO_ITEM= 'add_todo_item';\nexport const DELETED_TODO_ITEM= 'deleted_todo_item';\n")])])]),a("p",[t._v("然后引用替换即可")]),t._v(" "),a("h2",{attrs:{id:"使用actioncreator统一创建action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用actioncreator统一创建action","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用actionCreator统一创建action")]),t._v(" "),a("p",[t._v("action不能直接定义，能统一管理更好，更适合大型项目")]),t._v(" "),a("p",[t._v("新建actionCreator.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { CHANGE_INPUT_VALUE,ADD_TODO_ITEM,DELETED_TODO_ITEM } from './ationTypes'\n\nexport const getInputChangeAction = (value)=>({\n    type: CHANGE_INPUT_VALUE,\n    value\n})\n\nexport const getAddBtnClick = ()=>({\n    type: ADD_TODO_ITEM\n})\n\nexport const getDeleteItemClick = (index)=>({\n    type: DELETED_TODO_ITEM,\n    index\n})\n\n\ntodolist.js\n先引入：\nimport { getInputChangeAction,getAddBtnClick,getDeleteItemClick } from './store/actionCreator.js';\n\n调用：\nconst action = getDeleteItemClick(index);\nconst action = getAddBtnClick();\nconst action = getInputChangeAction(e.target.value);\n")])])]),a("h2",{attrs:{id:"redux知识点复习补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux知识点复习补充","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux知识点复习补充")]),t._v(" "),a("h3",{attrs:{id:"设计和使用的三项原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计和使用的三项原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 设计和使用的三项原则")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("stroe唯一的")])]),t._v(" "),a("li",[a("p",[t._v("只有stroe能改变自己的内容")])]),t._v(" "),a("li",[a("p",[t._v("Reducer必须是纯函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("纯函数指：给定固定输入，就一定会有固定输出，而且不会有任何副作用。\n\n所以不能有异步操作，以及和时间 new Date()相关的操作、\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"redux核心api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux核心api","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux核心API")]),t._v(" "),a("ol",[a("li",[t._v("createStore - 创建 store仓库")]),t._v(" "),a("li",[t._v("store.dispatch - 发送action")]),t._v(" "),a("li",[t._v("store.getState - 获取store中所有内容")]),t._v(" "),a("li",[t._v("store.subscriBE - 监听 store 的改变")])]),t._v(" "),a("h2",{attrs:{id:"ui组件与容器组件的拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ui组件与容器组件的拆分","aria-hidden":"true"}},[t._v("#")]),t._v(" UI组件与容器组件的拆分")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("ui组件一般叫傻瓜组件，容器组件一般叫聪明组件。")])]),t._v(" "),a("li",[a("p",[t._v("如果组件逻辑和渲染都放在一个组件中时，就需要拆分了")])]),t._v(" "),a("li",[a("p",[t._v("一般用UI组件专门去渲染，容器专门负责组件的逻辑")])])]),t._v(" "),a("h3",{attrs:{id:"ui组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ui组件","aria-hidden":"true"}},[t._v("#")]),t._v(" Ui组件")]),t._v(" "),a("p",[t._v("新建TodoListUi.js")]),t._v(" "),a("p",[t._v("将todolist.js中render() 函数所有的hml剪切过来")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\nimport { Input,Button,List } from 'antd';\n\nclass TodoListUi extends React.Component {\n    render () {\n        return (\n            <div style={{marginTop:'10px',marginLeft:'10px'}}>\n             <div>\n                <Input\n                  onChange ={ this.props.handleInputChange }\n                  value={this.props.inputValue}\n                  placeholder=\"todo list info\"\n                  style={{marginRight:'10px',width: '300px'}} />\n                <Button\n                 type=\"primary\"\n                  onClick={this.props.handleBtnClick}>\n                      提交\n                </Button>\n                <List\n                    style ={{marginTop:'10px',paddingLeft:'10px'}}\n                    bordered\n                    dataSource={this.props.list}\n                    renderItem={(item ,index)=> (\n                      <List.Item onClick={(index) => {this.props.handeleItemClick(index)}}>\n                        {item}\n                      </List.Item>\n                    )}\n                />\n             </div>\n          </div>\n        )\n    }\n}\n\nexport default TodoListUi;\n\n注意：\n\t对于带参数函数要使用es6语法引用\n onClick={(index) => {this.props.handeleItemClick(index)}}\n \n 最后在todolist的render函数中引用即可：\n import TodoListUi from './TodoListUi.js';\n render() {\n        return <TodoListUi\n            inputValue = {this.state.inputValue}\n            handleInputChange = {this.handleInputChange}\n            handleBtnClick = {this.handleBtnClick}\n            list={this.state.list}\n            handeleItemClick = {this.handeleItemClick}\n         />\n}\n这样修改后的todolist就是一个容器组件了。\n")])])]),a("h2",{attrs:{id:"无状态组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无状态组件","aria-hidden":"true"}},[t._v("#")]),t._v(" 无状态组件")]),t._v(" "),a("p",[t._v("当组件只有一个render()函数时就是可以改成一个无状态组件。")]),t._v(" "),a("p",[t._v("无状态组件就是一个函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\nimport { Input,Button,List } from 'antd';\n\nconst TodoListUi = (props)=>{\n    return (\n        <div style={{marginTop:'10px',marginLeft:'10px'}}>\n           <div>\n              <Input\n                onChange ={ props.handleInputChange }\n                value={props.inputValue}\n                placeholder=\"todo list info\"\n                style={{marginRight:'10px',width: '300px'}} />\n              <Button\n               type=\"primary\"\n                onClick={props.handleBtnClick}>\n                    提交\n              </Button>\n              <List\n                  style ={{marginTop:'10px',paddingLeft:'10px'}}\n                  bordered\n                  dataSource={props.list}\n                  renderItem={(item ,index)=> (\n                    <List.Item onClick={(index) => {props.handeleItemClick(index)}}>\n                      {item}\n                    </List.Item>\n                  )}\n              />\n           </div>\n        </div>\n    )\n}\n\nexport default TodoListUi;\n")])])]),a("p",[t._v("当一个组件只有一个render函数的时候，完全可以用一个无状态组件替换这个普通UI组件。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ol",[a("li",[t._v("性能高")])]),t._v(" "),a("p",[t._v("原因：")]),t._v(" "),a("ol",[a("li",[t._v("无状态组件只是普通函数")]),t._v(" "),a("li",[t._v("class是一个js类,包含生命周期函数，执行的东西多得多")])]),t._v(" "),a("p",[t._v("一般UI组件就可以改成无状态（不绝对）")]),t._v(" "),a("h2",{attrs:{id:"redux中发送异步请求获取数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux中发送异步请求获取数据","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux中发送异步请求获取数据")]),t._v(" "),a("p",[t._v("安装并引用axios")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm i axios -S\n\nimpoet axios from 'axios'\n")])])]),a("p",[t._v("生命周期函数中调用并赋值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("componentDidMount() {\n        axios.get(api+'/list.json').then((res)=>{\n            const data = res.data.data;\n            const action = initListAction(data);\n            store.dispatch(action)\n        }).catch(()=>{\n\n        })\n}\n\n这里来一遍流程：\n- ationTypes.js\nexport const INIT_LIST_ACTION = 'init_list_action';\n- actionCreator.js\nexport const initListAction = (data)=>({\n    type: INIT_LIST_ACTION,\n    data\n})\n- reducer.js\nif (action.type === INIT_LIST_ACTION) {\n   const newState = JSON.parse(JSON.stringify(state));\n   newState.list= action.data;\n   return newState;\n}\n\n对应的引用别忘了增加哦~\n")])])]),a("h2",{attrs:{id:"使用redux-thunk-中间件进行ajax请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用redux-thunk-中间件进行ajax请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用Redux-thunk 中间件进行Ajax请求")]),t._v(" "),a("p",[t._v("​\t异步请求或者复杂逻辑，都放在组件中执行，会使得组件变得臃肿，所以可以用Redux-thunk中间件将这种请求都放在action中实现。")]),t._v(" "),a("p",[t._v("官网："),a("a",{attrs:{href:"https://github.com/reduxjs/redux-thunk",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/reduxjs/redux-thunk"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"基本配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本配置")]),t._v(" "),a("p",[t._v("安装")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yarn add redux-thunk\n")])])]),a("p",[t._v("使用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-store\n-- index.js\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\n\nconst store = createStore(\n      reducer,\n+     applyMiddleware([thunk,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()])\n);\n\n有问题！\n改为：applyMiddleware(thunk)\nRredux的中间件\n")])])]),a("p",[t._v("如果也想用redux-devtools怎么办：\n官网："),a("a",{attrs:{href:"https://github.com/zalmoxisus/redux-devtools-extension",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/zalmoxisus/redux-devtools-extension"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import { createStore, applyMiddleware,compose } from "redux";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(thunk),\n);\n\nconst store = createStore(reducer, enhancer);\n')])])]),a("h3",{attrs:{id:"接口请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口请求")]),t._v(" "),a("p",[t._v("actionCreator.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const api = 'https://www.easy-mock.com/mock/5cac669516fea85e587f8deb/luodiye';\nexport const getTodoList = () => {\n    return (dispatch) => {\n        axios.get(api + '/list.json').then((res)=>{\n            console.log(res.data.data);\n            const data = res.data.data;\n            const action = initListAction(data);\n            dispatch(action);\n        })\n    }\n}\n\n注意两点：\n1、dispatch可以直接参数接受，无需引入store;\n2、initListAction当前文件中有，直接用即可。\n")])])]),a("p",[t._v("todolist.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("componentDidMount() {\n   const action = getTodoList();\n   store.dispatch(action);\n}\n注意：\n\t如果actionCreator.js中没有引入thunk\n\t会报错提示action不是一个对象\n\t只有用了thunk，才可以是一个函数\n1、action如果是函数，dispatch就会默认执行这个函数；\n2、这个函数也会默认接受dispatch这个函数\n")])])]),a("h3",{attrs:{id:"问题定位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题定位","aria-hidden":"true"}},[t._v("#")]),t._v(" 问题定位")]),t._v(" "),a("p",[t._v("删除的时候会报错？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<List\n   style ={{marginTop:'10px',paddingLeft:'10px'}}\n   bordered\n   dataSource={props.list}\n   renderItem={(item ,index)=> (\n   <List.Item onClick={() => {props.handeleItemClick(index)}}>\n    {item}\n   </List.Item>\n}\n/>\n\nindex指向错误，onClick的index指向事件对象。\n\n即，onClick事件不用传index参数了\n")])])]),a("h2",{attrs:{id:"什么是redux中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是redux中间件","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是Redux中间件")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("指action和store之间")])]),t._v(" "),a("li",[a("p",[t._v("之前action只能是对象")])]),t._v(" "),a("li",[a("p",[t._v("通过中间件，action可以是函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("dispatch可以根据参数的不能执行不同的操作\n- 对象 直接传给 store\n- 函数 执行这个函数\n")])])])])]),t._v(" "),a("p",[t._v("所以中间件，就是对store的dispatch 方法进行了升级。")]),t._v(" "),a("h2",{attrs:{id:"redux-saga中间件使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-saga中间件使用","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux-saga中间件使用")]),t._v(" "),a("p",[t._v("​\t也是进行异步操作及拆分的中间件，可以完全代替Redux-thunck。")]),t._v(" "),a("p",[t._v("官网："),a("a",{attrs:{href:"https://github.com/redux-saga/redux-saga",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/redux-saga/redux-saga"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("安装：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install --save redux-saga\n")])])]),a("h3",{attrs:{id:"基本配置-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本配置-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("- store\n-- index.js\nimport createSagaMiddleware from 'redux-saga'\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst enhancer = composeEnhancers(\n    applyMiddleware(sagaMiddleware)\n);\n\n")])])]),a("p",[t._v("因为需要将所有的异步单独处理，所以需要再单独创建一个saga文件、")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("- store\n-- sagas.js\n\n然后引入：\nimport todoSaga from './sagas';\n\n创建好store之后还要执行下这个文件\n  const store = createStore(reducer, enhancer);\n+ sagaMiddleware.run(todoSaga)\n\n")])])]),a("p",[t._v("sogas.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function* mySaga() {\n    \n}\n  \nexport default mySaga;\n")])])]),a("p",[t._v("这样基本配置成功了。")]),t._v(" "),a("h3",{attrs:{id:"统一处理异步函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统一处理异步函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 统一处理异步函数")]),t._v(" "),a("p",[t._v("所以redux-saga比redux-thunk要更好一点：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("redux-thunk是把请求放在actionCreator.js文件中")])]),t._v(" "),a("li",[a("p",[t._v("redux-saga是单独放在sagas.js文件中")])])]),t._v(" "),a("p",[t._v("很明显，第二种更加有利于维护！")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、重新新建一个action类型getInitList\nactionCreator.js：\nexport const getInitList = () => ({\n    type: GET_INIT_LIST\n})\n\nationTypes.js：\nexport const GET_INIT_LIST = 'get_init_list';\n\ntodolist.js中发送这个类型的action\ncomponentDidMount() {\n    const action = getInitList();\n    store.dispatch(action);\n}\n\n2、通过sagas.js捕捉这个类型的action即可\nimport { takeEvery, put } from 'redux-saga/effects'\nimport { GET_INIT_LIST } from './ationTypes'\nimport { initListAction } from './actionCreator.js';\nimport axios from 'axios';\n\nconst api = 'https://www.easy-mock.com/mock/5cac669516fea85e587f8deb/luodiye';\nfunction* getInitList() {\n    const res = yield axios.get(api + '/list.json');\n    const data = res.data.data;\n    const action = initListAction(data);\n    // yield 意思是等上面处理完成之后，再往下执行\n    yield put(action);\n}\n\n// yield ： generator 函数\nfunction* mySaga() {\n    // 只要捕捉到一个GET_INIT_LIST对应的action的话，\n    // 就会执行一个fetchUser方法\n    yield takeEvery(GET_INIT_LIST, getInitList);\n}\n  \nexport default mySaga;\n\n注意：\n - yield put(action) 相当于store.dispatch(action);\n - yield ： generator 函数\n-  yield 意思是等上面处理完成之后，再往下执行\n")])])]),a("h4",{attrs:{id:"请求失败处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求失败处理","aria-hidden":"true"}},[t._v("#")]),t._v(" 请求失败处理")]),t._v(" "),a("p",[t._v("这种请求失败没法处理了，所以要考虑请求失败情况")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("try {\n    const res = yield axios.get(api + '/list.json');\n    const data = res.data.data;\n    const action = initListAction(data);\n    // yield 意思是等上面处理完成之后，再往下执行\n    yield put(action);\n} catch (error) {\n    alert('list.json请求失败')\n}\n")])])]),a("h2",{attrs:{id:"react-redux的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-redux的使用","aria-hidden":"true"}},[t._v("#")]),t._v(" React-Redux的使用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm i react-redux -S\n")])])]),a("h3",{attrs:{id:"基本配置-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本配置-3","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本配置")]),t._v(" "),a("p",[t._v("在src下index.js引入")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import {Provider} from 'react-redux';\nimport store from './store';\n\nconst App = (\n    <Provider store={store}>\n        <TodoList />\n    </Provider>\n)\n\nReactDOM.render(App, document.getElementById('root'));\n")])])]),a("ul",[a("li",[t._v("Provider就是一个组件。")]),t._v(" "),a("li",[t._v("来自react-redux，第一个核心API")]),t._v(" "),a("li",[t._v("意思：提供器连接store，那么里面所有组件都能获得store中内容了。")])]),t._v(" "),a("h3",{attrs:{id:"怎么获取数据？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么获取数据？","aria-hidden":"true"}},[t._v("#")]),t._v(" 怎么获取数据？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("todolist.js\n\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) =>{\n    return {\n\t\tinputValue: state.inputValue\n    }\n}\n\nconst mapDispathToProps = (state) =>{\n    return {\n        inputValue: state.inputValue\n    }\n}\n\n// store.dispatch 挂载到 props上\nconst mapDispathToProps = (dispatch) =>{\n    return {\n        changeInputValue (e) {\n            const action = {\n                type:'change_input_value',\n                value: e.target.value\n            }\n            console.log(e.target.value)\n            dispatch(action)\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispathToProps)(TodoList);\n")])])]),a("ul",[a("li",[a("p",[t._v("connect react-redux 第二个API")])]),t._v(" "),a("li",[a("p",[t._v("让todolist组件和store做链接")])]),t._v(" "),a("li",[a("p",[t._v("两个参数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mapStateToProps：\n把store中的数据映射给组件，变成props\n- 连接规则\n页面引用时\n将：\n    value = {this.state.inputValue} \n改为：\n    value = {this.props.inputValue} \n\nmapDispathToProps:\n- 对store数据做修改\n改造reducer.js\nconst defaultDate = {\n    inputValue:'hello word',\n    list: ''\n}\nexport default (state = defaultDate,action) => {\n    if(action.type===\"change_input_value\"){\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.inputValue = action.value;\n        return newState\n    }\n    return state;\n}\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"优雅代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优雅代码","aria-hidden":"true"}},[t._v("#")]),t._v(" 优雅代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("解构赋值：\nconst { inputValue,changeInputValue,handleClick,handleDelete } = this.props;\n\n元素赋值时，就可以去掉 this.prop了\n- 在render()函数里面操作\n")])])]),a("p",[t._v("改成无状态组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const TodoList = (props) => {\n    const { list,inputValue,changeInputValue,handleClick,handleDelete } = props;\n    return (\n        <div>\n            <div>\n            <input \n                  value = {inputValue}\n                  onChange={changeInputValue}\n                />\n                <button onClick={handleClick}>提交</button>\n            </div>\n            <ul>\n                {\n                    list.map((item,index)=>{\n                        return <li key={index} onClick={(index)=>{handleDelete(index)}}>{item}</li>\n                    })\n                }\n            </ul>\n        </div>\n    )\n}\n")])])]),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("react-redux中的connect作用")]),t._v(" "),a("p",[t._v("​\t起到了一个容器组件的作用，使得todolist组件变成了一个UI组件，进而可改写成无状态组件。")]),t._v(" "),a("h2",{attrs:{id:"报错"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#报错","aria-hidden":"true"}},[t._v("#")]),t._v(" 报错")]),t._v(" "),a("h3",{attrs:{id:"_01"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01","aria-hidden":"true"}},[t._v("#")]),t._v(" 01")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000018019892",target:"_blank",rel:"noopener noreferrer"}},[t._v("React报错 You provided a "),a("code",[t._v("value")]),t._v(" prop to a form field without..."),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("原因：")]),t._v(" "),a("p",[t._v("​\t原因是因为input标签，没有定义onChange 但是提供了value属性。React会抛出警告，并将元素设置为只读。")]),t._v(" "),a("p",[t._v("如果目标是只读字段，最好使用readOnly属性明确加以定义。这不仅会消除警告，也会确保代码的可读性。")]),t._v(" "),a("p",[t._v("解决：")]),t._v(" "),a("p",[t._v("​\t可以添加readOnly={true} ，或者直接添加readOnly属性，而不设置值，React会默认将该属性的值设为true。")]),t._v(" "),a("p",[a("strong",[t._v("如果有onchange记得去掉这个属性")])]),t._v(" "),a("h3",{attrs:{id:"_02"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02","aria-hidden":"true"}},[t._v("#")]),t._v(" 02")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("循环绑定的元素中点击事件一定要用箭头函数包裹，")])]),t._v(" "),a("li",[a("p",[t._v("否则会自动执行")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" onClick={(index)=>{this.props.handleDelete(index)}}\n")])])])])},[],!1,null,null,null);e.default=s.exports}}]);