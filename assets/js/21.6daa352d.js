(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{199:function(e,a,s){"use strict";s.r(a);var t=s(0),r=Object(t.a)({},function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"nodejs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodejs","aria-hidden":"true"}},[e._v("#")]),e._v(" NodeJs")]),e._v(" "),s("h1",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),s("h2",{attrs:{id:"前端的主要工作是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端的主要工作是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 前端的主要工作是什么？")]),e._v(" "),s("ol",[s("li",[e._v("绘制网页的页面（HTML）")]),e._v(" "),s("li",[e._v("写CSS样式美化页面、写JS做网页交互（更多的是网页的特效）")]),e._v(" "),s("li",[e._v("借助于 XHR（$.ajax   $.get   $.post）请求后端的接口；实现前后端分离开发")]),e._v(" "),s("li",[e._v("使用前端的（框架）去完成界面的开发")]),e._v(" "),s("li",[e._v("总结：前端的主要工作：用户能看到的东西，基本上都是前端做出来；")])]),e._v(" "),s("h2",{attrs:{id:"后端的主要工作是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后端的主要工作是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 后端的主要工作是什么？")]),e._v(" "),s("ol",[s("li",[e._v("后端为前端程序员暴露API接口；")]),e._v(" "),s("li",[e._v("后端也要操作数据库；")]),e._v(" "),s("li",[e._v("优化后端业务的性能；")])]),e._v(" "),s("h2",{attrs:{id:"nodejs主要做什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodejs主要做什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" NodeJs主要做什么？")]),e._v(" "),s("ul",[s("li",[e._v("目前这个阶段主要用来写后端的接口")]),e._v(" "),s("li",[e._v("浏览器的JS在V8引擎中运行，node就是把V8引擎搬到了后台,即让JS能够在后台运行。")])]),e._v(" "),s("h2",{attrs:{id:"nodejs安装版本-lts-和-current-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodejs安装版本-lts-和-current-区别","aria-hidden":"true"}},[e._v("#")]),e._v(" NodeJs安装版本:LTS 和 Current 区别")]),e._v(" "),s("ol",[s("li",[e._v("LTS 是长期稳定版的意思（这个安装包用起来比较稳定）【推荐在企业中使用】")]),e._v(" "),s("li",[e._v("Current 是最新特征版，这个安装包中有最新的Node特性，但是，可能有一些潜藏的Bug未解决；【推荐学习或尝鲜去使用】")])]),e._v(" "),s("h2",{attrs:{id:"node的组成部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node的组成部分","aria-hidden":"true"}},[e._v("#")]),e._v(" node的组成部分")]),e._v(" "),s("h3",{attrs:{id:"浏览器中的js组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中的js组成","aria-hidden":"true"}},[e._v("#")]),e._v(" 浏览器中的JS组成")]),e._v(" "),s("ul",[s("li",[e._v("ECMAScript核心")]),e._v(" "),s("li",[e._v("DOM")]),e._v(" "),s("li",[e._v("BOM")])]),e._v(" "),s("p",[e._v("node中的JS组成部分")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("ECMAScript（没有DOM，BOM）")]),e._v(" "),s("p",[e._v("node中没有浏览器，所以不需要DOM和BOM")])]),e._v(" "),s("li",[s("p",[e._v("全局成员")]),e._v(" "),s("p",[e._v("console.log，setTimeout，setInterval")])]),e._v(" "),s("li",[s("p",[e._v("模块系统")]),e._v(" "),s("p",[e._v("node中的一些核心模块")])])]),e._v(" "),s("h1",{attrs:{id:"ecmascript6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript6","aria-hidden":"true"}},[e._v("#")]),e._v(" ECMAScript6")]),e._v(" "),s("p",[e._v("var定义变量的缺点：")]),e._v(" "),s("ul",[s("li",[e._v("1.变量提升的问题")]),e._v(" "),s("li",[e._v("2.没有块级作用域（作用域不受花括号限制）")])]),e._v(" "),s("h2",{attrs:{id:"let与const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let与const","aria-hidden":"true"}},[e._v("#")]),e._v(" let与const")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("let 没有变量的提升用来代替var定义变量")]),e._v(" "),s("p",[e._v("有{} 作用域")])]),e._v(" "),s("li",[s("p",[e._v("const 没有变量的提升用来定义常量")]),e._v(" "),s("p",[e._v("有{} 作用域 初始化的时候一定要赋值 , 赋值之后不能重新赋值")]),e._v(" "),s("p",[e._v("如：const a = 1; a = 2; 发生错误")])])]),e._v(" "),s("h2",{attrs:{id:"解构赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值","aria-hidden":"true"}},[e._v("#")]),e._v(" 解构赋值")]),e._v(" "),s("p",[e._v("所谓的解构赋值，就是把 某个对象中的属性，当作变量，给解放出来，这样，今后就能够当作变量直接使用了")]),e._v(" "),s("ul",[s("li",[e._v("可以使用 "),s("code",[e._v(":")]),e._v("为解构出来的变量重命名")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  // 对象的解构赋值,按照属性名解构\n  const { name : name123, age, gender } = person\n  console.log(name123)\n  //数组的解构复制,按照顺序解构\n  let arr: number[] = [2,3]\n  let [num1,num2,num3] = arr\n  console.log([num1,num2,num3])//num3=undfine\n")])])]),s("h2",{attrs:{id:"字符串扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串扩展","aria-hidden":"true"}},[e._v("#")]),e._v(" 字符串扩展")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("模板字符串")])]),e._v(" "),s("li",[s("p",[e._v("startsWith() 和 endsWith()")]),e._v(" "),s("p",[e._v("​\tstartsWith() 用来判断字符串，是否以指定的字符开头，如果是，返回值是 true，否则返回 false")]),e._v(" "),s("p",[e._v("​\tendsWith() 用来判断字符串，是否以指定的字符结尾；如果是，返回值是 true，否则返回 false")])]),e._v(" "),s("li",[s("p",[e._v("padStart() 和 padEnd()")]),e._v(" "),s("p",[e._v("​\t在字符串前面或者后面追加字符串;")]),e._v(" "),s("p",[e._v("​\t参数一：表示填充完后长度为几位; 参数2：表示用什么填充")])])]),e._v(" "),s("h2",{attrs:{id:"rest参数-和-字符串的扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rest参数-和-字符串的扩展","aria-hidden":"true"}},[e._v("#")]),e._v(" rest参数 和 字符串的扩展")]),e._v(" "),s("ul",[s("li",[e._v("rest参数： 在形参调用的位置 使用 ...args args是一个数组")]),e._v(" "),s("li",[e._v("字符串的扩展： 在实参的位置 使用 ...arr")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  function show(...args){  // rest参数\n\n  }\n\n  var arr = [1,2,3,4]\n  show(...arr);  //字符串的扩展\n")])])]),s("h2",{attrs:{id:"箭头函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数","aria-hidden":"true"}},[e._v("#")]),e._v(" 箭头函数")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\x3c!-- 标准定义   --\x3e\nvar add = () => {}\n\x3c!-- 只有一个参数   --\x3e\nvar add = (x) => {console.log(x)}\nvar add = x => console.log(x)\n\x3c!-- 只有一个参数,且只有一个返回值   --\x3e\nvar add = x => {return x}\nvar add = x => x\n\x3c!-- 两个参数    --\x3e\nvar add = (x,y) => {return x+y}\nvar add = (x,y) => x + y\n")])])]),s("ol",[s("li",[e._v("箭头函数的特性： 箭头函数内部的 this, 永远和 箭头函数外部的 this 保持一致；")]),e._v(" "),s("li",[e._v("箭头函数，本质上就是一个匿名函数")]),e._v(" "),s("li",[e._v("注意： 如果我们省略了 右侧的 { }， 那么，默认就会把 右侧函数体中的代码执行结果，返回出去     (x, y) => { return  x + y }   可以简写成    (x, y) => x + y")])]),e._v(" "),s("h2",{attrs:{id:"文件操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件操作","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件操作")]),e._v(" "),s("h3",{attrs:{id:"文件读取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件读取","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件读取")]),e._v(" "),s("p",[e._v("fs.readFile(path,[,options],callback)")]),e._v(" "),s("ul",[s("li",[e._v("path 文件路径")]),e._v(" "),s("li",[e._v("options 可选的字符编码 默认为null")]),e._v(" "),s("li",[e._v("callback  回调函数\n"),s("ul",[s("li",[e._v("err 错误消息")]),e._v(" "),s("li",[e._v("data 文件内容")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  fs.readFile('./files/1.txt','utf-8',(err,dataStr)=>{\n    if(err) throw err\n    console.log(dataStr)\n  })\n")])])]),s("h3",{attrs:{id:"文件写入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件写入","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件写入")]),e._v(" "),s("p",[e._v("fs.writeFile()")]),e._v(" "),s("div",{staticClass:"language-//会覆盖掉之前内容 extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const fs = require("fs")\nfs.writeFile("./file/demo2.txt","荆轲刺秦王123",(err)=>{\n    console.log(err)\n    if(err) return console.log("写入文件失败！"+err.message)\n    console.log(\'写入文件成功！\')\n})\n')])])]),s("h3",{attrs:{id:"文件追加"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件追加","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件追加")]),e._v(" "),s("p",[e._v("fs.appendFile()")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const fs = require("fs");\nfs.appendFile("./file/demo2.txt","\\n纸巾",err=>{\n    if(err) console.log(\'追加内容失败\'+err.message)\n    console.log(\'追加内容成功！\')\n})\n')])])]),s("h3",{attrs:{id:"文件复制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件复制","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件复制")]),e._v(" "),s("p",[e._v("方法1（原理）：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('fs.readFile("./file/demo2.txt","utf-8",(err,data)=>{\n    if(err) console.log("读取文件失败！"+err.message)\n    fs.writeFile("./file/dome-copy.txt",data,err=>{\n        if(err) console.log(\'写入文件失败\'+err.message)\n        console.log(\'写入文件成功！\')\n    })\n})\n')])])]),s("p",[e._v("方法2（推荐）：")]),e._v(" "),s("p",[e._v("fs.copyFile()")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("fs.copyFile(\"./file/demo2.txt\",\"./file/dome-copy2.txt\",err=>{\n    if(err) console.log('复制文件失败'+err.message)\n        console.log('复制文件成功！')\n})\n")])])]),s("h3",{attrs:{id:"获取当前文件路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取当前文件路径","aria-hidden":"true"}},[e._v("#")]),e._v(" 获取当前文件路径")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//导入文件模块\nconst fs = require("fs")\n//倒入路径模块\nconst path = require(\'path\');\n//使用path.join()拼接地址（拼接地址可以是当前目录下任意文件）\n//__dirname获取当前文件的目录\nconst newPath = path.join(__dirname,"file/demo2.txt")\n//最后根据文件路径读取文件\nfs.readFile(newPath,"utf-8",(err,data)=>{\n    if(err) return console.log("读取失败！"+err.message)\n    console.log(data)\n})\n')])])]),s("p",[e._v("补充：如果是直接访问当前文件可以：直接使用__filename")]),e._v(" "),s("p",[e._v("拓展：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('2、读取文件另一种方式\nconst file = require("fs")\nconst path = require("path")\nconst txtpath = path.join(__dirname,"04函数扩展.js")\n//读取文件\nfile.stat(txtpath,(err,data)=>{\n    if(err) return console.log("读取文件失败"+message)\n    console.log("文件读取成功！")\n    console.log(data)\n})\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('2、读取指定目录中所有文件的名称\nconst file = require("fs")\nconst path = require("path")\nfile.readdir(__dirname,(err,filename)=>{\n    if(err) return console.log("读取文件名失败")\n    console.log("读取文件名成功")\n    console.log(filename)\n})\n')])])]),s("h3",{attrs:{id:"返回路径中文件的文件名（不包括后缀）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回路径中文件的文件名（不包括后缀）","aria-hidden":"true"}},[e._v("#")]),e._v(" 返回路径中文件的文件名（不包括后缀）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//1、获取当前文件路径\nconst absPath = path.join(__filename)\n2、获取.js文件的文件名\nconsole.log(path.basename(absPath，'.js'))\n")])])]),s("h3",{attrs:{id:"返回文件扩展名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回文件扩展名","aria-hidden":"true"}},[e._v("#")]),e._v(" 返回文件扩展名")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//1、获取当前文件路径\nconst absPath = path.join(__filename)\n2、获取.js文件的扩展名\nconsole.log(path.extname(absPath))//如果没有扩展名，返回为空\n")])])]),s("h3",{attrs:{id:"文件操作案例："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件操作案例：","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件操作案例：")]),e._v(" "),s("p",[e._v("获取当前目录下所有文件的信息（文件名、大小、是否为文件），并保存到info.txt文件中")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const file = require("fs")\nconst path = require("path")\n//1、获取路径下所有文件名称\nfile.readdir(__dirname, (err, filenames) => {\n    if (err) return console.log("读取文件名称失败！")\n    let infostr = \'\'\n    let countflag = 0\n    //2、循环遍历，所有文件\n    filenames.forEach(item=>{\n        // (item)所有文件的文件名\n        //3、拼接出每个文件的文件路径\n        const absPath = path.join(__dirname,item)\n        //4、读取所有文件信息\n        file.stat(absPath,(err,txtinfo)=>{\n            const strinfo = `\n            文件名：${item}\\n\n            文件大小：${txtinfo.size}\\n\n            是否为文件${txtinfo.isFile()}\\n---------------------------\\n`\n            infostr += strinfo //每次都累加，相当于原有基础上拼接\n            //5、将所有文件信息写入，指定文件中\n            file.writeFile(path.join(__dirname,"file/info.txt"),infostr,(err)=>{\n                 if (err) return console.log("写入文件失败！")\n                 console.log("写入文件信息成功")\n            })\n        })\n    })\n})\n')])])]),s("h1",{attrs:{id:"javascript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript","aria-hidden":"true"}},[e._v("#")]),e._v(" Javascript")]),e._v(" "),s("h2",{attrs:{id:"javascript-是单线程的一门语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-是单线程的一门语言","aria-hidden":"true"}},[e._v("#")]),e._v(" Javascript 是单线程的一门语言")]),e._v(" "),s("ol",[s("li",[e._v("什么是单线程：用户无法主动开启子线程，对于JS的运行来说，永远是主线程在执行关键代码；")]),e._v(" "),s("li",[e._v("什么是多线程：用户可以主动开启子线程；    Thread  td = new Thread()")]),e._v(" "),s("li",[e._v("在Node中，操作文件和网络都是比较耗时的操作；")])]),e._v(" "),s("h2",{attrs:{id:"node中为什么大量使用异步方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node中为什么大量使用异步方法","aria-hidden":"true"}},[e._v("#")]),e._v(" Node中为什么大量使用异步方法")]),e._v(" "),s("ol",[s("li",[e._v("为什么要使用 异步方法呢： 因为 异步方法，不会阻塞CPU去执行其它任务；")]),e._v(" "),s("li",[e._v("为什么在Node中不推荐使用同步呢： 因为 同步，需要一个一个执行，耗时的操作会阻碍CPU执行后续任务，因此，效率慢；")])]),e._v(" "),s("h2",{attrs:{id:"commonjs-模块规范和模块的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块规范和模块的使用","aria-hidden":"true"}},[e._v("#")]),e._v(" CommonJS 模块规范和模块的使用")]),e._v(" "),s("p",[e._v("Node.js 实现了 CommonJS 模块化规范；")]),e._v(" "),s("ol",[s("li",[e._v("什么是 CommonJS 规范？\n"),s("ul",[s("li",[e._v("CommonJS 是"),s("strong",[e._v("为了实现 Javascript 的模块化")]),e._v("，而制定的一套规范；")])])]),e._v(" "),s("li",[e._v("为什么 Javascript 需要模块化？\n"),s("ul",[s("li",[e._v("浏览器中的Javascript有没有实现模块化？（在一个JS文件中，能不能引用另外JS文件中的方法）")]),e._v(" "),s("li",[e._v("因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。")])])]),e._v(" "),s("li",[e._v("如何实现 Javascript 的模块化？\n"),s("ul",[s("li",[e._v("为了统一大家编写模块时候的规则，方便各模块之间的依赖和调用，于是 CommonJS 规范就应运而生了。")])])]),e._v(" "),s("li",[e._v("那么，CommonJS 模块化规范，到底是个什么东西？？\n"),s("ul",[s("li",[e._v("定义了什么是模块")]),e._v(" "),s("li",[e._v("一个JS模块中，如何引入其它的JS模块")]),e._v(" "),s("li",[e._v("一个JS模块中，如何向外暴露一些成员，供其它模块调用；")]),e._v(" "),s("li",[e._v("如果没有类似于 CommonJS 的规范，行不行？")]),e._v(" "),s("li",[e._v("只有大家遵守同样的规范，才能够协作开发，方便别人，同时也方便自己；")])])])]),e._v(" "),s("h2",{attrs:{id:"全局作用域和模块作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域和模块作用域","aria-hidden":"true"}},[e._v("#")]),e._v(" 全局作用域和模块作用域")]),e._v(" "),s("ol",[s("li",[e._v("每个JS文件，就是一个独立的模块，在这个JS文件中，所定义的任何方法、属性、变量、常量、对象，默认都属于 模块作用域，并不会属于 全局作用域；")]),e._v(" "),s("li",[e._v("如果在某个模块内部，想为 全局的 global 作用域挂载一些属性，需要显示的调用"),s("code",[e._v("global.***")]),e._v("来挂载；")])]),e._v(" "),s("h3",{attrs:{id:"global（全局作用域）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#global（全局作用域）","aria-hidden":"true"}},[e._v("#")]),e._v(" global（全局作用域）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//定义1.js文件并写入代码\nvar b = 'this is txt2'\n//将变量 b 设为 全局变量\nglobal.b=b\n")])])]),s("h3",{attrs:{id:"require（模块引用）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#require（模块引用）","aria-hidden":"true"}},[e._v("#")]),e._v(" require（模块引用）")]),e._v(" "),s("p",[e._v("每一个实现了 CommonJS 规范的模块，必须定义一个 require() 函数，使用这个 require 函数，就能够 很方便的导入其它 模块中的成员，供自己使用；")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('require("./1.js")\n//只有当模块文件中的变量设置到全局时才能调用，因为被视作闭包\nconsole.log(a)\n')])])]),s("h3",{attrs:{id:"exports（模块定义）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exports（模块定义）","aria-hidden":"true"}},[e._v("#")]),e._v(" exports（模块定义）")]),e._v(" "),s("p",[e._v("每一个模块中，如果想要把自己的一些私有成员，暴露给别人使用，那么，必须实现一个 exports 对象，这个对象，将来，如果你想把自己的成员，暴露给别人使用，只需要把自己的成员，挂载到 exports 上就行了")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var a = '张三'\n//暴露成员\nexports.a = a\n")])])]),s("h3",{attrs:{id:"module（模块标识）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module（模块标识）","aria-hidden":"true"}},[e._v("#")]),e._v(" module（模块标识）")]),e._v(" "),s("p",[e._v("这个 module 也是Common JS 规定的，它表示一个具体的模块，也是一个对象；")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var a = 45\n//暴露成员\nmodule.exports.a = a\n")])])]),s("h3",{attrs:{id:"module-exports-和-exports-的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module-exports-和-exports-的关系","aria-hidden":"true"}},[e._v("#")]),e._v(" module.exports 和 exports 的关系")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//1.JS\nvar a = '123'\nvar b = '126'\nmodule.exports = {a:12}\nexports.b = b\n")])])]),s("p",[e._v("引用：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const m1 = require("./m1.js")\nconsole.log(m1)\n// 都指向同一空对象，但是对外暴露的对象以module为准\n')])])]),s("p",[e._v("所以，向外暴露成员时。推荐使用（module.exports）")]),e._v(" "),s("h1",{attrs:{id:"node结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node结构","aria-hidden":"true"}},[e._v("#")]),e._v(" Node结构")]),e._v(" "),s("h2",{attrs:{id:"node-中的-javascript-由几部分组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-中的-javascript-由几部分组成","aria-hidden":"true"}},[e._v("#")]),e._v(" Node 中的 Javascript 由几部分组成")]),e._v(" "),s("ol",[s("li",[e._v("ECMAScript 核心")]),e._v(" "),s("li",[e._v("全局成员")]),e._v(" "),s("li",[e._v("模块系统成员\n"),s("ul",[s("li",[e._v("模块系统成员，根据一些区别，又可以分为三大类： 核心模块、第三方模块、用户自定义模块")])])])]),e._v(" "),s("h2",{attrs:{id:"模块分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块分类","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块分类")]),e._v(" "),s("h3",{attrs:{id:"核心模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心模块","aria-hidden":"true"}},[e._v("#")]),e._v(" 核心模块")]),e._v(" "),s("ol",[s("li",[e._v("什么是核心模块：由Node官方提供的好用的模块，叫做核心模块；只要大家在计算机中，安装了Node这个应用程序，那么，我们的计算机中就已经安装了所有的 核心模块；")]),e._v(" "),s("li",[e._v("如何使用核心模块："),s("code",[e._v("require('核心模块标识符')")])])]),e._v(" "),s("h3",{attrs:{id:"第三方模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三方模块","aria-hidden":"true"}},[e._v("#")]),e._v(" 第三方模块")]),e._v(" "),s("ol",[s("li",[e._v("什么是第三方模块：一些非官方提供的模块，叫做第三方模块；注意，第三方模块，并不在我们的计算机上，如果大家需要使用某些第三方模块，必须去一个叫做 "),s("code",[e._v("NPM")]),e._v(" 的网站上搜索并下载才能使用；")]),e._v(" "),s("li",[e._v("如何使用第三方模块：\n"),s("ul",[s("li",[e._v("先从 npm 官网上下载指定的第三方模块")]),e._v(" "),s("li",[e._v("使用 "),s("code",[e._v("require('第三方模块的名称标识符')")]),e._v("来导入这个模块")]),e._v(" "),s("li",[e._v("根据 第三方模块的 官方文档，尝试使用")])])])]),e._v(" "),s("h3",{attrs:{id:"用户自定义模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户自定义模块","aria-hidden":"true"}},[e._v("#")]),e._v(" 用户自定义模块")]),e._v(" "),s("ol",[s("li",[e._v("什么是用户模块：程序员自己写的JS文件，就叫做 用户自定义模块；")]),e._v(" "),s("li",[e._v("如何使用用户模块："),s("code",[e._v("require('路径标识符')")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const app = require('./lib/index')\n")])])]),s("h2",{attrs:{id:"包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包","aria-hidden":"true"}},[e._v("#")]),e._v(" 包")]),e._v(" "),s("h3",{attrs:{id:"什么是包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是包","aria-hidden":"true"}},[e._v("#")]),e._v(" 什么是包")]),e._v(" "),s("ol",[s("li",[e._v("英文名叫做 "),s("code",[e._v("Packages")]),e._v("，包是在模块基础上更深一步的抽象，目的是：方便分发推广基于 CommonJS 规范实现的 应用程序 或 类库；")]),e._v(" "),s("li",[e._v("包可以看作是 模块、代码 和 其它资源 组合起来形成的 独立作用域；")])]),e._v(" "),s("h3",{attrs:{id:"规范的包结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规范的包结构","aria-hidden":"true"}},[e._v("#")]),e._v(" 规范的包结构")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("包都要以一个单独的目录而存在")]),e._v("；")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("package.json")]),e._v(" 必须在包的顶层目录下")]),e._v("；")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("package.json")]),e._v(" 文件必须符合 JSON 格式，并且必须包含如下三个属性："),s("code",[e._v("name")]),e._v(", "),s("code",[e._v("version")]),e._v(", "),s("code",[e._v("main")])]),e._v(" "),s("ul",[s("li",[e._v("name:  包的名字")]),e._v(" "),s("li",[e._v("version: 包的版本号")]),e._v(" "),s("li",[e._v("main: 表示包的入口文件")])])]),e._v(" "),s("li",[e._v("二进制文件应该在"),s("strong",[e._v("bin目录")]),e._v("下;")]),e._v(" "),s("li",[e._v("javaScript代码应该在"),s("strong",[e._v("lib目录")]),e._v("下;")]),e._v(" "),s("li",[e._v("文档应该在"),s("strong",[e._v("doc目录")]),e._v("下;")]),e._v(" "),s("li",[e._v("单元测试应该在"),s("strong",[e._v("test目录")]),e._v("下;")]),e._v(" "),s("li",[e._v("Node.js对包要求并没有那么严格，只要顶层目录下有"),s("code",[e._v("package.json")]),e._v("，并"),s("strong",[e._v("符合基本规范")]),e._v("即可;")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n    "name":"mycalc",\n    "version":"1.0.0",\n    "main":"./lib/index.js"\n}\n')])])]),s("p",[e._v("外界使用就必须先找到main： index.js文件（要引用包应该在包的同级目录下创建app.js文件）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const app = require('./lib/index') //引入自自定义模块\nconsole.log(app)\n")])])]),s("h3",{attrs:{id:"描述文件-package-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#描述文件-package-json","aria-hidden":"true"}},[e._v("#")]),e._v(" 描述文件 package.json")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("name：包的名称，必须是唯一\ndescription：包的简要说明\nversion：符合语义化版本识别规范的版本字符串\nkeywords：关键字数据，通常用于搜索\nmaintainers：维护者数组，每个元素要包含name、email、web可选字段\ncontributors：贡献者数组，格式与maintainers相同。包的坐着应该是贡献者数据的第一个元素\nbugs：提交bug的地址，可以是网址或者电子邮件地址\nlicenses：许可证数组，每个元素要包含type和url字段\nrepositories：仓库托管地址数组，每个元素要包含type、url和path字段\ndependencies：包的依赖，一个关联数组，由包名称和版本号组成。\ndevDependencies：开发依赖项，表示一个包在开发期间用到的依赖项\n")])])]),s("h2",{attrs:{id:"npm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#npm","aria-hidden":"true"}},[e._v("#")]),e._v(" npm")]),e._v(" "),s("h3",{attrs:{id:"npm-的两层含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#npm-的两层含义","aria-hidden":"true"}},[e._v("#")]),e._v(" npm 的两层含义")]),e._v(" "),s("ol",[s("li",[e._v("NPM 是一个 第三方模块的托管网站，指的就是"),s("code",[e._v("https://www.npmjs.com/")]),e._v("；")]),e._v(" "),s("li",[e._v("NPM 是Node的包管理工具（全名叫做  Node package manager），在我们安装Node时候，就已经顺便也安装了 NPM 这个管理工具；")])]),e._v(" "),s("h3",{attrs:{id:"安装和卸载全局包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装和卸载全局包","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装和卸载全局包")]),e._v(" "),s("ol",[s("li",[e._v("什么是全局的包：通过  "),s("code",[e._v("npm install 包名 -g")]),e._v(" 方式安装的包，都安装到了全局；一般全局的安装目录是"),s("code",[e._v("C:\\Users\\自己的用户文件夹\\AppData\\Roaming\\npm")])]),e._v(" "),s("li",[s("strong",[e._v("如果拿到一个空项目，必须先初始化一个"),s("code",[e._v("package.json")]),e._v("的配置文件，"),s("code",[e._v("npm init")]),e._v("或者"),s("code",[e._v("npm init -y")])]),e._v("*")]),e._v(" "),s("li",[e._v("运行"),s("code",[e._v("npm i 包名 --save")]),e._v("去安装指定的包，本地安装的包，都安装到了"),s("code",[e._v("node_modules")]),e._v("的目录下")]),e._v(" "),s("li",[e._v("如果大家用的是npm 5.x的版本，可以不指定"),s("code",[e._v("--save")]),e._v("命令，如果用的是 npm 3.x 的版本，则需要手动指定 "),s("code",[e._v("--save")]),e._v(", 同时，"),s("code",[e._v("--save")]),e._v("有缩写形式，是："),s("code",[e._v("-S")])]),e._v(" "),s("li",[s("code",[e._v("package-lock.json")]),e._v("文件中记录了曾经装过的包的下载地址，方便下次直接下载包；")])]),e._v(" "),s("h3",{attrs:{id:"其它常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它常用命令","aria-hidden":"true"}},[e._v("#")]),e._v(" 其它常用命令")]),e._v(" "),s("ol",[s("li",[s("code",[e._v("--save-dev")]),e._v("它的缩写是"),s("code",[e._v("-D")])]),e._v(" "),s("li",[e._v("注意："),s("code",[e._v("dependencies")]),e._v("节点，表示项目上线部署时候需要的依赖项；"),s("code",[e._v("devDependencies")]),e._v("节点，表示项目在开发阶段需要的依赖项，但是"),s("strong",[e._v("当项目要部署上线了")]),e._v("，"),s("code",[e._v("devDependencies")]),e._v("节点中的包**，就不再需要了！**")]),e._v(" "),s("li",[e._v("注意：当使用"),s("code",[e._v("npm i")]),e._v("快速装包的时候，npm会检查"),s("code",[e._v("package.json")]),e._v("文件中，所有的依赖项，然后都为我们安装到项目中")]),e._v(" "),s("li",[s("code",[e._v("--production")]),e._v(" 表示只安装 "),s("code",[e._v("dependencies")]),e._v(" 节点下，记录的包，不安装"),s("code",[e._v("devDependencies")]),e._v("节点下的包；当项目要上线了，才会使用"),s("code",[e._v("--production")]),e._v("命令")])]),e._v(" "),s("h3",{attrs:{id:"解决-npm-下载慢问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决-npm-下载慢问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 解决 npm 下载慢问题")]),e._v(" "),s("ol",[s("li",[e._v("默认，NPM在下载包的时候，连接的是国外的服务器，所以，有时候如果网速不是特别好，可能下载不下来包；此时，大家可以安装一个工具，叫做"),s("code",[e._v("nrm")]),e._v("，里面记录了好多下载NPM包的服务器地址，可以让我们方便的切换下载包时候请求的服务器；")]),e._v(" "),s("li",[e._v("运行"),s("code",[e._v("npm i nrm -g")]),e._v("（注意：只要是工具，一般都是全局 -g 安装）")]),e._v(" "),s("li",[e._v("当装完 nrm 之后，可以运行"),s("code",[e._v("nrm ls")]),e._v(" 查看所有可用的服务器列表")]),e._v(" "),s("li",[e._v("可使用"),s("code",[e._v("nrm use 服务器名称")]),e._v("来切换下载包时候的服务器地址")])]),e._v(" "),s("p",[e._v("注意：还可以使用工具yarn来代替此工具，更快！")]),e._v(" "),s("ul",[s("li",[e._v("npm i yarn -v//和nrm作用一样，下载更快")]),e._v(" "),s("li",[e._v("yarn add '要安装的包'")]),e._v(" "),s("li",[e._v("或者 yarn install 安装全局")])]),e._v(" "),s("h2",{attrs:{id:"构建自己的web-server的服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建自己的web-server的服务器","aria-hidden":"true"}},[e._v("#")]),e._v(" 构建自己的web  Server的服务器")]),e._v(" "),s("ol",[s("li",[s("h4",{attrs:{id:"导入提供的核心模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导入提供的核心模块","aria-hidden":"true"}},[e._v("#")]),e._v(" 导入提供的核心模块")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const http = require("http")\n')])])])]),e._v(" "),s("li",[s("h4",{attrs:{id:"创建服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建服务器","aria-hidden":"true"}},[e._v("#")]),e._v(" 创建服务器")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const server = http.createServer();\n")])])])]),e._v(" "),s("li",[s("h4",{attrs:{id:"为服务器绑定响应事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为服务器绑定响应事件","aria-hidden":"true"}},[e._v("#")]),e._v(" 为服务器绑定响应事件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('server.on("request",function(req,res){\n    console.log("ok")\n    res.end("服务器返回数据")\n})\n')])])])]),e._v(" "),s("li",[s("h4",{attrs:{id:"启动服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动服务器","aria-hidden":"true"}},[e._v("#")]),e._v(" 启动服务器")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//4、启动服务器\n//端口号，ip地址(不写默认监听127.0.0.1),回调函数\nserver.listen(3000,function(){\n    console.log("通知服务器已经启动！")\n})\n')])])])])]),e._v(" "),s("h2",{attrs:{id:"理解-bs-交互模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解-bs-交互模型","aria-hidden":"true"}},[e._v("#")]),e._v(" 理解 BS 交互模型")]),e._v(" "),s("h3",{attrs:{id:"理解-bs-交互模型-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解-bs-交互模型-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 理解 BS 交互模型")]),e._v(" "),s("p",[e._v("B/S：表示  Browser / Server        C/S     Client / Server")]),e._v(" "),s("ol",[s("li",[e._v("什么是服务器：在网络节点中，专门对外提供资源服务的一台电脑；")]),e._v(" "),s("li",[e._v("什么是客户端：在网络节点中，专门用来消耗或呈现服务器中返回的数据的电脑；")]),e._v(" "),s("li",[e._v("什么是静态资源：像 .js ,  .css, .jpg,  .html   ；所谓的静态资源，就是无需数据交互，服务器直接把资源读取，并响应给客户端就完事儿；")]),e._v(" "),s("li",[e._v("什么是动态资源：当一些资源，服务器上并没有现成的，需要现在服务器端，做一层处理，最后把处理的结果返回给客户端，这样的资源，叫做动态资源；")]),e._v(" "),s("li",[e._v("HTTP 协议的通信模型："),s("code",[e._v("请求 - 处理 - 响应")]),e._v("的过程；")])]),e._v(" "),s("h3",{attrs:{id:"res和req对象（服务器所绑定的事件中使用）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#res和req对象（服务器所绑定的事件中使用）","aria-hidden":"true"}},[e._v("#")]),e._v(" res和req对象（服务器所绑定的事件中使用）")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("返回请求数据")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('res.end("服务器返回数据")\n')])])])]),e._v(" "),s("li",[s("p",[e._v("获取请求路径")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//拿到请求的url地址\nconsole.log(req.url)\n")])])])]),e._v(" "),s("li",[s("p",[e._v("获取请求方式")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//拿到请求类型那，toLowerCase转换成小写\nconsole.log(req.method)\n\n")])])])])]),e._v(" "),s("h3",{attrs:{id:"防止中文乱码（一般放在res-end之前）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防止中文乱码（一般放在res-end之前）","aria-hidden":"true"}},[e._v("#")]),e._v(" 防止中文乱码（一般放在res.end之前）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//参数1：数值类型状态码：200成功、300重定向404找不到，500aa类型错误\n//参数2：配置对象\nres.writeHeader(200,{\n    \'Content-Type\':"text/html;charset=utf-8"\n})//制定编码格式\nres.end("请求类型："+req.method + "；请求地址：" +req.url)\n\n')])])]),s("h3",{attrs:{id:"案例：引入静态资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例：引入静态资源","aria-hidden":"true"}},[e._v("#")]),e._v(" 案例：引入静态资源")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const http = require("http")\nconst server = http.createServer()\nconst file = require("fs")\nconst path = require("path")\nserver.on("request", (req, res) => {\n    const url = req.url\n    getHtml(res, url)\n})\nserver.listen(3000, function () {\n    console.log("http://127.0.0.1:3000")\n})\nfunction getHtml(res, url) {\n    // res.writeHead(200, {"Content-Type":"image/jpeg"});\n    file.readFile(path.join(__dirname, url), \'utf-8\', (err, data) => {\n        if (err) return res.end(\'404，您访问的页面未找到，炸了！！\')\n        if (url === \'/asset/image/hong.jpg\') {\n            res.writeHead(200, {"Content-Type":"image/jpeg"});//指定资源的编码格式\n            res.end(data)\n        } else {\n            res.end(data)\n        }\n    })\n}\n\n')])])]),s("h2",{attrs:{id:"结合模板引擎实现动态资源服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结合模板引擎实现动态资源服务器","aria-hidden":"true"}},[e._v("#")]),e._v(" 结合模板引擎实现动态资源服务器")]),e._v(" "),s("h3",{attrs:{id:"导入art-template第三方模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导入art-template第三方模块","aria-hidden":"true"}},[e._v("#")]),e._v(" 导入art -template第三方模块")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const template = require("art-template")\n\n')])])]),s("h3",{attrs:{id:"设置页面渲染数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置页面渲染数据","aria-hidden":"true"}},[e._v("#")]),e._v(" 设置页面渲染数据")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//设置页面渲染数据\n    const person = {\n        name:'熊大大',\n        age:21,\n        hobby:['吃饭','睡觉','敲代码']\n    }\n\n")])])]),s("h3",{attrs:{id:"生成模版字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成模版字符串","aria-hidden":"true"}},[e._v("#")]),e._v(" 生成模版字符串")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//参数1为模版文件绝对路径\nconst htmlStr = template(path.join(__dirname,'asset/index.html'),person)\nres.end(htmlStr)\n\n")])])]),s("h3",{attrs:{id:"页面渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#页面渲染","aria-hidden":"true"}},[e._v("#")]),e._v(" 页面渲染")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<ul>\n        <li>姓名：<%=name%></li>\n        <li>年龄：<%=age%></li>\n        <li>爱好：\n            <ul>\n                <li><%=hobby[0]%></li>\n                <li><%=hobby[1]%></li>\n                <li><%=hobby[2]%></li>\n            </ul>\n        </li>\n    </ul>\n\n")])])]),s("p",[e._v("完整案例：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const http = require(\"http\")\nconst path = require(\"path\")\n//导入art -template第三方模块\nconst template = require(\"art-template\")\nconst server = http.createServer()\nserver.on('request',(req,res)=>{\n    //设置页面渲染数据\n    const person = {\n        name:'熊大大',\n        age:21,\n        hobby:['吃饭','睡觉','敲代码']\n    }\n    //参数1为模版文件绝对路径\n    const htmlStr = template(path.join(__dirname,'asset/index.html'),person)\n    res.end(htmlStr)\n})\nserver.listen(3000,function(){\n    console.log(\"http://127.0.0.1:3000\")\n})\n\n")])])]),s("h2",{attrs:{id:"使用-nodemon-工具来自动重启web服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-nodemon-工具来自动重启web服务器","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用 "),s("code",[e._v("nodemon")]),e._v(" 工具来自动重启web服务器")]),e._v(" "),s("ul",[s("li",[e._v("这个工具的作用：能够实时监听 web 服务器中，代码的改变，只要代码被修改并保存了，则 nodemon 工具，会自动重新启动 web 服务器；")]),e._v(" "),s("li",[e._v("运行 "),s("code",[e._v("npm i nodemon -g")]),e._v(" 就能够在全局环境中，安装这个工具了")]),e._v(" "),s("li",[e._v("当安装完毕 "),s("code",[e._v("nodemon")]),e._v(" 之后，就可以 使用 "),s("code",[e._v("nodemon 要执行的js文件路径")]),e._v(" 来运行JS文件了")]),e._v(" "),s("li",[e._v("今后在开发Web项目的时候，推荐使用 nodemon 来执行 web 服务器")])]),e._v(" "),s("h2",{attrs:{id:"node-中的-web-快速开发框架-express"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-中的-web-快速开发框架-express","aria-hidden":"true"}},[e._v("#")]),e._v(" Node 中的 Web 快速开发框架 - Express")]),e._v(" "),s("h3",{attrs:{id:"定义什么是express："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义什么是express：","aria-hidden":"true"}},[e._v("#")]),e._v(" 定义什么是Express：")]),e._v(" "),s("ol",[s("li",[e._v("基于 Node.js 后端Javascript平台之上，开发出来的一套Web开发框架；")]),e._v(" "),s("li",[e._v("Express中，基于 原生Node的特性，做了进一步的封装，提供了一些更加好用的方法，来提高Web开发的体验；")]),e._v(" "),s("li",[e._v("Express中，并没有覆盖或者删除原生的http模块方法；")])]),e._v(" "),s("h3",{attrs:{id:"express-框架的安装和基本使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#express-框架的安装和基本使用","aria-hidden":"true"}},[e._v("#")]),e._v(" express 框架的安装和基本使用")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("直接运行 "),s("code",[e._v("npm install express --save")]),e._v(" 就可以安装Express框架了")])]),e._v(" "),s("li",[s("p",[e._v("导入模块")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const express = require('express')\n\n")])])])]),e._v(" "),s("li",[s("p",[e._v("创建服务器")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const app = express()\n\n")])])])]),e._v(" "),s("li",[s("p",[e._v("事件监听")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("app.get('/',function(req,res){\n    //这里是原生方法的api\n    // res.end('<h1>这是express中开启的服务器，查看是否会乱码（会）</h1>')\n    //express独有的，可以直接防止中文乱码问题\n    res.send('<h1>这是express中开启的服务器，查看是否乱码（会）</h1>')\n})\n\n")])])])]),e._v(" "),s("li",[s("p",[e._v("启动服务器")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("app.listen(4000,()=>{\n    console.log('express server running at http://127.0.0.1:4000')\n})\n\n")])])])])]),e._v(" "),s("h2",{attrs:{id:"服务器事件监听请求说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器事件监听请求说明","aria-hidden":"true"}},[e._v("#")]),e._v(" 服务器事件监听请求说明")]),e._v(" "),s("ul",[s("li",[e._v("app.get只监听get请求,app.post。。。")]),e._v(" "),s("li",[e._v("app.all表示监听所有类型请求")])]),e._v(" "),s("h2",{attrs:{id:"express独有的，直接防止中文乱码问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#express独有的，直接防止中文乱码问题","aria-hidden":"true"}},[e._v("#")]),e._v(" express独有的，直接防止中文乱码问题")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//这里是原生方法的api\n// res.end('<h1>这是express中开启的服务器，查看是否会乱码（会）</h1>')\n//express独有的，可以直接防止中文乱码问题\nres.send('<h1>这是express中开启的服务器，查看是否乱码（会）</h1>')\n\n")])])]),s("h2",{attrs:{id:"使用-express-快速托管静态资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-express-快速托管静态资源","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用 express 快速托管静态资源")]),e._v(" "),s("ol",[s("li",[e._v("如果我们网站中，有很多静态资源需要被外界访问，express 框架，为我们提供了一个 内置的（中间件）  "),s("code",[e._v("express.static('静态资源目录')")]),e._v("  ， 来快速托管指定目录下的"),s("strong",[e._v("所有静态资源文件；")])]),e._v(" "),s("li",[e._v("用法： "),s("code",[e._v("app.use(express.static('public'));")])])]),e._v(" "),s("ul",[s("li",[e._v("其中， "),s("code",[e._v("express.static")]),e._v(" 是一个express的内置中间件；")]),e._v(" "),s("li",[s("code",[e._v("app.use()")]),e._v("方法，是专门用来注册 中间件；")])]),e._v(" "),s("ol",[s("li",[e._v("当使用 第二步中的方法，把指定目录托管为静态资源目录之后，那么，这一层被托管的目录，不应该出现在 资源访问的 URL地址中；")]),e._v(" "),s("li",[e._v("在一个Web项目中，我们可以多次调用"),s("code",[e._v("app.use(express.static())")])]),e._v(" "),s("li",[e._v("在多次调用 express.static 的时候，如果文件名称有重复的，则以先注册的中间件为主！")]),e._v(" "),s("li",[e._v("如果项目要部署了，推荐大家配置一个叫做"),s("code",[e._v("compression")]),e._v("的中间件，它能够开启服务器的GZip压缩功能；")])]),e._v(" "),s("h3",{attrs:{id:"_1、先导入express框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、先导入express框架","aria-hidden":"true"}},[e._v("#")]),e._v(" 1、先导入express框架")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const express = require("express")\n\n')])])]),s("h3",{attrs:{id:"_2、托管静态资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、托管静态资源","aria-hidden":"true"}},[e._v("#")]),e._v(" 2、托管静态资源")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//快速托管静态资源文件，静态文件所在目录作为参数传递即可\napp.use(express.static('./view'));//asset下的页面文件都可访问了\napp.use(express.static('./asset'));//asset下的静态资源文件都可访问了\n\n")])])]),s("p",[e._v("注意：")]),e._v(" "),s("ol",[s("li",[e._v("启动服务器后：默认自动启动view目录下的index.html文件")]),e._v(" "),s("li",[e._v("index.html文件中，填写资源引用路径时就不用再写/asset路径：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(' <link rel="stylesheet" href="/css/index.css">\n <script src="/js/index.js"><\/script>\n\n')])])]),s("h2",{attrs:{id:"compression压缩功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compression压缩功能","aria-hidden":"true"}},[e._v("#")]),e._v(" compression压缩功能")]),e._v(" "),s("ul",[s("li",[e._v("帮助网页加载(项目部署阶段使用最佳)")])]),e._v(" "),s("h3",{attrs:{id:"安装（项目路径下）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装（项目路径下）","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装（项目路径下）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i compression\n\n")])])]),s("h3",{attrs:{id:"导入compression"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导入compression","aria-hidden":"true"}},[e._v("#")]),e._v(" 导入compression")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const compression = require('compression')\n\n")])])]),s("h3",{attrs:{id:"注册压缩资源中间件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注册压缩资源中间件","aria-hidden":"true"}},[e._v("#")]),e._v(" 注册压缩资源中间件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//注册压缩资源中间键\nserver.use(compression())\n\n")])])]),s("h2",{attrs:{id:"虚拟目录-推荐"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟目录-推荐","aria-hidden":"true"}},[e._v("#")]),e._v(" 虚拟目录 (推荐)")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const express = require('express')\nconst app = express()\napp.use(express.static('./view'))\n//访问资源时可以设置虚拟目录\napp.use('/asset',express.static('./asset'))\n//这样子文件中就可以通过/static/css/xxx.css的方式访问public下面的内容了\napp.listen(3000,()=>{\n    console.log('http://127.0.0.1:3000')\n})\n\n")])])]),s("h2",{attrs:{id:"为-express-框架配置ejs模板引擎渲染动态页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为-express-框架配置ejs模板引擎渲染动态页面","aria-hidden":"true"}},[e._v("#")]),e._v(" 为 express 框架配置ejs模板引擎渲染动态页面")]),e._v(" "),s("ul",[s("li",[e._v("安装 ejs 模板引擎"),s("code",[e._v("npm i ejs -S")])]),e._v(" "),s("li",[e._v("使用 app.set() 配置默认的模板引擎 "),s("code",[e._v("app.set('view engine', 'ejs')")])]),e._v(" "),s("li",[e._v("使用 app.set() 配置默认模板页面的存放路径 "),s("code",[e._v("app.set('views', './views')")])]),e._v(" "),s("li",[e._v("使用 res.render() 来渲染模板页面"),s("code",[e._v("res.render('index.ejs', { 要渲染的数据对象 })")]),e._v("，注意，模板页面的 后缀名，可以省略不写！")])]),e._v(" "),s("h3",{attrs:{id:"注意res-render"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意res-render","aria-hidden":"true"}},[e._v("#")]),e._v(" 注意res.render")]),e._v(" "),s("p",[s("code",[e._v("res.render('index.ejs', { 要渲染的数据对象 })")]),e._v("，模板页面的 后缀名（ejs），可以省略不写！")]),e._v(" "),s("h3",{attrs:{id:"案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例","aria-hidden":"true"}},[e._v("#")]),e._v(" 案例")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const express = require('express')\nconst path = require('path')\nconst app = express()\n// 配置模版引擎1步，（express更加适配）\n// 使用 app.set() 配置默认的模板引擎\napp.set('view engine','ejs')\n\n// 配置模版引擎2步\n// 配置默认模版存放路径\n// 注意：默认情况下，无法直接使用，因为express并没有默认为我们提供默认模版引擎\n// 所以再调用之前，先认为指定使用哪个模版引擎渲染页面\n// 参数1：固定写法，参数2：模版页面存放路径\napp.set('views','./view')\n\nconst person = \n    {\n        name:'瑞东',\n        age:'21',\n        wife:'西田麻衣',\n        hobby:['吃饭','旅游','嘿嘿嘿']\n    }\n\napp.get('/',(req,res)=>{\n    //配置模版引擎3步\n   // sendFile()只能渲染静态页面\n    // //express独有的；参数1：要渲染的页面,参数2：要渲染的数据对象 \n    // res.render();//渲染动态页面\n    res.render('index.ejs',person)\n})\n\napp.listen(3100,()=>{\n    console.log('http://127.0.0.1:3100')\n})\n\n")])])]),s("h2",{attrs:{id:"使用-express-框架中提供的路由来分发请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-express-框架中提供的路由来分发请求","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用 express 框架中提供的路由来分发请求")]),e._v(" "),s("ol",[s("li",[e._v("什么叫做路由：前端请求的URL地址，都要对应一个后端的处理函数，那么 这种URL地址到 处理函数之间的对应关系，就叫做后端路由；")]),e._v(" "),s("li",[e._v("在Express中，路由主要负责 分发请求处理的；")])]),e._v(" "),s("h3",{attrs:{id:"定义路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义路由","aria-hidden":"true"}},[e._v("#")]),e._v(" 定义路由")]),e._v(" "),s("ul",[s("li",[e._v("创建03.roter.js'文件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//导入框架\nconst express= require(\"express\")\n//创建一个路由对象\nconst router = express.Router()\nconst personhu = {\n    name:'胡歌',\n    age:'21',\n    wife:'刘亦菲',\n    hobby:['吃饭','旅游','嘿嘿嘿']\n}\n//发起不同的路由请求\nrouter.get('/',(req,res)=>{\n    res.render('rotezhang.ejs',personhu)\n})\nrouter.get('/routhu',(req,res)=>{\n    res.render('routhu.ejs',personhu)\n})\nrouter.get('/routliu',(req,res)=>{\n    res.render('routliu.ejs',personhu)\n})\n//导出路由对象\nmodule.exports = router;//暴露路由对象\n\n")])])]),s("h3",{attrs:{id:"使用自己的路由模块渲染页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用自己的路由模块渲染页面","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用自己的路由模块渲染页面")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const express = require('express')\nconst app = express()\n//托管静态资源\napp.set('view engine','ejs')\napp.set('views','./view')\n// 导入自己的路由模块\nconst router = require('./03.roter.js')\n//再将路由对象注册在app服务器中\napp.use(router)\napp.listen(3000,()=>{\n    console.log(\"http://127.0.0.1:3000\")\n})\n\n")])])]),s("h2",{attrs:{id:"中间件-在express-框架里的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间件-在express-框架里的概念","aria-hidden":"true"}},[e._v("#")]),e._v(" 中间件 在Express 框架里的概念")]),e._v(" "),s("p",[e._v("​\t中间件是一个可访问请求对象（"),s("code",[e._v("req")]),e._v("）和响应对象（"),s("code",[e._v("res")]),e._v("）的函数，在 Express 应用的请求-响应循环里，下一个内联的中间件通常用变量 "),s("code",[e._v("next")]),e._v(" 表示。中间件的功能包括：")]),e._v(" "),s("ol",[s("li",[e._v("中间件是一个函数，路由处理函数")]),e._v(" "),s("li",[e._v("有一个形参：next：是一个函数")]),e._v(" "),s("li",[e._v("在中间件中可以调用这个函数")]),e._v(" "),s("li",[e._v("中间件的表现：函数中的形参列表中只要有next函数就是中间件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function myMiddleWare(req,res,next){\n}\n\n")])])]),s("h3",{attrs:{id:"作用："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用：","aria-hidden":"true"}},[e._v("#")]),e._v(" 作用：")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("表示每一个处理环节")])]),e._v(" "),s("li",[s("p",[e._v("这些处理环节之间只负责单独的处理")])]),e._v(" "),s("li",[s("p",[e._v("每当上一个中间件处理完以后，都交给下一个中间件继续处理")])]),e._v(" "),s("li",[s("p",[e._v("中间件之间共享的是req和res这两个对象")])]),e._v(" "),s("li",[s("p",[e._v("在中间件这个函数的参数列表中，有个next函数，这个next函数，只要一")]),e._v(" "),s("p",[e._v("被调用，就会进入到下一个中间件的处理环节")])])]),e._v(" "),s("h3",{attrs:{id:"案例："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例：","aria-hidden":"true"}},[e._v("#")]),e._v(" 案例：")]),e._v(" "),s("ul",[s("li",[e._v("日记记录需求：")]),e._v(" "),s("li",[e._v("每当有客户端来请求服务器，都要记录下这个请求的时间、")]),e._v(" "),s("li",[e._v("url地址、以及请求的方式。")]),e._v(" "),s("li",[e._v("格式：2012-12-12  12:12:12  GET/api/postinfo")])]),e._v(" "),s("p",[e._v("分析：")]),e._v(" "),s("ul",[s("li",[e._v("每次处理的函数中写入一个info.txt文件即可")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//所以服务器启动之后：\n//事件绑定get事件(可以把它封装起来)\napp.get('/',(req,res)=>{\n\t//调用记录日志方法\n    recordLog(req,res)\n})\n\n// 封装记录日志方法\nfunction recordLog(req,res){\n    const infoStr = `${new Date().toLocaleString()} ${req.method} ${req.url}\\n`\n    //fs.writeFile：会覆盖；使用fs.appendFile()追加\n    file.appendFile(path.join(__dirname,'login/info.txt'),infoStr,err=>{\n        if(err) return console.log('记录日志失败')\n        console.log('记录日志成功')\n    })\n}  \n\n")])])]),s("p",[e._v("通过中间件函数的方式实现上述功能：")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("创建一个中间件函数")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//定义一个写入日志的中间件\nfunction myMiddleWareWriteLogs(req,res,next){\n    // 设置信息的字符串\n    const infoStr = `${new Date().toLocaleString()} ${req.method} ${req.url}\\n`\n    file.appendFile(path.join(__dirname,'login/info.txt'),infoStr,err=>{\n        if(err) return console.log('记录日志失败')\n        console.log('记录日志成功')\n\t    //当记录完毕后，自动进入下一个\n\t    next();\n    })\n}\n\n")])])])]),e._v(" "),s("li",[s("p",[e._v("引入这个中间件函数")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//引入中间件函数\napp.use(myMiddleWareWriteLogs)\n\n")])])]),s("p",[e._v("结论：这样不用每次请求都要调用记录日志方法，只要发起请求就会触发中间件函数")])])]),e._v(" "),s("h2",{attrs:{id:"如何在路由中拿到post提交过来的表单数据？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何在路由中拿到post提交过来的表单数据？","aria-hidden":"true"}},[e._v("#")]),e._v(" 如何在路由中拿到post提交过来的表单数据？")]),e._v(" "),s("ul",[s("li",[e._v("express并没有这种功能")])]),e._v(" "),s("h3",{attrs:{id:"关键思路："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键思路：","aria-hidden":"true"}},[e._v("#")]),e._v(" 关键思路：")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("每当req的data事件被促发时")]),e._v("，就表示有表单数据过来")]),e._v(" "),s("li",[e._v("chunk:片、块是buffer二进制类型")]),e._v(" "),s("li",[e._v("data有可能被促发多次，每次拿到一小块chunk就必须拼接一下")])]),e._v(" "),s("h3",{attrs:{id:"自定义模拟解析表单数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义模拟解析表单数据","aria-hidden":"true"}},[e._v("#")]),e._v(" 自定义模拟解析表单数据")]),e._v(" "),s("p",[e._v("先创建并启动服务器")]),e._v(" "),s("p",[e._v("再创建并引入中间件函数")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const express = require('express')\nconst file = require('fs')\nconst path = require('path')\n//创建服务器\nconst app = express()\n//引入中间块函数\napp.use(myMiddleWareWriteLogs)\n//引入路由\nconst router = require('./06.router.js')\napp.use(router)\n//启动服务器\napp.listen(3001,()=>{\n    console.log(\"http://127.0.0.1:3001\")\n})\nfunction myMiddleWareWriteLogs(req,res,next){\n    const infoStr = `模拟表单解析时间:${new Date().toLocaleString()}； 请求方式：${req.method}； 请求地址：${req.url}\\n`\n    file.appendFile(path.join(__dirname,'login/info.txt'),infoStr,err=>{\n        if(err) return console.log('记录日志失败!')\n        console.log('记录日志成功!')\n        next()//别忘了\n    })\n}\nmodule.exports = myMiddleWareWriteLogs\n\n")])])]),s("p",[e._v("引入并启动路由模块（每次请求交给路由模块处理）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const express = require('express')\n//引入解析链接参数方法,查询字符串\nconst querystring = require('querystring');\nconst router = express.Router() //创建路由\nrouter.get('/',(req,res)=>{\n    res.send(\"<h1>这是首页</h1>\")\n})\nrouter.get('/movie.html',(req,res)=>{\n    res.send(\"<h1>这是电影页</h1>\")\n})\nrouter.post('/about.html',(req,res)=>{\n    // 每当req的data事件被促发时，就表示有表单数据过来\n    // chunk:片、块是buffer二进制类型\n    // data有可能被促发多次，每次拿到一小块chunk就必须拼接一下\n    let dataStr='';\n        req.on('data',(chunk)=>{\n        dataStr+=chunk\n    })\n    req.on('end',()=>{\n        // console.log(dataStr)\n        //解析成对象,node提供了方法\n        //参数1：必填，参数二：界定键值对符号，默认’&‘，参数三，默认’=’\n        const result = querystring.parse(dataStr)\n        console.log(result)\n        res.send(\"<h1>这是使用post请求服务器数据</h1>\"+JSON.stringify(result))\n    })\n})\nmodule.exports = router\n\n\n")])])]),s("p",[e._v("关键点：")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("req的data事件")]),e._v(" "),s("p",[e._v("每当req的data事件被促发时，就表示有表单数据过来")])]),e._v(" "),s("li",[s("p",[e._v("引入解析链接参数方法,查询字符串")]),e._v(" "),s("p",[e._v("解析成对象")])])]),e._v(" "),s("h3",{attrs:{id:"第三方中间件解析表单数据方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三方中间件解析表单数据方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 第三方中间件解析表单数据方法")]),e._v(" "),s("ul",[s("li",[e._v("运行 npm i body-parse -S 安装解析表单数据的")]),e._v(" "),s("li",[e._v("导入中间件：const bodyParser = require('body-parser')")]),e._v(" "),s("li",[e._v("注册中间件,解析普通键值对数据，false表示不使用扩展模块解析表单数据而使用node内置的querystring模块来解析表单数据：pp.use(bodyParser.urlencoded({extended:false}))")])]),e._v(" "),s("p",[e._v("自己写的中间件：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const querystring = require('querystring')\n\nfunction parseForm(req,res,next){\n    let dataStr='';\n    //当表单有数据提交时才触发此事件\n    req.on('data',(chunk)=>{\n        dataStr += chunk\n    })\n    //数据接收完毕\n    req.on('end',()=>{\n        //如何将result传递给下一个函数呢？\n        const result = querystring.parse(dataStr)\n        req.body = result\n        next()//接入下一函数\n    })\n}\n//以模块化的形式将parseForm方法暴露出去\nmodule.exports = parseForm\n\n\n调用方法：\n// 导入记录自己解析表单日志的中间件\n// const parseForm = require('./07parseFrom.js')\n// //注册解析表单中间键\n// app.use(parseForm)\n\n")])])]),s("p",[e._v("第三方中间件（使用）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 导入第三方中间块\nconst bodyParser = require('body-parser')\n// 3、注册中间件,解析普通键值对数据，false表示不使用扩展模块解析表单数据\n// 而使用node内置的querystring模块来解析表单数据\napp.use(bodyParser.urlencoded({extended:false}))\n\n")])])]),s("h3",{attrs:{id:"路由一定要写在中间件之后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由一定要写在中间件之后","aria-hidden":"true"}},[e._v("#")]),e._v(" 路由一定要写在中间件之后")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//引入路由,路由一定要要写在中间件之后\nconst router = require('./07.router.js')\napp.use(router)\n\n")])])]),s("h3",{attrs:{id:"中间件的五种分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间件的五种分类","aria-hidden":"true"}},[e._v("#")]),e._v(" 中间件的五种分类")]),e._v(" "),s("ol",[s("li",[e._v("应用级：绑定挂载到app对象上的中间件（函数）")]),e._v(" "),s("li",[e._v("路由级：绑定到Router上")]),e._v(" "),s("li",[e._v("错误处理：(err,req,res,next)有四个形参的函数")]),e._v(" "),s("li",[e._v("内置中间件：express.static是唯一的内置中间件")]),e._v(" "),s("li",[e._v("第三方中间件：通过npm安装的中间件")])]),e._v(" "),s("h2",{attrs:{id:"模块加载机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块加载机制","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块加载机制")]),e._v(" "),s("ol",[s("li",[e._v("只要使用require来加载指定模块必然会加载模块中代码")]),e._v(" "),s("li",[e._v("只要加载过的代码，会默认缓存，下次执行会优先从缓存中加载，提高模块运行效率")])]),e._v(" "),s("h3",{attrs:{id:"核心模块加载机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心模块加载机制","aria-hidden":"true"}},[e._v("#")]),e._v(" 核心模块加载机制")]),e._v(" "),s("ol",[s("li",[e._v("先从缓存中查找，如果有，则直接使用")]),e._v(" "),s("li",[e._v("如果缓存中没有，则根据路径标识符，加载本地用户模块并缓存起来，供下次使用")])]),e._v(" "),s("h3",{attrs:{id:"第三方模块加载机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三方模块加载机制","aria-hidden":"true"}},[e._v("#")]),e._v(" 第三方模块加载机制")]),e._v(" "),s("ol",[s("li",[e._v("先从缓存中查找，如果有，则直接使用")]),e._v(" "),s("li",[e._v("如果缓存中没有，则根据第三方模块的路径标识符，加载第三方模块并缓存起来，供下次使用")])]),e._v(" "),s("h3",{attrs:{id:"在加载用户模块查找规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在加载用户模块查找规则","aria-hidden":"true"}},[e._v("#")]),e._v(" 在加载用户模块查找规则")]),e._v(" "),s("ol",[s("li",[e._v("如果没有指定用户后缀名，严格按照指定名称进行查找")]),e._v(" "),s("li",[e._v("index -> index.js -> index.json(定义常量接收) -> index.node（报错：不是win32）")])]),e._v(" "),s("h2",{attrs:{id:"第三方模块-moment-获取当前日期模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三方模块-moment-获取当前日期模块","aria-hidden":"true"}},[e._v("#")]),e._v(" 第三方模块(moment)  获取当前日期模块")]),e._v(" "),s("ul",[s("li",[e._v("npm i moment，项目路径下安装")]),e._v(" "),s("li",[e._v("这个函数能不能叫一个包？是，有标准的包结构")])]),e._v(" "),s("h2",{attrs:{id:"模块查找规则："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块查找规则：","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块查找规则：")]),e._v(" "),s("ul",[s("li",[e._v("1、根据包名称，直接在项目更目录中，去查找一个叫做“node_modules”的文件夹")]),e._v(" "),s("li",[e._v("2、如果有，则在该文件夹中，继续查找，一个叫做模块引用的文件夹")]),e._v(" "),s("li",[e._v("3、如果有，则在对应文件夹中查找'package.json'的文件")]),e._v(" "),s("li",[e._v("4、如果有该文件，则查找其中main属性并尝试加载main指定的文件作为入口、")]),e._v(" "),s("li",[e._v("5、能正常加载main指定文件则加载成功")]),e._v(" "),s("li",[e._v("6、如果在packge.json文件中没有main属性，则尝试依次加载根目录中的index.js,index.json,inde.node文件")]),e._v(" "),s("li",[e._v("7、如果在包的根目录中，根本没有packge.json文件，或者在“node_modules”中没有index相关文件,或者根本没有对应文件夹，或者在项目根目录中根本无node_modules则会向上一层去查找node_modules，查找规则同上")]),e._v(" "),s("li",[e._v("8、如果上一层目录中还是没有对应模块，则继续上找直到找到项目所在的磁盘根目录中还没找到就报错")])]),e._v(" "),s("h1",{attrs:{id:"node中使用mysql数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node中使用mysql数据库","aria-hidden":"true"}},[e._v("#")]),e._v(" node中使用mysql数据库")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("安装mysql模块: nom i mysql -S")])]),e._v(" "),s("li",[s("p",[e._v("导入模块：const mysql = require('maysql')")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//导入数据库模块\nconst mysql = require('mysql')\n\n")])])])]),e._v(" "),s("li",[s("p",[e._v("创建连接对象")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 创建数据库连接对象\nconst conn = mysql.createConnection({\n    host:'127.0.0.1',\n    user:'root',\n    password:'root',\n    database:'myuser'\n})\n\n")])])])]),e._v(" "),s("li",[s("p",[e._v("调用connect()连接上数据库的服务器")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//连接数据库，可不写\nconn.connect()\n\n")])])])]),e._v(" "),s("li",[s("p",[e._v("调用conn.query()方法来执行指定的SQL语句")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//执行查询语句\nconst sqlStr='select * from info'\nconn.query(sqlStr,(err,result)=>{\n    console.log(err)\n    console.log(result)\n})\n\n")])])]),s("p",[e._v("[art-template 官方文档](https://aui.github.io/art-template/zh-cn/docs/index.html")])])]),e._v(" "),s("h2",{attrs:{id:"ceud操作：增删改查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ceud操作：增删改查","aria-hidden":"true"}},[e._v("#")]),e._v(" CEUD操作：增删改查")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const sqlStr="insert into info set ?"  //增\nconst sqlStr="delete from info  where id = 1"  //删\nconst sqlStr="update info set name=\'沈阳\' where id = 0"  //改\n\n')])])]),s("p",[e._v("在执行语句时，对于后接的参数，可以用问号代替")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const sqlStr="insert into stu_info set ?"\n将参数数据写在 query() 方法中\nconn.query(sqlStr,数据对象,(err,result)=>{\n    console.log(err)\n    console.log(result)\n})\n\n')])])]),s("p",[e._v("注意：企业级项目开发，不建议使用delete删除数据，\n可以通过添加isdel字段属性来标识数据是否删除（软删除）")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("例如：updated users set isdel = 1 where id = 2\n\n")])])]),s("h1",{attrs:{id:"express中获取参数的几种形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#express中获取参数的几种形式","aria-hidden":"true"}},[e._v("#")]),e._v(" express中获取参数的几种形式")]),e._v(" "),s("h2",{attrs:{id:"从url地址中获取查询参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从url地址中获取查询参数","aria-hidden":"true"}},[e._v("#")]),e._v(" 从URL地址中获取查询参数")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("app.get(\"/index.html\",(req,res)=>{\n    res.send('ok')\n    console.log(req.query)\n})\n//浏览器输入\nhttp://127.0.0.1:3000/index.html?id=1\n\n")])])]),s("h2",{attrs:{id:"从url地址路径中获取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从url地址路径中获取","aria-hidden":"true"}},[e._v("#")]),e._v(" 从URL地址路径中获取")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('app.get("/userinfo/:id/:name",(req,res)=>{\n    console.log(req.params)\n})\n//浏览器输入\nhttp://127.0.0.1:3000/userinfo/1/熊刚\n\n')])])]),s("h2",{attrs:{id:"从post表单中获取提交的数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从post表单中获取提交的数据","aria-hidden":"true"}},[e._v("#")]),e._v(" 从post表单中获取提交的数据")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//先引入第三方中间件\nconst bodyParse = require('body-parser')\napp.use(bodyParse.urlencoded({extended:false}))\n//无法请求\napp.get(\"/index.html\",(req,res)=>{\n    console.log(req.query)\n})\n浏览器输入：http://127.0.0.1:3000/index.html?id=2&name=熊刚\n\n")])])]),s("h1",{attrs:{id:"企业两种开发模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#企业两种开发模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 企业两种开发模式")]),e._v(" "),s("h2",{attrs:{id:"混合模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#混合模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 混合模式")]),e._v(" "),s("ul",[s("li",[e._v("前端只需要美化样式，写js特效")])]),e._v(" "),s("h2",{attrs:{id:"前后端分离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前后端分离","aria-hidden":"true"}},[e._v("#")]),e._v(" 前后端分离")]),e._v(" "),s("ul",[s("li",[e._v("后端负责操作数据库，给前端暴露接口，渲染页面，前端就可以使用一些流行的框架：如vue,react,angluar")])]),e._v(" "),s("h2",{attrs:{id:"跨域问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 跨域问题")]),e._v(" "),s("ul",[s("li",[e._v("如果不考虑 表单的 Post 提交，则 可以使用 JSONP的形式来请求接口")]),e._v(" "),s("li",[e._v("但是，我们的项目中，涉及到了 英雄表单的 提交，表单提交一般都是Post")]),e._v(" "),s("li",[e._v("经过分析，由于JSONP，不支持Post，所以，我们的后端接口，无法设计成JSONP的接口；")])]),e._v(" "),s("h2",{attrs:{id:"jsonp-和-cors-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsonp-和-cors-的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" JSONP 和 CORS 的区别")]),e._v(" "),s("p",[e._v("1、JSONP的原理：动态创建script标签；")]),e._v(" "),s("ul",[s("li",[e._v("JSONP发送的不是Ajax请求")]),e._v(" "),s("li",[e._v("不支持 Post 请求；")])]),e._v(" "),s("p",[e._v("2.CORS中文意思是"),s("code",[e._v("跨域资源共享")]),e._v(" , 本质，就是使用 XHR 对象，发送Ajax请求，来进行跨域的资源共享；")]),e._v(" "),s("ul",[s("li",[e._v("CORS 发送的是真正的Ajax请求")]),e._v(" "),s("li",[e._v("CORS 支持Ajax的跨域")]),e._v(" "),s("li",[e._v("如果要启用 CORS 跨域资源共享，关键在于 服务器端，只要 服务器支持CORS跨域资源共享，则 浏览器肯定能够正常访问 这种 CORS 接口；而且，客户端在 发送 Ajax的时候，就像发送普通AJax一样，没有任何代码上的变化；")])]),e._v(" "),s("p",[e._v("3、对于Node来说，如果想要开启 CORS 跨域通信，只需要安装"),s("code",[e._v("cors")]),e._v("的模块即可；jax的时候，就像发送普通AJax一样，没有任何代码上的变化；")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i cors -S\n// 导入CORS模块\nconst cors = require('cors')\n// 开启客户端跨域服务\napp.use(cors())\n\n")])])]),s("h2",{attrs:{id:"英雄接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#英雄接口","aria-hidden":"true"}},[e._v("#")]),e._v(" 英雄接口")]),e._v(" "),s("h3",{attrs:{id:"准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备工作","aria-hidden":"true"}},[e._v("#")]),e._v(" 准备工作")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm init -y初始化项目\nnpm i express -S\nnpm i mysql -S\n\n")])])]),s("p",[e._v("1、server文件夹:服务器文件")]),e._v(" "),s("ul",[s("li",[e._v("server.js服务器端入口文件")])]),e._v(" "),s("p",[e._v("2、web文件夹：页面代码")]),e._v(" "),s("ul",[s("li",[e._v("web.js页面入口文件")])]),e._v(" "),s("h4",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//views文件夹-》index.html安装模版引擎\nnpm i art-template -S\n//安装bootstrap美化\nnpm i bootstrap@3 -S\n\n\n")])])]),s("h3",{attrs:{id:"知识点："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识点：","aria-hidden":"true"}},[e._v("#")]),e._v(" 知识点：")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("res.json();自动把对象转换为json字符串")])]),e._v(" "),s("li",[s("p",[e._v("e.preventDefault();阻止表单默认提交")])]),e._v(" "),s("li",[s("p",[e._v('location.href="/"   //跳转回首页')])]),e._v(" "),s("li",[s("p",[e._v('$("form").serialize()//表单中所有数据，并序列化一下')]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('$.ajax({\n      url:"http://127.0.0.1:5000/api/addhero",\n      data:$("form").serialize(),\n      type:"post",\n      dataType:"json",\n      success:function(result){\n         console.log(result);\n      }\n})\n\n')])])]),s("p",[e._v("​")])])]),e._v(" "),s("h3",{attrs:{id:"思路："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路：","aria-hidden":"true"}},[e._v("#")]),e._v(" 思路：")]),e._v(" "),s("ul",[s("li",[e._v("1、创建一个最基本express服务器，作用：不提供web服务。")]),e._v(" "),s("li",[e._v("而是提供一个数据接口接口服务；")]),e._v(" "),s("li",[e._v("2、安装cors模块，从而启用跨域资源共享；")]),e._v(" "),s("li",[e._v("3、安装mysql模块来操作数据库；")]),e._v(" "),s("li",[e._v("4、根据api设计文档来创建对应接口，在接口api中，如果返回json")]),e._v(" "),s("li",[e._v("数据，使用res.json()")]),e._v(" "),s("li",[e._v("5、再设计更新英雄时安装body-parser中间件，来解析表单数据")])]),e._v(" "),s("h3",{attrs:{id:"如何拿到get提交过来数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何拿到get提交过来数据","aria-hidden":"true"}},[e._v("#")]),e._v(" 如何拿到get提交过来数据")]),e._v(" "),s("ul",[s("li",[e._v("const id = req.query.id")])]),e._v(" "),s("h3",{attrs:{id:"第三方模块也可以发送ajax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三方模块也可以发送ajax","aria-hidden":"true"}},[e._v("#")]),e._v(" 第三方模块也可以发送ajax")]),e._v(" "),s("ul",[s("li",[e._v("axios专门发送ajax的")]),e._v(" "),s("li",[e._v("前后端都可以使用，")]),e._v(" "),s("li",[e._v("基于promis封装的")])]),e._v(" "),s("p",[e._v("安装，将资源托管到页面")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//导入所有功能资源：jquery，axios等\napp.use('/node_modules',express.static(\"../node_modules\"))\n\n")])])]),s("p",[e._v("再引用")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<script src="/node_modules/jquery/dist/jquery.min.js"><\/script>\n<script src="/node_modules/axios/dist/axios.min.js"><\/script>\n\n')])])]),s("p",[e._v("发送ajax的时候可以使用：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(' // $("form").serialize()//表单中所有数据，并序列化一下\n                // name=李白&gender=男=》格式\n                axios.post("http://127.0.0.1:5000/api/addhero",$("form").serialize())\n                .then(function(result){\n                if(result.status == 200 && result.data.err_code === 0) {\n                    location.href="/";\n                } else {\n                    alert(\'添加失败！\');\n                }\n                })\n\n')])])]),s("h2",{attrs:{id:"文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文章","aria-hidden":"true"}},[e._v("#")]),e._v(" 文章")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("跨域资源共享 CORS 详解"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/expressjs/cors",target:"_blank",rel:"noopener noreferrer"}},[e._v("cors模块解决Node跨域资源共享问题"),s("OutboundLink")],1)])]),e._v(" "),s("h1",{attrs:{id:"mvc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mvc","aria-hidden":"true"}},[e._v("#")]),e._v(" MVC")]),e._v(" "),s("ol",[s("li",[e._v("M:数据操作层(例如:model.js);")]),e._v(" "),s("li",[e._v("C:业务逻辑操作层（例如：router.js和controller;")]),e._v(" "),s("li",[e._v("V:views视图层，页面")])]),e._v(" "),s("h2",{attrs:{id:"作用：-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用：-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 作用：")]),e._v(" "),s("ul",[s("li",[e._v("能够保证每个模块只能单一，提高项目的维护和开发性；")]),e._v(" "),s("li",[e._v("注意：MVC是后端分层开发思想，所以，MVC是整个项目的角度，去分析统筹前端页面，")]),e._v(" "),s("li",[e._v("与后端业务逻辑，后端数据操作之间的关系；")]),e._v(" "),s("li",[e._v("注意：VUE，使用了MVVM的开发思想，只关注前端视图层，只是把每个前端页面")]),e._v(" "),s("li",[e._v("分成三层，分别是M 、 V 、 VM")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("M：保存页面单独数据 \nV：每个页面的html结构\nVM：调度者，分隔了M和V。每当V层想要获取后保存数据的时候，需要vm做中间处理\n\n")])])])])},[],!1,null,null,null);a.default=r.exports}}]);