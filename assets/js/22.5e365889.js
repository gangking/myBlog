(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{197:function(t,e,n){"use strict";n.r(e);var a=n(0),r=Object(a.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"react基础（我认为）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react基础（我认为）","aria-hidden":"true"}},[t._v("#")]),t._v(" React基础（我认为）")]),t._v(" "),n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),n("p",[t._v("来自Facebook，2013年诞生。")]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("和Angular不同，React并不是一个完整的MVC/MVVM框架，它只专注于提供清晰、直接的View视图层解决方案")]),t._v("。它的功能全部以构建组件视图为核心，并提供类似控制器的函数接口和生命周期函数。在React中没有控制器、没有服务、没有指令、没有过滤器等等。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("React非常轻")]),t._v("，目标是Minimal API interface（最小化API接口），只提供组件化相关的非常少量的API。"),n("strong",[t._v("简化了一切可以简化的东西")]),t._v("。比如说Angular中做一个组件，实际上叫做E级别的指令，要写scope、link函数，但是React最大限度的简化了一个组件的开发。事实上React就是为了组件开发而诞生的。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("React可以搭配Flux等架构（Redux实现）使用")]),t._v("。有Flux架构护航，数据的单向流动，自称是比MVC、MVVM更高级的一种模式。可以开发大型应用的。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("React使用Virtual DOM技术")]),t._v("，使得它性能卓越，开销很小。")])])]),t._v(" "),n("h2",{attrs:{id:"virtual-dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom","aria-hidden":"true"}},[t._v("#")]),t._v(" Virtual DOM")]),t._v(" "),n("p",[t._v("​\tVirtual DOM是React中的一个很重要的概念，在日常开发中，前端工程师们需要将后台的数据呈现到界面中，同时要能对用户的操作提供反馈，作用到UI上…… 这些都离不开DOM操作。但是我们知道，"),n("strong",[t._v("频繁的DOM操作会造成极大的资源浪费，也通常是性能瓶颈的原因。于是React 引入了Virtual DOM。Virtual DOM的核心就是")]),t._v("*计算比较改变前后的DOM区别，然后用最少的DOM操作语句对DOM进行操作。")]),t._v(" "),n("p",[t._v("​\t比如说要进行这样的DOM转换：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/VirtualDOM01.png",alt:""}})]),t._v(" "),n("p",[t._v("不用Virtual DOM技术：删除4个li，插入5个li。")]),t._v(" "),n("p",[t._v("使用Virtual DOM技术：通过计算，我们只需要改变4个li的innerHTML，并且插入一个li即可。")]),t._v(" "),n("h3",{attrs:{id:"diff算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#diff算法","aria-hidden":"true"}},[t._v("#")]),t._v(" DIFF算法")]),t._v(" "),n("p",[t._v("Virtual DOM技术使用了DIFF算法，DIFF算法是一个比较计算层次结构区别的算法，现在主要用来计算DOM之间的差异。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/VirtualDOM02.png",alt:"用DIFF算法可以计算两个JSON结构之间的差别"}})]),t._v(" "),n("p",[t._v("用DIFF算法可以计算两个JSON结构之间的差别。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/VirtualDOM03.png",alt:""}})]),t._v(" "),n("p",[t._v("现在DIFF算法为Virtual DOM技术服务，用来比较DOM结构的差异：")]),t._v(" "),n("p",[t._v("如果不使用Virtual DOM技术，此时要删除3个节点，插入3个节点。使用Virtual DOM技术仅仅需要移动节点即可。")]),t._v(" "),n("h3",{attrs:{id:"jsx语法糖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsx语法糖","aria-hidden":"true"}},[t._v("#")]),t._v(" JSX语法糖")]),t._v(" "),n("p",[n("strong",[t._v("React中使用JSX语法糖")]),t._v("，JSX = JavaScript + XML。js文件中写HTML模板，代码语境不需要来回切换的。也就是说，在Angular中模板写在.html文件中。React中使用.js文件来当做HTML模板，语境是统一的，非常清晰简明。jsx语法比``运算符还要简单，是最优雅的将HTML和JS结合的方案。")]),t._v(" "),n("p",[t._v("官网文档：http://reactjs.cn/react/index.html")]),t._v(" "),n("p",[t._v("菜鸟教程的文档不错：http://www.runoob.com/react/react-tutorial.html\n中文翻译的手册：http://www.css88.com/react/docs/why-react.html")]),t._v(" "),n("h2",{attrs:{id:"react配置和hello-world"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react配置和hello-world","aria-hidden":"true"}},[t._v("#")]),t._v(" React配置和Hello World")]),t._v(" "),n("h3",{attrs:{id:"react配置（webpack）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react配置（webpack）","aria-hidden":"true"}},[t._v("#")]),t._v(" React配置（webpack）")]),t._v(" "),n("p",[t._v("我们创建一个项目文件夹01_HelloWorld，在这个文件夹中，配置webpack + babel环境。让webpack可以指导babel翻译ES6语法。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/VirtualDOM04.png",alt:""}})]),t._v(" "),n("h4",{attrs:{id:"基本配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本配置")]),t._v(" "),n("p",[t._v("创建package.json项目身份证：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ npm init -y\n")])])]),n("p",[t._v("安装webpack，并且设置为项目依赖：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ npm install --save-dev webpack\n")])])]),n("p",[t._v("当然你必须之前已经在-g下安装过webpack。")]),t._v(" "),n("p",[t._v("我们创建一个webpack.config.js文件，这个文件是webpack工作的参考。")]),t._v(" "),n("p",[t._v("我们对着https://webpack.js.org/configuration/  这个文档来创建webpack.config.js文件。")]),t._v(" "),n("p",[t._v("webpack.config.js文件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('const path = require(\'path\');\nmodule.exports = {\n    entry: "./app/main.js",  \n    output: {\n        path: path.resolve(__dirname, "dist"),\n        filename: "all.js"\n    }\n}\n')])])]),n("p",[t._v("至此，我们的webpack就已经可以进行标准的CMD模块化开发了。")]),t._v(" "),n("h4",{attrs:{id:"引入es6模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引入es6模块","aria-hidden":"true"}},[t._v("#")]),t._v(" 引入ES6模块")]),t._v(" "),n("p",[t._v("我们引入babel-loader翻译ES6：")]),t._v(" "),n("p",[t._v("我们参考https://github.com/babel/babel-loader 改变webpack.config.js文件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const path = require('path');\nmodule.exports = {\n    entry: \"./app/main.js\",  \n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"all.js\"\n    },\n    module: {\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.js$/,\n\t\t\t\texclude: /(node_modules|bower_components)/ ,\n\t\t\t\tuse: {\n\t\t\t\t\tloader: 'babel-loader',\n\t\t\t\t\toptions: {\n\t\t\t\t  \t\tpresets: ['es2015']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n}\n")])])]),n("p",[t._v("友情提醒：webpack1和2在配置上差别最大的就是loader的书写方法。module → rules → test/use属性，这是标准webpack2的写法。")]),t._v(" "),n("p",[t._v("安装：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ npm intall --save-dev babel-loader\n$ npm intall --save-dev babel-core\n$ npm intall --save-dev babel-preset-es2015\n")])])]),n("p",[t._v("此时运行")]),t._v(" "),n("p",[t._v("$ webpack")]),t._v(" "),n("p",[t._v("命令，将自动的使用CMD构建app文件夹中main.js文件，并且使用babel翻译。")]),t._v(" "),n("h4",{attrs:{id:"配置react"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置react","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置react")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ npm install --save-dev react\n$ npm install --save-dev react-dom\n$ npm install --save-dev babel-preset-react\n")])])]),n("p",[t._v("你可能会问：")]),t._v(" "),n("p",[t._v("① react为什么不是bower来安装，而是npm来安装")]),t._v(" "),n("p",[t._v("② 为什么是save-dev而不是save，也就是说为什么是开发依赖，而不是运行依赖。")]),t._v(" "),n("p",[t._v("稍后配置完毕解答。")]),t._v(" "),n("p",[t._v("改变webpack.config.js文件，增加一个babel翻译的配置项presets")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const path = require('path');\n\nmodule.exports = {\n    entry: \"./app/main.js\",  \n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"all.js\"\n    },\n    module: {\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.js$/,\n\t\t\t\texclude: /(node_modules|bower_components)/ ,\n\t\t\t\tuse: {\n\t\t\t\t\tloader: 'babel-loader',\n\t\t\t\t\toptions: {\n\t\t\t\t  \t\tpresets: ['es2015','react']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n}\n")])])]),n("p",[t._v("至此我们已经配置完毕react起步的所有的依赖，我们目前的package.json文件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n  "name": "01",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "author": "",\n  "license": "ISC",\n  "devDependencies": {\n    "babel-core": "^6.24.1",\n    "babel-loader": "^6.4.1",\n    "babel-preset-es2015": "^6.24.1",\n    "babel-preset-react": "^6.24.1",\n    "react": "^15.5.4",\n    "react-dom": "^15.5.4",\n    "webpack": "^2.4.1"\n  }\n}\n')])])]),n("h3",{attrs:{id:"hello-world"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hello-world","aria-hidden":"true"}},[t._v("#")]),t._v(" Hello World")]),t._v(" "),n("p",[t._v("创建app/App.js文件，这是一个组件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React , {Component} from "react";\n//我们定义一个叫做App的组件，在HTML中可以用<App></App>来使用它\n//React要求自定义组件必须是大写字母开头！\n//React要求自定义组件的类必须继承于React.Component类\nclass App extends Component{\n\t//组件中最重要的方法就是render方法，render是渲染的意思\n\trender(){\n\t\t//返回一个jsx语法，非常牛逼语法\n\t\treturn <h1>我是React，很高兴遇见你！说{5000+5000}次我爱你！</h1>;\n\t}\n}\n//向外暴露\nexport default App;\n')])])]),n("p",[t._v("下面就要使用这个App组件，所以我们来到/app/main.js文件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport {render} from "react-dom";\n//引入组件\nimport App from "./App.js";\n\n//使用、挂载组件，两个参数\n//第一个参数是jsx语法\n//第二个参数表示组件挂在哪里\nrender(\n\t<App></App> , \n\tdocument.getElementById("app-container")\n);\n')])])]),n("h2",{attrs:{id:"简单介绍jsx语法糖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单介绍jsx语法糖","aria-hidden":"true"}},[t._v("#")]),t._v(" 简单介绍jsx语法糖")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("JSX语法翻译前")]),t._v(" "),n("th",[t._v("JSX语法翻译后")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/jsxQ.png",alt:""}})]),t._v(" "),n("td",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/jsxH.png",alt:""}})])])])]),t._v(" "),n("p",[t._v("需要注意：")]),t._v(" "),n("h3",{attrs:{id:"①-必须被一个单独的大标签包裹"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#①-必须被一个单独的大标签包裹","aria-hidden":"true"}},[t._v("#")]),t._v(" ① "),n("strong",[t._v("必须被一个单独的大标签包裹")])]),t._v(" "),n("p",[t._v("比如div或者section")]),t._v(" "),n("p",[t._v("错误的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("return <h1>我是React，很高兴遇见你！HAHAHAHA</h1>\n<h1>我是React，很高兴遇见你！HAHAHAHA</h1>;\n")])])]),n("p",[t._v("正确的：应该被一个div包裹起来，小括号也挺好用的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("return (\n\t<div>\n\t\t<h1>我是React，很高兴遇见你！HAHAHAHA</h1>\n\t\t<h1>我是React，很高兴遇见你！HAHAHAHA</h1>\n\t</div>\n);\n\n")])])]),n("h3",{attrs:{id:"②-标签必须封闭"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#②-标签必须封闭","aria-hidden":"true"}},[t._v("#")]),t._v(" ② "),n("strong",[t._v("标签必须封闭")])]),t._v(" "),n("p",[t._v("错误的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('return (\n\t<div>\n\t\t<img src="" >\n\t</div>\n);\n')])])]),n("p",[t._v("正确的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('return (\n\t<div>\n\t\t<img src="" />\n\t</div>\n);\n')])])]),n("h3",{attrs:{id:"③-class要写成classname，for要写成htmlfor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#③-class要写成classname，for要写成htmlfor","aria-hidden":"true"}},[t._v("#")]),t._v(" ③ "),n("strong",[t._v("class要写成className，for要写成htmlFor")])]),t._v(" "),n("p",[t._v("错误的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('return (\n\t<div>\n\t\t<div class="box" ></div>\n\t</div>\n);\n')])])]),n("p",[t._v("正确的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('return (\n\t<div>\n\t\t<div className="box" ></div>\n\t</div>\n);\n')])])]),n("h3",{attrs:{id:"④-html注释不能使用，只能使用js注释。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#④-html注释不能使用，只能使用js注释。","aria-hidden":"true"}},[t._v("#")]),t._v(" ④ HTML注释不能使用，只能使用JS注释。")]),t._v(" "),n("h3",{attrs:{id:"⑤-原生标签比如p、li、div如果要使用自定义属性，必须用data-前缀。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#⑤-原生标签比如p、li、div如果要使用自定义属性，必须用data-前缀。","aria-hidden":"true"}},[t._v("#")]),t._v(" ⑤ "),n("strong",[t._v("原生标签比如p、li、div如果要使用自定义属性，必须用data-前缀")]),t._v("。")]),t._v(" "),n("p",[t._v("错误：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('return (\n\t\t\t<div>\n\t\t\t\t<h1>我是React，很高兴遇见你！</h1>\n\t\t\t\t<p a="10"></p>\n\t\t\t</div>\n\t\t);\n')])])]),n("p",[t._v("正确：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('return (\n\t\t\t<div>\n\t\t\t\t<h1>我是React，很高兴遇见你！</h1>\n\t\t\t\t<p data-a="10"></p>\n\t\t\t</div>\n\t\t);\n')])])]),n("p",[t._v("如果是自定义标签，此时可以随便传属性：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<App a="123213"></App>\n')])])]),n("h3",{attrs:{id:"⑥-js表达式用-单大括号包裹"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#⑥-js表达式用-单大括号包裹","aria-hidden":"true"}},[t._v("#")]),t._v(" ⑥ "),n("strong",[t._v("JS表达式用{}单大括号包裹")])]),t._v(" "),n("p",[t._v("在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代。以下实例中如果变量 i 等于 1 浏览器将输出 true, 如果修改 i 的值，则会输出 false.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<h1>我是React，很高兴遇见你！{1+2}</h1>\n\n{3 > 8 ? "A" : "B"}\n')])])]),n("h3",{attrs:{id:"⑦-可以运行函数："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#⑦-可以运行函数：","aria-hidden":"true"}},[t._v("#")]),t._v(" ⑦ "),n("strong",[t._v("可以运行函数")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\n//我们定义一个叫做App的组件，在HTML中可以用<App></App>来使用它\n//React要求自定义组件必须是大写字母开头！\n//React要求自定义组件的类必须继承于React.Component类\nclass App extends React.Component{\n\t//定义一个函数haha，接受一个参数\n\thaha(lanmu){\n\t\tif(lanmu == "篮球"){\n\t\t\treturn (\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>乔丹</li>\n\t\t\t\t\t\t<li>科比</li>\n\t\t\t\t\t\t<li>奥尼尔</li>\n\t\t\t\t\t</ul>\n\t\t\t)\n\t\t}else if(lanmu == "足球"){\n\t\t\treturn (\n\t\t\t\t<ul>\n\t\t\t\t\t<li>李铁</li>\n\t\t\t\t\t<li>郝海东</li>\n\t\t\t\t\t<li>C罗</li>\n\t\t\t\t</ul>\n\t\t\t)\n\t\t}\n\t}\n\t//组件中最重要的方法就是render方法，render是渲染的意思\n\trender(){\n\t\t//返回一个jsx语法，非常牛逼语法\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>我是React，很高兴遇见你！</h1>\n\t\t\t\t<h3>JSX语法很好用哦！</h3>\n\t\t\t\t{3 > 8 ? "A" : "B"}\n\t\t\t\t<h3>JSX可以调用函数哦！</h3>\n\t\t\t\t{this.haha("足球")}\n\t\t\t</div>\n\t\t);\n\t}\n}\n//向外暴露\nexport default App;\n')])])]),n("h3",{attrs:{id:"⑧-样式使用双大括号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#⑧-样式使用双大括号","aria-hidden":"true"}},[t._v("#")]),t._v(" ⑧ "),n("strong",[t._v("样式使用双大括号")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<h3>JSX可以设置样式哦！</h3>\n\n<div style={{"width":"100px","height":20 + 30 + "px","backgroundColor" : "red"}}></div>\n\n')])])]),n("h3",{attrs:{id:"⑨-可以使用数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#⑨-可以使用数组","aria-hidden":"true"}},[t._v("#")]),t._v(" ⑨ "),n("strong",[t._v("可以使用数组")])]),t._v(" "),n("p",[t._v("数组中如果是JSX语法，数组会被自动展开。所以不需要使用ng-repeat这样的指令展开数组。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('render(){\n\t\t//定义一个数组，定义的JSX项目上要求有key属性，只要是重复的数组项目，都要有不能重复的key属性，这是要求。\n\t\tlet arr = ["白板","幺鸡","二条","三饼"].map((item,index)=>{\n\t\t\treturn <li key={index}>{item}</li>\n\t\t});\n\t\t//返回一个jsx语法，非常牛逼语法\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ul>\n\t\t\t\t\t{arr}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n')])])]),n("p",[t._v("生成:")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/JSXARR.png",alt:""}})]),t._v(" "),n("h2",{attrs:{id:"react中的数据传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react中的数据传递","aria-hidden":"true"}},[t._v("#")]),t._v(" React中的数据传递")]),t._v(" "),n("p",[t._v("​\tReact中跟数据有关系的就三个东西：state、props、context。我们可以叫做数据传递三兄弟。")]),t._v(" "),n("h3",{attrs:{id:"组件自己身上的属性值变化，不会引起视图改变"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件自己身上的属性值变化，不会引起视图改变","aria-hidden":"true"}},[t._v("#")]),t._v(" 组件自己身上的属性值变化，不会引起视图改变")]),t._v(" "),n("p",[t._v("​\t我们可以在组件的类定义里面写constructor构造器，里面定义this.a = 100 。表示给组件的实例绑定一个a属性，值是100。在jsx中使用的时候，直接this.a即可。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nclass App extends React.Component{\n\t//构造函数\n\tconstructor(){\n\t\tsuper();  //要求调用super\n\t\tthis.a = 100;\n\t}\n\t//组件中最重要的方法就是render方法，render是渲染的意思\n\trender(){\n\t\t//返回一个jsx语法，非常牛逼语法\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.a}\n\t\t\t</div>\n\t\t);\n\t}\n}\n//向外暴露\nexport default App;\n')])])]),n("p",[t._v("补充知识点super:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("super( ) ——继承\n     在class方法中，继承是使用 extends 关键字来实现的。子类 必须 在 constructor( )调用 super( )方法，否则新建实例时会报错。\n\t报错的原因是：子类是没有自己的 this 对象的，它只能继承自父类的 this 对象，然后对其进行加工，而super( )就是将父类中的this对象继承给子类的。没有 super，子类就得不到 this 对象。\n")])])]),n("p",[t._v("我们增加一个按钮，试着让用户点击按钮之后，a的值变化：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nclass App extends React.Component{\n\t//构造函数\n\tconstructor(){\n\t\tsuper();\n\t\tthis.a = 100;\n\t}\n\tadd(){\n\t\tthis.a++;\n\t\tconsole.log(this.a);\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>{this.a}</p>\n\t\t\t\t<p>\n\t\t\t\t<input type="button" value="按我" onClick={(this.add).bind(this)} />\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n//向外暴露\nexport default App;\n')])])]),n("p",[t._v("通过案例学习了：")]),t._v(" "),n("p",[t._v("① 绑定监听使用onClick、onMousedown、onMouseenter、onBlur，把on后面的字母大写，React会自动识别React事件。")]),t._v(" "),n("p",[t._v("② 绑定监听函数的时候，this上下文是有问题的，所以需要使用bind()方法来设置上下文")]),t._v(" "),n("p",[t._v('③ 绑定监听函数的时候，注意用{}而不是""')]),t._v(" "),n("p",[t._v("错误的：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<input type="button" value="按我" **onClick=****"(this.add).bind(this)"** />\n')])])]),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/state.png",alt:""}})]),t._v(" "),n("p",[t._v("所以React中，组件自己的属性的变化不会引发视图的变化！！")]),t._v(" "),n("h3",{attrs:{id:"闭包中的值变化，不会引起视图改变"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包中的值变化，不会引起视图改变","aria-hidden":"true"}},[t._v("#")]),t._v(" 闭包中的值变化，不会引起视图改变")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\n \nclass App extends React.Component{\n\trender(){\n\t\tlet b = 99;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>{b}</p>\n\t\t\t\t<p>\n\t\t\t\t\t<input type="button" value="按我" onClick={()=>{b++;console.log(b);}} />\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n//向外暴露\nexport default App;\n闭包中的值变化，也不会引起视图的改变！\n\n')])])]),n("h3",{attrs:{id:"三兄弟之一-：state"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三兄弟之一-：state","aria-hidden":"true"}},[t._v("#")]),t._v(" 三兄弟之一 ：state")]),t._v(" "),n("p",[t._v("React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。")]),t._v(" "),n("p",[t._v("React 里，"),n("strong",[t._v("只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\n \nclass App extends React.Component{\n \tconstructor(){\n \t\tsuper();\n \t\tthis.state = {\n \t\t\ta : 100,\n \t\t\tb : 200,\n \t\t\tc : 300\n \t\t}\n \t}\n \tadd(){\n \t\t\tthis.setState({a : this.state.a + 1});\n \t}\n \trender(){\n \t\treturn (\n \t\t\t<div>\n \t\t\t\t<h1>我是APP组件</h1>\n \t\t\t\t<p>我有状态state</p>\n \t\t\t\t<p>a : {this.state.a}</p>\n \t\t\t\t<p>b : {this.state.b}</p>\n \t\t\t\t<p>c : {this.state.c}</p>\n \t\t\t\t<p>\n \t\t\t\t\t<input type="button" value="按我" **onClick={(this.add).bind(this)}**/>\n \t\t\t\t</p>\n \t\t\t</div>\n \t\t)\n \t}\n}\n\n//向外暴露\nexport default App;\n')])])]),n("p",[t._v("只有更新三兄弟，才会引发Virtual DOM的改变，从而改变DOM。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("定义state： 在构造函数中使用this.state属性即可")])]),t._v(" "),n("li",[n("p",[t._v("使用state ：在JSX中{this.state.a}")])]),t._v(" "),n("li",[n("p",[t._v("改变state： this.setState({a : this.state.a + 1});  不能写++，因为state属性值只读")]),t._v(" "),n("pre",[n("code",[t._v("  state是内部的（所以也叫作local state），**只有组件自己能改变自己的state，别人想改变自己的state，都不可能！**\n\n  后面要介绍Redux架构，所有组件自己的state越来越少用了，而是变为了Redux中的state，不要混淆。\n")])])])]),t._v(" "),n("h3",{attrs:{id:"三兄弟之二-：props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三兄弟之二-：props","aria-hidden":"true"}},[t._v("#")]),t._v(" 三兄弟之二 ：props")]),t._v(" "),n("p",[t._v("​\t就是定义在自定义组件标签上面的值，就是props。当props改变的时候，会引发Virtual DOM的改变，从而引发视图的重绘。react崇尚数据的单向流动，所以设计的时候就是让数据从父组件流向子组件。props在子组件中是只读的，不能修改的。")]),t._v(" "),n("p",[t._v("如果父组件App，想往子组件MyCompo中传值，使用属性：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('app/App.js：\nimport React from "react";\nimport MyCompo from "./MyCompo.js";\n\nclass App extends React.Component{\n \tconstructor(){\n \t\tsuper();\n \t}\n \trender(){\n \t\treturn (\n \t\t\t<div>\n \t\t\t\t<MyCompo a="66" b="77" c="88"></MyCompo>\n \t\t\t</div>\n \t\t)\n \t}\n}\n\n//向外暴露\nexport default App;\n')])])]),n("p",[t._v("子组件MyCompo中就可以无脑使用this.props来枚举传入的属性：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('app/MyCompo.js：\nimport React from "react";\n\nclass MyCompo extends React.Component{\n \tconstructor(){\n \t\tsuper();\n \t}\n \trender(){\n \t\treturn (\n \t\t\t<div>\n \t\t\t\t我是MyCompo组件\n \t\t\t\t<p>{this.props.a}</p>\n \t\t\t\t<p>{this.props.b}</p>\n \t\t\t\t<p>{this.props.c}</p>\n \t\t\t</div>\n \t\t);\n \t}\n}\n\n//向外暴露\nexport default MyCompo;\n')])])]),n("p",[t._v("如果需要在构造函数中使用这个值，此时系统会将props最为构造函数的第一个参数传入：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class MyCompo extends React.Component{\n \tconstructor(props){\n \t\tsuper();\n \t\tthis.state = {\n \t\t\tc : props.c\n \t\t}\n \t}\n }\n")])])]),n("p",[t._v("在子组件中，props是只读的，不能修改props的值。如果要修改，用state来接收。")]),t._v(" "),n("h4",{attrs:{id:"prop-types"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prop-types","aria-hidden":"true"}},[t._v("#")]),t._v(" prop-types")]),t._v(" "),n("p",[t._v("props属性可以被验证有效性：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('$ npm install --save-dev prop-types\n \n\nimport React from "react";\nimport { PropTypes } from "prop-types";\n\nclass MyCompo extends React.Component{\n \tconstructor(props){\n \t\tsuper();\n \t\tthis.state = {\n \t\t\tc : props.c\n \t\t}\n \t}\n\n \trender(){\n \t\treturn (\n \t\t\t<div>\n \t\t\t\t我是MyCompo组件\n \t\t\t\t<p>{this.props.a}</p>\n \t\t\t\t<p>{this.props.b}</p>\n \t\t\t\t<p>{this.state.c}</p>\n \t\t\t\t<p>\n \t\t\t\t\t<input type="button" value="按我" onClick={()=>{this.setState({c : this.state.c + 1});}}/>\n \t\t\t\t</p>\n \t\t\t</div>\n \t\t);\n \t}\n}\n\n//定义组件需要传入的参数，这些都是语法规定\n//类名.propTypes，值是一个JSON。key就是需要传进来的props属性名，v就是对它的限制\nMyCompo.propTypes = {\n\ta : PropTypes.string.isRequired,  \t//a属性是一个字符串，必传\n\tb : PropTypes.string,  \t\t\t\t//b属性是一个字符串，不必传\n\tc : PropTypes.number.isRequired\t\t//c属性是一个数组，必传\n};\n\n//向外暴露\nexport default MyCompo;\n')])])]),n("p",[n("strong",[t._v("如果非要从下到上传输数据呢")]),t._v("？子组件要把数据返回给父组件，此时只能用奇淫技巧。"),n("strong",[t._v("就是父组件传一个函数给子组件，子组件通过传参数调用函数将数据返回给父组件的函数，父组件的函数接受实参改变父组件中的state等值。")])]),t._v(" "),n("p",[t._v("父组件App现在想让子组件MyCompo设置App自己的state.d值，此时就需要传入d值，并且传入一个设置d值的函数到子组件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('app/App.js：\nimport React from "react";\nimport MyCompo from "./MyCompo.js";\n\nclass App extends React.Component{\n \tconstructor(){\n \t\tsuper();\n \t\tthis.state = {\n \t\t\td : 16\n \t\t}\n \t}\n\n \tsetD(number){\n \t\tthis.setState({"d" : number});\n \t}\n\n \trender(){\n \t\treturn (\n \t\t\t<div>\n \t\t\t\t<p>我是App组件，我有一个d状态：{this.state.d}</p>\n \t\t\t\t<MyCompo setD={(this.setD).bind(this)} d={this.state.d}></MyCompo>\n \t\t\t</div>\n \t\t)\n \t}\n}\n\n//向外暴露\nexport default App;\n')])])]),n("p",[t._v("子组件就要接受父组件传来的d参数和设置D的函数：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React   from "react";\nimport { PropTypes } from "prop-types";\n\nclass MyCompo extends React.Component{\n \tconstructor(props){\n \t\tsuper();\n \t\tthis.state = {\n \t\t \td : props.d\n \t\t}\n\n \t\tthis.add = () =>{\n \t\t\tthis.setState({"d" : this.state.d + 1});\n \t\t\tprops.setD(this.state.d + 1);\n \t\t}\n \t}\n\n \trender(){\n \t\treturn (\n \t\t\t<div>\n \t\t\t\t<hr/>\n \t\t\t\t我是MyCompo组件\n \t\t\t\t<p>d : {this.state.d}</p>\n \t\t\t\t<p>\n \t\t\t\t\t<input type="button" value="按我更改d的值" **onClick={this.add}**/>\n \t\t\t\t</p>\n \t\t\t</div>\n \t\t);\n \t}\n}\n\n//定义组件需要传入的参数\nMyCompo.propTypes = {\n\ta : PropTypes.string.isRequired,\n\tb : PropTypes.string.isRequired,\n\tc : PropTypes.number.isRequired\n};\n \n//向外暴露\nexport default MyCompo;\n\n')])])]),n("p",[t._v("​\t由此可见React是一个特别简单的一个框架，没有Angular或者vue中directive中的scope，@、=、&等等符号。")]),t._v(" "),n("p",[t._v("​\t数据的单向传递是React的精髓。")]),t._v(" "),n("p",[t._v("​\t如果通过props传递引用类型数据，此时也是不会垫付“数据单向传递”的限制。子组件中对数组、JSON对象的改变，不会引起父组件中哪个数组、JSON对象的改变，可以认为传入了副本。")]),t._v(" "),n("h3",{attrs:{id:"三兄弟之三：-context"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三兄弟之三：-context","aria-hidden":"true"}},[t._v("#")]),t._v(" 三兄弟之三： context")]),t._v(" "),n("p",[t._v("​\t上下文的精髓是可以跨级传递数据，爷爷组件可以直接传递数据到孙子组件。")]),t._v(" "),n("p",[t._v("语法比较晦涩：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('app/Yeye.js\n\nimport React from "react";\nimport Baba from "./Baba.js";\nimport PropTypes from "prop-types";\n\nclass Yeye extends React.Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ta : 100\n\t\t}\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>爷爷</h1>\n\t\t\t\t<Baba></Baba>\n\t\t\t</div>\n\t\t);\n\t}\n\n\t//得到孩子上下文，实际上这里表示一种设置，返回一个对象，这个对象就是现在这个家族体系共享的上下文。将上下文中的a值变为自己的状态中的a值\n\tgetChildContext(){\n\t\treturn {\n\t\t\ta : this.state.a\n\t\t}\n\t}\n}\n\n\n//设置child的上下文类型\nYeye.childContextTypes = {\n\ta : PropTypes.number.isRequired\n}\n\nexport default Yeye;\n')])])]),n("p",[t._v("app/Baba.js文件，没有写什么东西：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport Sunzi from "./Sunzi";\nimport PropTypes from "prop-types";\n\nclass Baba extends React.Component{\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>爸爸</h1>\n\t\t\t\t<Sunzi></Sunzi>\n\t\t\t</div>\n\t\t);\n\t}\n}\n \nexport default Baba;\n')])])]),n("p",[t._v("app\\Sunzi.js")]),t._v(" "),n("p",[t._v("React会将上下文当做构造函数的第二个参数传入：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport PropTypes from "prop-types";\n\nclass Sunzi extends React.Component{\n\tconstructor(props,context){\n\t\tsuper();\n\t\tconsole.log(context);  //得到上下文\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>孙子</h1>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n//设置上下文的类型\nSunzi.contextTypes = {\n\ta : PropTypes.number\n}\n\nexport default Sunzi;\n')])])]),n("p",[t._v("结论：")]),t._v(" "),n("p",[t._v("① 当祖先元素中更改了上下文的数据，此时所有的子孙元素中的数据都会更改，视图也会更新；")]),t._v(" "),n("p",[t._v("② 反之不成立，可以认为上下文的数据在子孙元素中是只读的。此时又要需要使用奇淫技巧，就是在context中共享一个操作祖先元素的函数，子孙元素通过上下文获得这个函数，从而操作祖先元素的值。")]),t._v(" "),n("p",[t._v("也就是说，state是自治的不涉及传值的事儿；props是单向的，父亲→儿子；context也是单向的，祖先→后代。如果要反向，就要传入一个函数。")]),t._v(" "),n("p",[t._v("app/Yeye.js：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport Baba from "./Baba.js";\nimport PropTypes from "prop-types";\n\nclass Yeye extends React.Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ta : 100\n\t\t}\n\t}\n\n\t//设置自己的A值，这个函数要进入上下文的“通道”中\n\taddA(){\n\t\tthis.setState({a : this.state.a + 1});\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>爷爷{this.state.a} /></h1>\n\t\t\t\t<Baba></Baba>\n\t\t\t</div>\n\t\t);\n\t}\n \n\t//得到孩子上下文，实际上这里表示一种设置\n\tgetChildContext(){\n\t\treturn {\n\t\t\ta : this.state.a,\n\t\t\taddA : (this.addA).bind(this)\n\t\t}\n\t}\n}\n\nYeye.childContextTypes = {\n\ta \t\t: PropTypes.number.isRequired,\n\taddA \t: PropTypes.func.isRequired\t\t//func表示函数\n}\n\nexport default Yeye;\n')])])]),n("p",[t._v("app/Sunzi.js")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport PropTypes from "prop-types";\n\nclass Sunzi extends React.Component{\n\tconstructor(props,context){\n\t\tsuper();\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>孙子{this.context.a} <input type="button" value="按我" onClick={this.context.addA}/></h1>\n\t\t\t</div>\n\t\t);\n\t}\n}\n \nSunzi.contextTypes = {\n\ta \t\t: PropTypes.number,\n\taddA \t: PropTypes.func\n}\n\nexport default Sunzi;\n')])])]),n("p",[t._v("context很少用，传值基本用props。除非特别深的跨级别传值，可以用context。")]),t._v(" "),n("h2",{attrs:{id:"其他api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他api","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他API;")]),t._v(" "),n("h3",{attrs:{id:"无状态组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#无状态组件","aria-hidden":"true"}},[t._v("#")]),t._v(" 无状态组件")]),t._v(" "),n("p",[t._v("当我们现在的组件仅仅是为了呈递一些DOM元素，没有state、props等东西，此时可以不用费劲")]),t._v(" "),n("p",[t._v("class My extends React.Component{}")]),t._v(" "),n("p",[t._v("而是一个暴露简单函数即可：")]),t._v(" "),n("p",[t._v("My.js")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\n\nexport default () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>我是My组件</h1>\n\t\t</div>\n\t)\n}\n')])])]),n("p",[t._v("此时真的可以用它：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport My from "./My.js";\n\nclass App extends React.Component{\n \tconstructor(){\n \t\tsuper();\n \t}\n\n \trender(){\n \t\treturn (\n \t\t\t<div>\n \t\t\t\t<My></My>\n \t\t\t</div>\n \t\t)\n \t}\n}\n\n//向外暴露\nexport default App;\n')])])]),n("h3",{attrs:{id:"默认属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 默认属性")]),t._v(" "),n("p",[t._v("如果没有传入name输入，那么就以“菜鸟”作为属性：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('constructor(props){\n\tsuper();\n    this.state = {\n         name : props.name || "菜鸟"\n        }\n}\n')])])]),n("h2",{attrs:{id:"组件的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件的生命周期","aria-hidden":"true"}},[t._v("#")]),t._v(" 组件的生命周期")]),t._v(" "),n("p",[t._v("组件从没有诞生到诞生，到被移除的完整生命周期，都提供了可以触发事件的函数接口，就是生命周期。")]),t._v(" "),n("p",[t._v("组件的生命周期包含三个主要部分：")]),t._v(" "),n("p",[t._v("挂载： 组件被插入到DOM中。")]),t._v(" "),n("p",[t._v("更新： 组件被重新渲染，查明DOM是否应该刷新。")]),t._v(" "),n("p",[t._v("移除： 组件从DOM中移除。")]),t._v(" "),n("p",[t._v("声明周期函数：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\t//挂载之前\n\tcomponentWillMount(){\n\t\tconsole.log("componentWillMount");\n\t}\n\n\t//在挂载结束之后马上被调用。需要DOM节点的初始化操作应该放在这里。\n\tcomponentDidMount(){\n\t\tconsole.log("componentDidMount");\n\t}\n \t\n \t//当组件做出是否要更新DOM的决定的时候被调用。“门神”，在改变状态的时候可以选择通过或者不通过。\n \tshouldComponentUpdate(nextProps , nextState){\n \t\tif(nextState.a > 0.8){\n \t\t\treturn true;\n \t\t}\n \t\talert("本次没有随机到大于0.8的，更新被阻止");\n \t\treturn false;\n \t}\n\n \t//在更新发生之前被调用，没有把门的功能\n \tcomponentWillUpdate(){\n\t\tconsole.log("componentWillUpdate");\n \t}\n\n \t//在组件移除和销毁之前被调用\n \tcomponentWillUnmount(){\t\n \t\tconsole.log("componentWillUnmount");\n \t}\n')])])]),n("h2",{attrs:{id:"react中的表单"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react中的表单","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("strong",[t._v("React中的表单")])]),t._v(" "),n("p",[t._v("​\tReact没有提供类似Angular中复杂的表单验证功能，"),n("strong",[t._v("也没有双向数据绑定")]),t._v("！")]),t._v(" "),n("p",[t._v("​\t如果非要做一个效果：文本框中输入内容，实时改变h1中的内容此时就要用模拟的方法，监听文本框的事件，然后改变组件的state状态。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\n\nclass My2 extends React.Component{\n\tconstructor(props){\n\t\tsuper();\n\t \tthis.change = (this.change).bind(this);\n\t \tthis.state = {\n\t \t\t"txt" : ""\n\t \t}\n\t}\n \n\tchange(event){\n\t\tthis.setState({"txt" : event.target.value });\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t \t<input type="text" onInput={this.change} />\n\t\t\t \t<h1>{this.state.txt}</h1>\n \t\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default My2;\n')])])]),n("h2",{attrs:{id:"ref-dom钩子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ref-dom钩子","aria-hidden":"true"}},[t._v("#")]),t._v(" ref DOM钩子")]),t._v(" "),n("p",[t._v("vue也有：")]),t._v(" "),n("p",[n("img",{attrs:{src:"http://m.qpic.cn/psb?/V10cMkGy1fzQni/o2WQ6QBNExRuNzGXLsxe3l4M4wuzRARGurpeSzuqJmk!/b/dE0BAAAAAAAA&bo=rATWAQAAAAADB10!&rf=viewer_4",alt:""}})]),t._v(" "),n("p",[t._v("有时候需要操作DOM元素，ref属性表示一个钩子。可以在其他地方使用this.refs来获得这个DOM元素。")]),t._v(" "),n("h2",{attrs:{id:"小例子（初级）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小例子（初级）","aria-hidden":"true"}},[t._v("#")]),t._v(" 小例子（初级）")]),t._v(" "),n("p",[t._v("我们硬着头皮上例子，会发现案例感觉react不怎么好用，这是因为它还没有结合Redux，React功力就没有发挥出来。")]),t._v(" "),n("h3",{attrs:{id:"调色板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调色板","aria-hidden":"true"}},[t._v("#")]),t._v(" 调色板")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport Bar from "./components/Bar/Bar.js";\nimport "./app.less";\n\n\nclass App extends React.Component{\n \tconstructor(){\n \t\tsuper();\n \t\tthis.state = {\n \t\t\tr : 110,\n \t\t\tg : 220,\n \t\t\tb : 130\n \t\t}\n\n \t\t//三个Bar的实例\n \t\tthis.bars = ["r","g","b"].map((item,index)=>{\n \t\t\treturn <Bar key={index} v={this.state[item]} color={item} setColor={(this.setColor).bind(this)} />;\n \t\t});\n \t}\n\n \t//设置函数，可以设置color颜色为value\n \tsetColor(color,value) {\n \t\tthis.setState({[color] : value});\n \t}\n\n \trender(){\n \t\treturn (\n \t\t\t<div>\n \t\t\t\t<div className="box" style={{"backgroundColor" : `rgb(${this.state.r},${this.state.g},${this.state.b})`}}></div>\n \t\t\t\t{this.bars}\n \t\t\t</div>\n \t\t)\n \t}\n}\n\n//向外暴露\nexport default App;\n')])])]),n("p",[t._v("Bar.js：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport "./css.less";\nimport {PropTypes} from "prop-types";\n\nclass Bar extends React.Component{\n \tconstructor(props){\n \t\tsuper();\n \t\tthis.state = {\n \t\t\tv : props.v\n \t\t}\n\n \t\t//绑定this\n \t\tthis.change = (this.change).bind(this);\n \t\tthis.setColor = props.setColor;\n \t}\n\n \t//改变\n \tchange(event){\n \t\tthis.setState({"v" : parseInt(event.target.value)});\n \t\tthis.setColor(this.props.color , this.state.v);\n \t}\n\n \trender(){\n \t\treturn (\n \t\t\t<div className="Bar_kaola">\n \t\t\t\t<div className="bar">\n \t\t\t\t\t{this.props.color} :\n \t\t\t\t\t<input type="range" min="0" max="255" value={this.state.v} onChange={this.change}/>\n \t\t\t\t\t<input type="number" min="0" max="255" value={this.state.v} onChange={this.change}/>\n \t\t\t\t</div>\n \t\t\t</div>\n \t\t)\n \t}\n}\n\nBar.propTypes = {\n\tv \t: PropTypes.number.isRequired,\n\tcolor : PropTypes.string.isRequired,\n\tsetColor : PropTypes.func.isRequired\n}\n\n//向外暴露\nexport default Bar;\n')])])]),n("h2",{attrs:{id:"flux设计思想继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flux设计思想继承","aria-hidden":"true"}},[t._v("#")]),t._v(" Flux设计思想继承")]),t._v(" "),n("h3",{attrs:{id:"简介-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),n("p",[t._v("​\t传统MVC和MVVM架构设计模式有一个致命的缺点：当项目越来越大、逻辑越来越复杂的时候，数据流动越显得混乱。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/flux01.png",alt:""}})]),t._v(" "),n("p",[t._v("​\tFlux就是致力于解决数据有序传输问题的架构设计模式，来自Facebook，Flux名字是古英语中的flow，就是流动的意思。Flux中最大的哲学就是数据是单向流动的。")]),t._v(" "),n("p",[t._v("手册：https://github.com/facebook/flux")]),t._v(" "),n("p",[t._v("​\tFlux中最重要的四个概念：Dispatcher、Store、View、Action。如果按照MVC的命名方式，Flux应该叫做ADSV模式。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/adsv.png",alt:""}})]),t._v(" "),n("h3",{attrs:{id:"基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),n("h4",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("Flux是一个管理App中数据流动的一个模式。")])]),t._v(" "),n("li",[n("p",[t._v("最关键的一个概念就是数据的流动是单向的。")])])]),t._v(" "),n("h4",{attrs:{id:"dispatchererning"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dispatchererning","aria-hidden":"true"}},[t._v("#")]),t._v(" Dispatchererning")]),t._v(" "),n("ol",[n("li",[t._v("Dispatcher接收action，并且要把这些action分派给已经注册到Dispatcher的store上。")]),t._v(" "),n("li",[t._v("所有的store都将接收所有的action")]),t._v(" "),n("li",[t._v("在每个App中，"),n("strong",[t._v("应该确保只有一个Dispatcher的实例")]),t._v("。")])]),t._v(" "),n("h4",{attrs:{id:"store"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#store","aria-hidden":"true"}},[t._v("#")]),t._v(" Store")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/store01.png",alt:""}})]),t._v(" "),n("ol",[n("li",[t._v("Store是在App中持有数据的东西。")]),t._v(" "),n("li",[t._v("Store们要在App的Dispatcher身上注册，以确保它们可以接收actions。")]),t._v(" "),n("li",[n("strong",[t._v("存在store中的数据仅能够因为响应action所改变")]),t._v("。")]),t._v(" "),n("li",[t._v("在Store中不能够有公共的setter函数，仅仅能有getter函数。")]),t._v(" "),n("li",[t._v("Store们决定了它们愿意响应哪些actions。")]),t._v(" "),n("li",[t._v("无论什么时候，store中的数据改变了，就会触发一个change事件")]),t._v(" "),n("li",[n("strong",[t._v("在一个App中可能有很多store")]),t._v("。")])]),t._v(" "),n("h4",{attrs:{id:"actions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#actions","aria-hidden":"true"}},[t._v("#")]),t._v(" Actions")]),t._v(" "),n("ol",[n("li",[t._v("Action定义了我们App中内部的API")]),t._v(" "),n("li",[t._v("它们捕获所有可能改变App的任何途径、方法。")]),t._v(" "),n("li",[t._v('它们是简单的JSON对象，并且要有"type"属性，和其他的一些数据属性。')]),t._v(" "),n("li",[t._v("Action应该有一个具有语义的、直观的表示它是做什么的名字")]),t._v(" "),n("li",[t._v("记住，所有的store都将接收同一个action，并且通过这同一个action，store会知道它们要清除、更新哪些数据。")])]),t._v(" "),n("h4",{attrs:{id:"views"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#views","aria-hidden":"true"}},[t._v("#")]),t._v(" Views")]),t._v(" "),n("ol",[n("li",[t._v("从store中来的数据被展示在了view上。")]),t._v(" "),n("li",[t._v("View层可以使用任何框架，我们使用React做View层。")]),t._v(" "),n("li",[n("strong",[t._v("当一个视图想要是使用从某一个store中来的数据，它必须订阅subscribe（订阅）一下该store的change事件。")])]),t._v(" "),n("li",[t._v("当store发射了change事件，此时view就能得到新的数据并且重新渲染。")]),t._v(" "),n("li",[t._v("如果一个组件要使用store，但是没有订阅这个store，此时等着错误吧！")]),t._v(" "),n("li",[t._v("Action最常见的产生原因是在App的某一个部分因用户的交互行为，而被此view dispatch出来了。")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/adsv2.png",alt:""}})]),t._v(" "),n("h3",{attrs:{id:"从facebook官方实例盘逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从facebook官方实例盘逻辑","aria-hidden":"true"}},[t._v("#")]),t._v(" 从Facebook官方实例盘逻辑")]),t._v(" "),n("p",[t._v("https://github.com/facebook/flux")]),t._v(" "),n("p",[t._v("官方demo不看，不如回家卖红薯。")]),t._v(" "),n("p",[t._v("下载这个flux git包，然后解压缩，拿出examples/flux-todomvc文件夹。")]),t._v(" "),n("p",[t._v("进入这个文件夹，安装package.json中声明的依赖。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ npm install\n$ npm run build\n")])])]),n("p",[t._v("此时它自动用webpack构建我们的项目了。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/adsv3.png",alt:""}})]),t._v(" "),n("p",[t._v("Flux是设计思想，Redux是React中Flux的实现。")]),t._v(" "),n("p",[t._v("我们不写代码，但是看几个细节：")]),t._v(" "),n("p",[t._v("AppContainer.js：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/AppContainer.png",alt:""}})]),t._v(" "),n("p",[t._v("TodoAction.js：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/TodoAction.png",alt:""}})]),t._v(" "),n("p",[t._v("TodoStore.js：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/TodoStore.png",alt:""}})]),t._v(" "),n("h2",{attrs:{id:"redux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redux","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),n("h3",{attrs:{id:"基本概念-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本概念-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),n("p",[t._v("官网：http://redux.js.org/")]),t._v(" "),n("ol",[n("li",[t._v("Redux就是Flux思想在React中的实现。")]),t._v(" "),n("li",[t._v("Redux是一个可以预测状态的 JS app容器。")])]),t._v(" "),n("h3",{attrs:{id:"通过例子来学习redux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过例子来学习redux","aria-hidden":"true"}},[t._v("#")]),t._v(" 通过例子来学习Redux")]),t._v(" "),n("p",[t._v("下载https://github.com/reactjs/redux/")]),t._v(" "),n("p",[t._v("然后打开\\examples\\counter-vanilla：")]),t._v(" "),n("ol",[n("li",[t._v("你的App中全部的state都被存储在一个单独的store中，形式是object tree。")]),t._v(" "),n("li",[t._v("唯一的更改state的途径就行emit一个action，这个action描述了发什么什么事。")]),t._v(" "),n("li",[t._v("为了指定这些actions如何改变state tree，你必须书写简单的、纯净的reducers。")])]),t._v(" "),n("p",[t._v("所谓的reducers就是形如这样的纯函数，不继承任何东西：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function reducer(state,action){\n\treturn 新的state;\n}\n")])])]),n("p",[t._v("官方计数器案例上：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function counter(state = 0, action) {\n  switch (action.type) {\n  \tcase 'INCREMENT':\n    \treturn state + 1\n  \tcase 'DECREMENT':\n    \treturn state - 1\n  \tdefault:\n    \treturn state\n  \t}\n}\n")])])]),n("ul",[n("li",[n("p",[t._v("这就是一个reducer ， 是一个纯函数（这个函数不是谁的方法，不继承谁），接受state、action参数，返回新的state表达式。")])]),t._v(" "),n("li",[n("p",[t._v("它描述了一个action如何使当前state改变为下一个state。")])]),t._v(" "),n("li",[n("p",[t._v("state的形式取决于你，它可以是一个基本类型值，可以是一个数组，可以是一个对象。")])]),t._v(" "),n("li",[n("p",[t._v("唯一需要注意的事情就是永远不要去更改当前的state，而是应该返回一个新的state对象。")])]),t._v(" "),n("li",[n("p",[t._v("Action一般都是大写字母，约定。")])])]),t._v(" "),n("p",[t._v("创建一个Redux的store，用它来持有app的state。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let store = Redux.createStore(counter);\n")])])]),n("p",[t._v("store的API极其简单，就三个，subscribe，dispatch，getState。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//渲染\nfunction render() {\n     valueEl.innerHTML = store.getState().toString()\n}\n\n// 注册render\nstore.subscibe(render)\n\n//渲染\nrender();\n\n// 加\ndocument.getElementById('increment').onclick = function () {\n      store.dispatch({ type: 'INCREMENT' })\n};\n \n// 减\ndocument.getElementById('decrement').onclick = function () {\n      store.dispatch({ type: 'DECREMENT' })\n};\n\ndocument.getElementById('addnumber').onclick = function () {\n      var number = Number(document.getElementById(\"shuzitxt\").value);\n      store.dispatch({ type: 'ADDNUMBER' , number : number })\n };\n\n// 取余\ndocument.getElementById('incrementIfOdd').onclick = function () {\n      if (store.getState() % 2 !== 0) {\n          store.dispatch({ type: 'INCREMENT' })\n      }\n};\n")])])]),n("ul",[n("li",[n("p",[t._v("我们不是直接去修改state，而是指定了一个简单的JSON对象去描述我们想要什么事情发生，这个JSON对象我们称之为action。")])]),t._v(" "),n("li",[n("p",[t._v("然后你写了一个特定的叫做reducer的函数去指定每一个action要如何改变"),n("strong",[t._v("整个")]),t._v("app的state。")])])]),t._v(" "),n("p",[t._v("​\t比如下面我们改变这个案例，让state不是一个number简单类型值了，而是一个JSON，此时页面上只用它的m属性，但是n要陪着跑：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('function counter(state, action){\n    //设置state的初始值，使用undefined验证法\n    if(state == undefined){\n        state = { "m" : 6 , "n" : 9};\n    }\n    switch (action.type) {\n        case \'INCREMENT\':\n            return {"m" : state.m + 1 , "n" : 9}\n        case \'DECREMENT\':\n            return {"m" : state.m - 1 , "n" : 9}\n        case \'ADDNUMBER\':\n            return {"m" : state.m + action.number , "n" : 9}\n        default:\n            return state\n    }\n}\n')])])]),n("p",[t._v("即，使用ES6中的...自动枚举的运算符：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('function counter(state, action){\n    //设置state的初始值，使用undefined验证法\n    if(state == undefined){\n        state = { "m" : 6 , "n" : 9 , "a" : 1 , "b" : 2};\n    }\n    switch (action.type) {\n        case \'INCREMENT\':\n            return {...state ,"m" : state.m + 1}\n        case \'DECREMENT\':\n            return {"m" : state.m - 1 , "n" : 9}\n        case \'ADDNUMBER\':\n            return {"m" : state.m + action.number , "n" : 9}\n        default:\n            return state\n    }\n}\n')])])]),n("p",[t._v("此时语法可以非常精简。")]),t._v(" "),n("p",[t._v("如果你玩儿过Flux，这里有一个重要区别你要注意。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Redux中没有Dispatcher的概念（Store自己负责Dispatch个action到自己），也不允许有多个Store。（所以Redux擅长制作有强的“全局数据”概念的web应用，比如商城）。")])]),t._v(" "),n("li",[n("p",[t._v("Redux中只有一个唯一的store，使用唯一的recucing function。")])]),t._v(" "),n("li",[n("p",[t._v("随着你的项目增长，此时不要去增加store，而是应该想着切割现在的store为一个个小store。")])]),t._v(" "),n("li",[n("p",[t._v("这点非常像React中仅仅允许使用一个根节点，但是根节点由众多的节点构成。")])]),t._v(" "),n("li",[n("p",[t._v("你可以使用store的subscribe方法，将store订阅了视图，render是一个函数。此时表示当store变化的时候就会执行函数。")])]),t._v(" "),n("li",[n("p",[t._v("通常情况下请使用React配合。")])])]),t._v(" "),n("h2",{attrs:{id:"react-redux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-redux","aria-hidden":"true"}},[t._v("#")]),t._v(" React-Redux")]),t._v(" "),n("h3",{attrs:{id:"不使用react-redux遇见的灾难"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不使用react-redux遇见的灾难","aria-hidden":"true"}},[t._v("#")]),t._v(" 不使用React-Redux遇见的灾难")]),t._v(" "),n("p",[t._v("刚才我们学习了Redux，已经基本知道Redux怎么玩儿了，大致步骤：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("设置一个reducer，")])]),t._v(" "),n("li",[n("p",[t._v("弄一个store，从Redux.createStore(reducer);")])]),t._v(" "),n("li",[n("p",[t._v("弄一个render函数")])]),t._v(" "),n("li",[n("p",[t._v("注册一下render，store.subscibe(render)")])]),t._v(" "),n("li",[n("p",[t._v("写监听了，此时要记得store.dispatch(action)，不是直接改store。")])])]),t._v(" "),n("p",[t._v("此时和React还没有直接产生关系，换句话说在React中没有使用Redux技术。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/reactredux.png",alt:""}})]),t._v(" "),n("p",[t._v("我们现在看一下counter这个案例：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/counter.png",alt:""}})]),t._v(" "),n("p",[t._v("这个案例纯属霸王硬上弓，就是我们现在通过标签的属性，将store的值，和对store的操作传给了组件！这太二了！")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const render = () => {ReactDOM.render(\n  <Counter \n\t  value={store.getState()} \n\t  onIncrement={() => store.dispatch({ type: 'INCREMENT' })} \n\t  onDecrement={() => store.dispatch({ type: 'DECREMENT' })}\n  />,\n  rootEl\n)};\n")])])]),n("p",[t._v("​\t那次此时灾难是什么？比如一个组件内部要多store有10种操作，你还传10个属性下去啊？再比如，组件内部还有组件要操作store，你还一直往下传啊？")]),t._v(" "),n("p",[t._v("​\t所以我们使用一个粘合剂，要优雅的把react和redux合并起来，这个包就叫做react-redux。")]),t._v(" "),n("p",[t._v("​\treact-redux可以让任何组件在任何地方看见store，机理实际上就是昨天学习的context。但是我们用的时候和context无关，人家帮我们写好了。")]),t._v(" "),n("p",[t._v("​\t此时我们怎么学习react-redux，还是老方法，结合官方文档看官方demo。")]),t._v(" "),n("p",[t._v("​\t我们要攻克todomvc这个官方demo。")]),t._v(" "),n("h3",{attrs:{id:"结合官方文档看官方demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结合官方文档看官方demo","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("strong",[t._v("结合官方文档看官方demo")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("React-Redux给我们提供了两个东西：Provider组件、connect函数。")])]),t._v(" "),n("li",[n("p",[t._v("Provider组件要求是最大的组件，传入store属性，此时天下无人不识君。")])])]),t._v(" "),n("p",[t._v("官方文档：https://github.com/reactjs/react-redux/tree/master/docs")]),t._v(" "),n("p",[t._v("index.js：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './containers/App'\nimport reducer from './reducers'\nimport 'todomvc-app-css/index.css'\n\nconst store = createStore(reducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n")])])]),n("p",[t._v("Provider自定义组件：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("这个Provider组件使得它内部的自定义组件可以使用connect()函数。")])]),t._v(" "),n("li",[n("p",[t._v("通常的，你不能在没有Provider父亲或者组件的情况下，使用connect()函数。")])])]),t._v(" "),n("p",[t._v("属性store (Redux Store): APP中唯一的那个store")]),t._v(" "),n("p",[t._v("App.js：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React, { PropTypes } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport Header from '../components/Header'\nimport MainSection from '../components/MainSection'\nimport * as TodoActions from '../actions'\n\nconst App = ({ todos , actions }) => (\n  <div>\n    {JSON.stringify(todos)}\n    <Header addTodo={actions.addTodo} />\n    <MainSection todos={todos} actions={actions} />\n  </div>\n)\n\nApp.propTypes = {\n  todos: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  todos: state.todos\n})\n\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(TodoActions, dispatch)\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n")])])]),n("ul",[n("li",[n("p",[t._v("将React组件和Redux的store进行连接。")])]),t._v(" "),n("li",[n("p",[t._v("connect提供了一个方便的API能够适应绝大多数工作。")])]),t._v(" "),n("li",[n("p",[t._v("它没有更改你传进来的类，返回会返回一个已经连接好的新类。")])])]),t._v(" "),n("p",[t._v("第一个参数：mapStateToPropsp")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("如果你传入了第一个参数，此时这个组件将注册Redux的store的更新信息。")])]),t._v(" "),n("li",[n("p",[t._v("这意味着无论任何时候store被更改了，mapStateToProps函数将会被调用。")])]),t._v(" "),n("li",[n("p",[t._v("mapStateToProps 的返回值必须是一个纯JSON！这个JSON将与组件的props融合。也就是说，这个返回的JSON中的key将自动成为组件的props中的成员。")])])]),t._v(" "),n("p",[t._v("如果你不想订阅store的更新，此时不要传这个参数就行了，此时用null占一个位置即可。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export default connect(\n  null,\n  mapDispatchToProps\n)(App)\n")])])]),n("p",[t._v("第2个参数，mapDispatchToPropsn';")]),t._v(" "),n("ul",[n("li",[t._v("如果第往connect函数中传入了第二个参数，且是一个函数，那么这个函数将获得dispatch方法，这可是可以号令action发出的方法啊！可以间接导致stage的改变。")]),t._v(" "),n("li",[t._v("返回一个对象如何绑定action creator（返回action的函数，就是action creator）取决于你自己")]),t._v(" "),n("li",[t._v("小提示：你可以使用bindActionCreators()方法轻松的将action creator接口和dispatch进行绑定。")]),t._v(" "),n("li",[t._v("如果你省略了第二个参数，此时系统还是会将dispatch对象注入到你的组件中，但是不好用，因为你看不见action清单，所以还是需要用bindActionCreators()去处理一下。")])]),t._v(" "),n("h2",{attrs:{id:"阶段性回顾"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阶段性回顾","aria-hidden":"true"}},[t._v("#")]),t._v(" 阶段性回顾")]),t._v(" "),n("p",[t._v("温故而知新~")]),t._v(" "),n("h3",{attrs:{id:"原生react"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原生react","aria-hidden":"true"}},[t._v("#")]),t._v(" 原生React")]),t._v(" "),n("p",[t._v("自定义组件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<App></App>\n")])])]),n("p",[t._v("React中做自定义组件非常方便：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class App extends React.Component(){\n\tconstructor(){\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\t"a" : 1\n\t\t}\n\t}\n\t\n\tsetA(){\n\t\tthis.setState({"a" : this.state.a + 1});\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>{this.state.a}</h1>\n\t\t\t\t<button onClick={(this.setA).bind(this)}>a加1</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n')])])]),n("p",[t._v("组件里面有数据流动三兄弟：state、props、context。")]),t._v(" "),n("p",[t._v("state就是组件内部的状态，组件里面用"),n("strong",[t._v("this.state")]),t._v("得到状态，用this.setState(JSON)设置state。内部的状态。")]),t._v(" "),n("p",[t._v("props用来组件之间（父子之间）来传递数据，比如App组件内部使用了另外一个自定义组件My：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class App extends React.Component(){\n\tconstructor(){\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\t"a" : 1\n\t\t}\n\t}\n\t\n\tsetA(){\n\t\tthis.setState({"a" : this.state.a + 1});\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>{this.state.a}</h1>\n\t\t\t\t<button onClick={(this.setA).bind(this)}>a加1</button>\n\n\t\t\t\t<My a={a}></My>\n\t\t\t</div>\n\t\t);\n\t}\n}\n')])])]),n("p",[t._v("My.js：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class My extends React.Component(){\n\tconstructor(props){\n\t\tsuper();\n\t}\n\t\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t \t<h1>{this.props.a}</h1>\n\t\t\t</div>\n\t\t);\n\t}\n}\n")])])]),n("p",[t._v("​\t"),n("strong",[t._v("父子嵌套的时候，即儿子想要修改父亲的一个值（也可以理解为传回一个值给父亲）的时候，我们要传一个函数给子组件。就是将能够操作父亲的state.a这个函数setA传给了子组件，让子组件自己去调用。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class App extends React.Component(){\n\tconstructor(){\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\t"a" : 1\n\t\t}\n\t}\n\t\n\tsetA(){\n\t\tthis.setState({"a" : this.state.a + 1});\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>{this.state.a}</h1>\n\t\t\t\t<button onClick={(this.setA).bind(this)}>a加1</button>\n\n\t\t\t\t<My a={a} setA={setA}></My>\n\t\t\t</div>\n\t\t);\n\t}\n}\n')])])]),n("p",[t._v("My.js：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class My extends React.Component(){\n\tconstructor(props){\n\t\tsuper();\n\n\t}\n\t\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t \t<h1>{this.props.a}</h1>\n\t\t\t \t<button onClick={this.props.setA}>a加1</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n")])])]),n("h3",{attrs:{id:"redux-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redux-2","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),n("p",[t._v("Flux是一种架构思想，“"),n("strong",[t._v("MV不好用，我Flux好用")]),t._v("”。数据的单向流动！")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/flux02.png",alt:""}})]),t._v(" "),n("p",[t._v("​\tFlux我们是通过学习facebook提供的官方案例Flux_master中的example/todo_mvc来学习的，扒拉了一下，并没有深入学习。但是了解了：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('state：任意形式（it up to you），可以是基本类型值，可以是JSON、数组。\nreducer：是一个pure function，形式是(state,action) => state\naction：是一个pure Object，形式是{type:"ACTIONTYPESTRING","v":number,...}\n')])])]),n("p",[t._v("​\t按钮并不是直接去操作Store的state，而是dispatch一个action！")]),t._v(" "),n("p",[t._v("​\tRedux是Flux思想在React中的体现。我们先学习了一个Redux_master中的counter_vanilla这么一个案例，这个案例和React没有关系，就是裸奔Redux。")]),t._v(" "),n("p",[t._v("​\tRedux架构直接作用在React上不优雅，需要将全局的Store一个组件一个组件通过属性下传，特别不优雅！甚至官方给出了一个案例counter这个案例。")]),t._v(" "),n("p",[t._v("​\t所以我们使用React-Redux这个包，来做React和Redux的粘合剂。")]),t._v(" "),n("p",[t._v("先讲一个小东西，撒牙缝，膈应人的就是那个bindActionCreator干嘛的。")]),t._v(" "),n("p",[t._v("实际上的本质是一个函数与数据的"),n("strong",[t._v("镜像绑定")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('var shuju = {\n\t"a" : 123,\n\t"b" : 2343,\n\t"c" : 4545,\n\t"d" : 435435,\n\t"e" : 234324324\n}\n\nfunction xianshi(number){\n\tconsole.log("值是" + number);\n}\n\nfunction bind(shuju,xianshi){\n\tvar obj = {};\n\tfor(var k in shuju){\n\t\tobj[k] = function(){\n\t\t\txianshi(shuju[k]);\n\t\t}\n\t}\n\n\treturn obj;\n}\n\nvar gaojixianshi = bind(shuju,xianshi);\n\ngaojixianshi.d()\n')])])]),n("p",[t._v("此时在React-Redux中，应该")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport {bindActionCreators} from "redux";\nimport {connect} from "react-redux";\nimport * as actions from "./actions.js";\n\nclass App extends React.Component{\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick={this.props.actions.jianshao}>按我</button>\n\t\t\t\t\n\t\t\t\t{this.props.v}\n\n\t\t\t\t<button onClick={this.props.actions.zengjia}>按我</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(\n\t(state)=>{\n\t\treturn {\n\t\t\t"v" : state\n\t\t}\n\t},\n\t(dispatch)=> ({ "actions" : bindActionCreators(actions,dispatch) })\n)(App);\n')])])]),n("p",[t._v("​\t这里的actions是一个对象，是一个和外部文件actions有相同key的对象。actions暴露几个action creator此时这个actions对象就有几个key。")]),t._v(" "),n("p",[t._v("​\tRedux颠覆了组件之间传值的概念！")]),t._v(" "),n("p",[t._v("​\t调色板、购物车、Todo")]),t._v(" "),n("h3",{attrs:{id:"组件内部state和全局state"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件内部state和全局state","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("strong",[t._v("组件内部state和全局state")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/state02.png",alt:""}})]),t._v(" "),n("p",[t._v("​\t父子组件之间，现在很少通过传入一个函数比如setA()，来让子组件控制父组件的值了；也很少涉及子组件将值传回给父组件。因为现在有了全局的state。子组件只需要更改全局的state（通过dispatch个action来更改），父组件就能够检测到这个改变。")]),t._v(" "),n("p",[t._v("​\t组件内部的state还是有用的，用来做自己的内部的值，一切和全局无关的值都可以做内部的state。一旦值和全局有关，此时想成“是这个组件的返回值”。")]),t._v(" "),n("h4",{attrs:{id:"调色板-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调色板-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 调色板")]),t._v(" "),n("p",[t._v("​\t现在使用jquery可以通过npm来安装，而不是bower或者下载。")]),t._v(" "),n("p",[t._v("​\t此时jQuery可以和CMD规范比如webpack构建工具完美结合，"),n("strong",[t._v("jQuery向外export default了自己的jquery函数（$函数）")]),t._v("。")]),t._v(" "),n("p",[t._v("​\t组件的数据三兄弟：state、context、props不管是谁发生改变，都会引发render()执行，视图会被重绘（被DIFF算法Virtual DOM计算之后，最小量重绘）。但是，构造函数不会重新执行。*"),n("em",[t._v("所以我们不管基于什么理由，都不需要将全局的状态，用自己组件的state接收。而仅需要用connect链接一下全局store，然后使用this.props.*"),n("em",[t._v("即可。这样代码又简单，效果又正确")])]),t._v("。")]),t._v(" "),n("p",[t._v("​\t注意操作DOM必须要在componentDidMount上面进行，构造器运行的时候还没有上树呢！")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('componentDidMount(){\n\t$(this.refs.barWrap).find("h1").html(Math.random())\n}\n')])])]),n("p",[t._v("​\t涉及全局的值直接通过this.props.action.change()来发送action改变全局的state。自己用的state，不需要告诉全局。")]),t._v(" "),n("h4",{attrs:{id:"购物车"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#购物车","aria-hidden":"true"}},[t._v("#")]),t._v(" 购物车")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/gangking/myBlog/master/docs/static/img/gouwuche.png",alt:""}})]),t._v(" "),n("p",[t._v("​\t注意一个事情，就是一个类被connect()(CartBar)处理过，此时其他props的改变，不会引发这个render()的更新了。这是正确的。因为connect()表示我现在要读取全局的state。所以引发视图的改变，仅能通过store的改变。")]),t._v(" "),n("p",[t._v("​\t要会利用map、filter简化reducer的编写。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('if(action.type == "ADD"){\n \t\treturn  {\n \t\t\t...state,\n \t\t\t"cart" : state.cart.map(function(item,index){\n \t\t\t\treturn index == action.index ? {...item,"amount" : item.amount + 1} : item;\n \t\t\t})\n \t\t};\n \t}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport {connect} from "react-redux";\nimport CartBar from "./CartBar.js";\nimport * as actions from "./actions.js";\nimport {bindActionCreators} from "redux";\n\nclass App extends React.Component{\n\tconstructor(){\n\t\tsuper();\t\n\n\t}\n\n\tgetTotal(){\n\t\tvar sum = 0;\n\t\tthis.props.cart.forEach(function(item){\n\t\t\tsum += item.price * item.amount;\n\t\t});\n\t\treturn sum;\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>购物车</h1>\n\t\t\t\t<p>{JSON.stringify(this.props.cart)}</p>\n\n\t\t\t\t{\n\t\t\t\t\tthis.props.cart.map((item,index)=>{\n\t \t\t\t\t\treturn <CartBar key={index} item={item} index={index} actions={this.props.actions} />\n\t \t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\t<hr/>\n\t\t\t\t<p>总价格: {this.getTotal()}</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default connect(\n\t(state) => {\n\t\treturn {\n\t\t\t"cart" : state.cart\n\t\t}\n\t},\n\t(dispatch) => {\n\t\treturn {\n\t\t\t"actions" : bindActionCreators(actions , dispatch)\n\t\t}\n\t}\n)(App);\n')])])]),n("p",[t._v("CartBar.js")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport {connect} from "react-redux";\n\nclass CartBar extends React.Component{\n\tconstructor(){\n\t\tsuper();\n\t}\n \n\trender(){\n\t\treturn (\n\t\t\t<div className="cartBar">\n\t\t\t\t<div className="box">\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{this.props.item.name}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t单价：{this.props.item.price}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t数量：{this.props.item.amount}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t小计：{this.props.item.price * this.props.item.amount}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<p>\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype="button" \n\t\t\t\t\t\tvalue="-" \n\t\t\t\t\t\tonClick={(this.props.actions.minus).bind(this,this.props.index)}\n\t\t\t\t\t\tdisabled = {this.props.item.amount == 0}\n\t\t\t\t\t/>\n\t\t\t\t\t<input type="button" value="+" onClick={(this.props.actions.add).bind(this,this.props.index)}/>\n\t\t\t\t</p>\n\t\t\t\t<hr/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default CartBar;\n')])])]),n("h4",{attrs:{id:"todo待做事项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#todo待做事项","aria-hidden":"true"}},[t._v("#")]),t._v(" Todo待做事项")]),t._v(" "),n("p",[t._v("这是facebook的官方案例，主要有几个新知识点")]),t._v(" "),n("p",[t._v("combineReducers() 合并reducer")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const rootReducer = combineReducers({\n  todos,   //标准reducer\n  another //标准reducer\n})\n")])])]),n("p",[t._v("数组的reduce方法：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var arr = [\n\t1,2,3,4,5\n];\n\nvar sum = arr.reduce(function(a = 0 ,item){\n\treturn a + item;\n});\n\nconsole.log(sum);  //15\n")])])]),n("p",[t._v("item依次成为数组每一项，a成为上一次迭代的返回值。")]),t._v(" "),n("p",[t._v("寻找数组中最大值：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var arr = [4,4,5,4,545,234,24,345,234];\n\nvar id = arr.reduce((a = 0,item) => Math.max(a,item) , -1);\nconsole.log(id)\n")])])]),n("h2",{attrs:{id:"react组件封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react组件封装","aria-hidden":"true"}},[t._v("#")]),t._v(" React组件封装")]),t._v(" "),n("p",[t._v("​\tReact课，非常爱封装组件，不像Angular，Angular喜欢用指令、控制器、服务把一个程序拆分出去，对E级别的组件的热情不是很高。但是React很爱封装组件，毕竟封装组件的过程简单的。")]),t._v(" "),n("p",[t._v("​\tApp、Header、Main、InfoBar、Item。")]),t._v(" "),n("p",[t._v("​\t学习Redux之后，组件就被分为了两种："),n("strong",[t._v("被connect()()加工过的")]),t._v("，"),n("strong",[t._v("一种没有被加工过的")]),t._v("。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("被connect()()加工过的，将全局state和props融合在了一起，将含dispatch的actions和props融合在了一起。组件可以直接“上达天听”。")])]),t._v(" "),n("li",[n("p",[t._v("没有加工过的组件，只能靠父组件给自己传props，自己是看不见全局state的。")])])]),t._v(" "),n("p",[t._v("注意：")]),t._v(" "),n("p",[t._v("1）全局的state你在组件内部直接使用即可，没有必要用自己组件的local state再承接一下。")]),t._v(" "),n("p",[t._v("正确的示范：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("render(){\n{this.props.todos.map((item)=>{\n    return <li>{item.content}</li>\n})}\n}\n\nconnect((state)=>{\nreturn {\n     todos : state.todos\n}\n})()\n")])])]),n("ul",[n("li",[n("p",[t._v("map()方法：“照葫芦画个新瓢儿”。")])]),t._v(" "),n("li",[n("p",[t._v("filter()方法：“过筛子”，true有这项，false没有这项。")])]),t._v(" "),n("li",[n("p",[t._v("reduce()方法：“叠加积累”")])]),t._v(" "),n("li",[n("p",[t._v("forEach()方法：遍历")])])]),t._v(" "),n("p",[t._v("错误的示范：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("constructor(){\nthis.state = {todos : this.props.todos };\n}\n")])])]),n("p",[t._v("2）如果要用local state，此时这个状态一定是全局无关的。")]),t._v(" "),n("p",[t._v("比如Main.js组件中，使用了一个filteredTodos这是一个数组，这个数组如何被筛选？被一个local state控制")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('this.state = {filter : "全部显示"}\n')])])]),n("p",[t._v("​\t当这个local state改变了，此时过滤条件就变了，界面也就改变了。")]),t._v(" "),n("p",[t._v("3）你可能已经发现了，重复性的、用map生成的组件，一般都不用connect()()处理。")]),t._v(" "),n("p",[t._v("购物车中，我们用map函数创建了CartBar组件，此时CartBar就是一个普通React组件，没有用connect函数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("{\n\tthis.props.cart.map((item,index)=>{\n\t  return <CartBar key={index} item={item} index={index} actions={this.props.actions} />\n\t})\n}\n")])])]),n("p",[t._v("在todo中，我们用map函数创建了Item组件，此时Item就是一个普通的React组件。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<ul>\n\t{\n\t\tfilteredTodos.map((item,index)=>{\n\t\t  return <li key={index}><Item item={item} key={index} actions={this.props.actions} /></li>\n\t\t})\n\t}\n</ul>\n")])])]),n("p",[t._v("4） 如果一个组件用了connect()()处理过，此时这个组件一般不会通过自己的非用connect传入的props改变而影响视图改变。")]),t._v(" "),n("p",[t._v("connect()()处理的组件我们只关心它与全局state的关系，全局state如何更新它的视图。")]),t._v(" "),n("p",[t._v("这个组件一般不通过父组件给自己传入props。")]),t._v(" "),n("p",[n("strong",[t._v("现在一定要区分开：connect()()组件就是看全局的，没有connect的组件就看父亲的")]),t._v("。")]),t._v(" "),n("p",[t._v("VUEX和Redux类似，也是数据的单向流动，更简化了Redux的语法。")]),t._v(" "),n("h2",{attrs:{id:"redux中异步的处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redux中异步的处理","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux中异步的处理")]),t._v(" "),n("p",[t._v("看官方DEMO，也要看API。")]),t._v(" "),n("p",[t._v("Redux官方文档特别靠谱，https://github.com/reactjs/redux/tree/master/docs")]),t._v(" "),n("p",[t._v("Redux的官方demo特别靠谱！")]),t._v(" "),n("h3",{attrs:{id:"bindactioncreators"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bindactioncreators","aria-hidden":"true"}},[t._v("#")]),t._v(" bindActionCreators")]),t._v(" "),n("p",[t._v("先补充几个这几天遇见的API，我们只用了，没有看文档。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("connect(null,(dispatch){\nreturn {\n    actions : bindActionCreators(actions , dispatch)\n}\n})(App)\n")])])]),n("p",[t._v("https://github.com/reactjs/redux/blob/master/docs/api/bindActionCreators.md")]),t._v(" "),n("p",[t._v("​\t将一个值是action creators的对象，转换为具有同样键名的对象，但是这个新对象的值是已经被dispatch包裹了的action，这样一来他们将可以直接被调用。")]),t._v(" "),n("h3",{attrs:{id:"combinereducers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#combinereducers","aria-hidden":"true"}},[t._v("#")]),t._v(" combineReducers")]),t._v(" "),n("p",[t._v("​\t当你的app变得很大、很复杂的时候，你可能需要将reducing函数分开，分开成为一个个独立的函数，每一个函数都是state的独立部分。")]),t._v(" "),n("h3",{attrs:{id:"redux中间件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redux中间件","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux中间件")]),t._v(" "),n("p",[t._v("先看官方API，一会儿结合案例再去理解applyMiddleware(...middleware)")]),t._v(" "),n("ul",[n("li",[t._v("中间件被建议用于拓展用户自定义的Redux功能。")]),t._v(" "),n("li",[t._v("中间件让你的store的dpispath被包裹起来，从而让程序变得有趣和高效。")]),t._v(" "),n("li",[t._v("中间件关键的特质是他们是可以组合的。")]),t._v(" "),n("li",[t._v("多个中间件可以被综合在一起使用，这些中间件不需要知道在chain（链条）中它前面、后面人的事情。\n中间件最通用的一个功能是提供对异步action的支持，这些都不需要写非常复杂的代码，也不需要第三方库。")]),t._v(" "),n("li",[t._v("让你的异步action，变得和同步action一致了。")]),t._v(" "),n("li",[t._v("比如，有一个中间件叫做redux-thunk，这个东西让你的action creators变得被dispatch函数控制了。")]),t._v(" "),n("li",[t._v("redux-thunk中，action creators都必须注入一个dispatch对象，这个对象现在可以异步被调用。")])]),t._v(" "),n("p",[t._v("这些函数称为thunks")]),t._v(" "),n("h3",{attrs:{id:"webpack-dev-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-server","aria-hidden":"true"}},[t._v("#")]),t._v(" webpack-dev-server")]),t._v(" "),n("p",[t._v("​\t现在我们编程，在异步上发生了什么调用。我们必须有一个服务器才能发出Ajax。")]),t._v(" "),n("p",[t._v("​\twebpack-dev-server是一个小型的Node.js Express服务器。是我们搞前端的小服务器，不能用于生产环境，只能用于开发。webpack-dev-server是在webpack基础上，提供了一个小服务器。含有webpack的功能。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ npm install --save-dev webpack-dev-server\n$ npm install -g webpack-dev-server\n")])])]),n("p",[t._v("此时用命令：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ webpack-dev-server --content-base ./\n")])])]),n("p",[t._v("就可以开启8080端口")]),t._v(" "),n("p",[t._v("但是我们一般这么用：改变webpack.config.js文件，增加一行语句：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('const path = require(\'path\');\nconst webpack = require("webpack");\n \nmodule.exports = {\n    entry: "./app/app.js",  \n    output: {\n        path: path.resolve(__dirname, "dist"),\n        publicPath:"/dev/",\n        filename: "all.js"\n    },\n    module: {\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.js$/,\n\t\t\t\texclude: /(node_modules|bower_components)/ ,\n\t\t\t\tuse: {\n\t\t\t\t\tloader: \'babel-loader\',\n\t\t\t\t\toptions: {\n\t\t\t\t  \t\tpresets: [\'es2015\',\'react\'],\n\t\t\t\t  \t\tplugins: ["transform-object-rest-spread"]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t},\n\twatch : true\n};\n')])])]),n("p",[t._v("在package.json文件中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n  "name": "02",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "start": "webpack-dev-server --content-base ./"\n  },\n  "author": "",\n  "license": "ISC",\n  "devDependencies": {\n    "babel-core": "^6.24.1",\n    "babel-loader": "^6.4.1",\n    "babel-plugin-transform-object-rest-spread": "^6.23.0",\n    "babel-preset-es2015": "^6.24.1",\n    "babel-preset-react": "^6.24.1",\n    "jquery": "^3.2.1",\n    "react": "^15.5.4",\n    "react-dom": "^15.5.4",\n    "react-redux": "^5.0.4",\n    "redux": "^3.6.0",\n    "redux-logger": "^3.0.1",\n    "webpack": "^2.4.1",\n    "webpack-dev-server": "^2.4.2"\n  }\n}\n\n')])])]),n("p",[t._v("此时运行：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ npm run start\n")])])]),n("h3",{attrs:{id:"redux-thunk"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redux-thunk","aria-hidden":"true"}},[t._v("#")]),t._v(" redux-thunk")]),t._v(" "),n("p",[t._v("​\t装完webpack-dev-server之后，我们言归正传，我们说自己写一个异步流，你会发现我们无法完成：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('export const add = () => {\n\t$.get("/shu.txt",function(data){\n\t\treturn {type : "ADD" , number : data}  //return，触发的内层函数的return\n\t});\n};\n\n')])])]),n("p",[t._v("所以必须使用redux-thunk中间件来完成异步流的操作：")]),t._v(" "),n("p",[t._v("App.js文件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport {render} from "react-dom";\nimport {Provider} from "react-redux";\nimport {createStore , applyMiddleware} from "redux";\nimport reducer from "./reducers/index.js";\nimport Main from "./components/Main.js";\n+ import thunk from "redux-thunk";\n\n//任何对state的改变之前都会顺序执行中间件。\n+ let store = createStore(reducer,applyMiddleware(thunk));\n\nrender(\n\t<Provider store={store}>\n\t\t<div>\n\t\t\t<Main></Main>\n\t\t</div>\n\t</Provider>\n\t,\n\tdocument.getElementById("container")\n)\n')])])]),n("p",[t._v("​\tMain.js中，不需要用connect()函数的第二个参数，此时由于我们已经有了中间件，我们的任何一个组件的props中都直接可以使用dispatch函数了。所以"),n("strong",[t._v("redux-thunk帮助我们让所有的组件的props中存在了dispatch方法，注意这个组件一定要被connect处理。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport {connect} from "react-redux";\nimport {bindActionCreators} from "redux";\n\nclass Main extends React.Component{\n\tconstructor({a,dispatch}){\n\t\tsuper();\n\n\t}\n\n\tadd(){\n\t\tvar self = this;\n\t\t$.get("/shu.txt",function(number){\n+\t\t\tself.props.dispatch({"type" : "ADD" , number : Number(number)});\n\t\t});\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>{this.props.a}</h1>\n\t\t\t\t<input type="button" value="点击我加1" onClick={(this.add).bind(this)}/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n+ export default connect(\n+ \t(state) => {\n+ \t\treturn {\n+ \t\t\t"a" : state.todoReducer\n+ \t\t};\n+ \t}\n+ )(Main);\n')])])]),n("p",[t._v("写法不好，因为actions.js就没用了，你的actions不能外置为统一的文件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('$.get("/shu.txt",function(data){\n\tvar number = Number(data);\n\tself.props.dispatch({"type" : "ADD" , "number" : number});\n});\n')])])]),n("p",[t._v("平时我们写的Action Creator：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('export const minus = () => {return {"type" : "MINUS"}};\n')])])]),n("p",[t._v("现在异步的Action Creator不要直接返回Action，而是返回一个携带dispatch 的函数：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('export const add = () => (dispatch) => {\n\t$.get("/shu.txt",function(data){\n\t\tvar number = Number(data);\n+\t\tdispatch({"type" : "ADD" , "number" : number});\n\t});\n}\n\n')])])]),n("p",[t._v("​\t这个函数相当于“延长”了dispatch持续时间，就是说我要dispatch出一个action，但是立即我发不出，因为参数我需要从Ajax获得。此时返回一个携带dispatch函数的写法，相当于“延长”了dispatch。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('现在我们做一个组件，我们有点和之前不一样：\n1） 现在connect中一般不写第二个参数了，就是说省略掉MapDispatchToProps；\n2） 在程序开头用import {枚举} from "action.js"  枚举这个组件中可能用到的action；\n3） 点击按钮要发送action了，此时不需要考虑它是同步的还是异步的，一律使用一样的语法来发送：\nthis.props.dispatch(add());\nthis.props.dispatch(minus())\n')])])]),n("p",[t._v("​\t也就是说，在视图、组件层面，我们丝毫看不见业务的底层实现。actions才能看见谁是同步的，谁是异步的。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from "react";\nimport {connect} from "react-redux";\nimport {add , minus} from "../actions/actions.js";\n\nclass Main extends React.Component{\n\tconstructor({a,dispatch}){\n\t\tsuper();\n\t}\n\n\tadd(){\n\t\tthis.props.dispatch(add());\n\t};\n\n\tminus(){\n\t\tthis.props.dispatch(minus());\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>{this.props.a}</h1>\n\t\t\t\t<button onClick={(this.add).bind(this)}>按我加一个数</button>\n\t\t\t\t<button onClick={(this.minus).bind(this)}>按我减1</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default connect(\n\t(state)=> {\n\t\treturn {\n\t\t\ta : state\n\t\t}\n\t}\n)(Main);\n')])])]),n("p",[t._v("actions.js:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('export const add = () => (dispatch) => {\n\t$.get("/shu.txt",function(data){\n\t\tvar number = Number(data);\n\t\tdispatch({"type" : "ADD" , "number" : number});\n\t});\n}\n\nexport const minus = () => ({"type" : "MINUS" });\n')])])]),n("p",[t._v("API上的话：")]),t._v(" "),n("ul",[n("li",[t._v("Redux Thunk中间件允许你书写一个action creator，这个action creator不需要返回action，而仅需要返回一个函数。")]),t._v(" "),n("li",[t._v("thunk这个东西可以延迟dispatch一个action的事件，仅仅当确定参数已经返回了，才发送action。")]),t._v(" "),n("li",[t._v("内嵌函数接受两个参数，dispatch、getStateolas;")])]),t._v(" "),n("h2",{attrs:{id:"json-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#json-server","aria-hidden":"true"}},[t._v("#")]),t._v(" JSON-server")]),t._v(" "),n("p",[t._v("这是一个虚拟的数据库服务器，可以轻松制作一套假的RESTful API。此时就不需要数据库了。")]),t._v(" "),n("p",[t._v("这是前端的小玩意儿，不能真正上线使用。")]),t._v(" "),n("p",[t._v("https://github.com/typicode/json-server")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("cnpm install -g json-server\n")])])]),n("p",[t._v("就可以使用json-server命令了。")]),t._v(" "),n("p",[t._v("创建一个json文件，database.json")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n  "students": [\n    {\n      "id": 10001,\n      "sex": "男",\n      "name": "小明"\n    },\n    {\n      "id": 10002,\n      "name": "小红",\n      "sex": "女"\n    }\n  ],\n  "courses": [\n    {\n      "id": 1,\n      "name": "语文课"\n    }\n  ]\n}\n')])])]),n("p",[t._v("然后打开CMD，输入")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ json-server --watch database.json --port 9000\n")])])]),n("p",[t._v("表示以database.json文件作为数据库，将RESTful API运行在9000端口。")]),t._v(" "),n("p",[t._v("访问：http://127.0.0.1:9000/students")]),t._v(" "),n("p",[t._v("这些不用看，easy mock更好用："),n("a",{attrs:{href:"https://www.easy-mock.com/login",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.easy-mock.com/login"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"react开发模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react开发模式","aria-hidden":"true"}},[t._v("#")]),t._v(" React开发模式")]),t._v(" "),n("p",[t._v("React玩命的封装组件，组件不仅仅体现在了HTML的复用上、JS的封装上，数据流也非常清晰。父组件掌握的数据多，子组件掌握的数据少。有了Redux配合，所有组件又可以操作全局的state，又可以操作自己的local state。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("React + Redux本质就是负责数据拆分的，"),n("strong",[t._v("DOM界面被拆分的同时，对数据的操作也被拆分了")]),t._v("。数据的单向流动。")])]),t._v(" "),n("li",[n("p",[t._v("Angular的哲学是HTML大补丁，所以Angular提供了很多ng-repeat、ng-pattern、ng-model等等这种小指令，但是在全局的数据的拆分上，没有体现的。全局的数据在所谓的“服务”中，非常不好用。")])]),t._v(" "),n("li",[n("p",[t._v("Vue吸取了两者的优点，又有指令，又有数据的单向流动。封装性更强。")])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("this.props.album\t\t//在connect配合下，得到全局state\nthis.state.onEdit;    //得到自己的state\n")])])]),n("p",[t._v("​\t所以React中更加注重数据。React中也把一个尴尬的事儿解决了，就是数据和DOM的事儿：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("如果DOM和数组是对应关系，比如数组增加一项，")])]),n("li",[t._v("就多一项，数组改变顺序，li也改变了顺序，此时要用React操作DOM。"),n("p")]),t._v(" "),n("li",[n("p",[t._v("如果这里的DOM效果和数据没有对应关系，此时用jQuery。")])])]),t._v(" "),n("p",[t._v("React + Redux中，jQuery更加灵活。你比如说Angular中封装了AngularDOM对象，")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('angular.element($("#box")).append();\n')])])]),n("p",[t._v("React中没有React DOM对象。因为React就是专注于做组件，做数据的单向流动。")]),t._v(" "),n("h2",{attrs:{id:"react路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react路由","aria-hidden":"true"}},[t._v("#")]),t._v(" React路由")]),t._v(" "),n("p",[t._v("实现React路由可以使用：")]),t._v(" "),n("p",[t._v("https://github.com/ui-router/react    \t\t→ ui-router的react版本")]),t._v(" "),n("p",[t._v("https://reacttraining.com/react-router/  \t→ 官方维护的一个router")]),t._v(" "),n("h3",{attrs:{id:"react-router基本使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-router基本使用","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("strong",[t._v("React-router基本使用")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm install --save react-router-dom\n")])])]),n("p",[t._v('react-router最大的特点就是路由容器和地址是写在一个组件上的，没有所谓的路由清单。"')]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from \'react\';\nimport { render } from \'react-dom\';\nimport { BrowserRouter as Router,Route,Link } from \'react-router-dom\'\nimport App from \'./App.js\';\n\nconst Home = () => (\n  <div>\n    <h2>Home</h2>\n  </div>\n);\n\nconst About = () => (\n  <div>\n    <h2>About</h2>\n  </div>\n);\n\n\nrender(\n\t(\n\t\t<Router>\n\t\t    <div>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><Link to="/">Home</Link></li>\n\t\t\t\t\t<li><Link to="/about">About</Link></li>\n\t\t\t\t</ul>\n\t\t\t\t<hr/>\n\t\t\t\t<Route exact path="/" component={Home}/>\n\t\t\t\t<Route path="/about" component={About}/>\n\t\t\t</div>\n\t    </Router>\n\t)\n\t,\n\tdocument.getElementById("container")\n);\n')])])]),n("p",[t._v("路由容器和路由清单合二为一了，Route组件又能够表示这是一个组件的容器，又能表示路由清单。")]),t._v(" "),n("p",[t._v("子组件的使用和参数的使用：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const Topics = ({ match }) => (\n  <div>\n   \n    <h2>Topics</h2>\n    <ul>\n      <li>\n        <Link to={`${match.url}/rendering`}>\n          rendering\n        </Link>\n      </li>\n      <li>\n        <Link to={`${match.url}/components`}>\n          Components\n        </Link>\n      </li>\n      <li>\n        <Link to={`${match.url}/props-v-state`}>\n          Props v. State\n        </Link>\n      </li>\n    </ul>\n    <Route path={`${match.url}/:topicId`} component={Topic}/>\n    \n    <Route exact path={match.url} render={() => (\n      <h3>Please select a topic.</h3>\n    )}/>\n  </div>\n)\n\nconst Topic = ({ match }) => (\n  <div>\n    <h3>识别到的URL参数：{match.params.topicId}</h3>\n  </div>\n)\n")])])]),n("h3",{attrs:{id:"react-router路由规划"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-router路由规划","aria-hidden":"true"}},[t._v("#")]),t._v(" React-router路由规划")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("┣ App.js\n┣ main.js\n┣ yinyue\n┣    ┣   Yinyue.js\n┣ home\n┣    ┣   Home.js\n┣ xinwen\n┣    ┣   Xinwen.js\n┣    ┣   XinwenArticle.js\n")])])]),n("p",[n("strong",[t._v("main.js：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React from 'react';\nimport { render } from 'react-dom';\nimport { Route , Link , HashRouter as Router} from 'react-router-dom'\nimport App from './App.js';\n\nrender(\n  <Router hashType=\"hashbang\">\n  \t<App></App>\n  </Router>,\n  document.getElementById(\"container\")\n);\n\n")])])]),n("p",[n("strong",[t._v("App.js：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from \'react\';\nimport Yinyue from "./yinyue/Yinyue.js";\nimport Xinwen from "./xinwen/Xinwen.js";\nimport Home from "./home/Home.js";\nimport { Route , Link } from \'react-router-dom\'\n\nexport default () => {\n\treturn (\n\t\t<section>\n\t\t\t<header>\n\t\t\t\t<Link to="/">首页</Link>\n\t\t\t\t<Link to="/yinyue">音乐</Link>\n\t\t\t\t<Link to="/xinwen">新闻</Link>\n\t\t\t</header>\n\t\t\t<section className="main">\n\t\t\t\t<Route exact path="/" component={Home}></Route>\n\t\t\t\t<Route path="/yinyue" component={Yinyue}></Route>\n\t\t\t\t<Route path="/xinwen" component={Xinwen}></Route>\n\t\t\t</section>\n\t\t</section>\n\t);\n}\n')])])]),n("p",[n("strong",[t._v("xinwen/Xinwen.js")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React from \'react\';\nimport { Route , Link , NavLink } from \'react-router-dom\';\nimport XinwenArticle from "./XinwenArticle";\n\nconst data = [\n\t{ "id" : 1 , "title" : "新闻1" },\n\t{ "id" : 2 , "title" : "新闻2" },\n\t{ "id" : 3 , "title" : "新闻3" },\n\t{ "id" : 4 , "title" : "新闻4" }\n];\n\nexport default ({match}) => {\n\treturn (\n\t\t<section>\n\t\t\t<h1>我是新闻栏目{JSON.stringify(match)}</h1>\n\t\t\t{\n\t\t\t\tdata.map((item,index) => {\n\t\t\t\t\treturn <NavLink activeClassName="cur" key={index} to={match.path + "/" + item.id}>{item.title}</NavLink>\n\t\t\t\t})\n\t\t\t}\n\t\t\t<Route path={match.path + "/:newsid"} component={XinwenArticle}></Route>\n\t\t</section>\n\t);\n}\n\n')])])]),n("p",[n("strong",[t._v("/xinwen/XinwenArticle.js：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React from 'react';\n\nexport default ({match}) => {\n\treturn (\n\t\t<h1>我是新闻{JSON.stringify(match.params.newsid)}</h1>\n\t)\n}\n")])])]),n("h3",{attrs:{id:"和redux结合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#和redux结合","aria-hidden":"true"}},[t._v("#")]),t._v(" 和Redux结合")]),t._v(" "),n("p",[t._v("React-Router-Redux用于将路由和Redux结合。")]),t._v(" "),n("p",[t._v("https://github.com/reactjs/react-router-redux")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React from 'react';\nimport { render } from 'react-dom';\nimport { combineReducers , createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { Route , Link , HashRouter as Router , browserHistory } from 'react-router-dom'\n+ import { routerReducer , syncHistoryWithStore } from 'react-router-redux';\n+ import createHistory from 'history/createHashHistory'\nimport reducer from './reducers/index.js';\nimport App from './components/App.js';\n\n+ const store = createStore(\n+   combineReducers({\n+     reducer,\n+     routing: routerReducer\n+   })\n+ );\n\nrender(\n+ \t<Provider store={store} history={createHistory()}>\n\t  <Router hashType=\"hashbang\" >\n\t  \t<App></App>\n\t  </Router>\n\t</Provider>\n  ,\n  document.getElementById(\"container\")\n);\n\n")])])]),n("h3",{attrs:{id:"react-router-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-router-2","aria-hidden":"true"}},[t._v("#")]),t._v(" React-router 2")]),t._v(" "),n("p",[t._v("阮一峰的博客学习：")]),t._v(" "),n("p",[t._v("http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu")]),t._v(" "),n("p",[t._v("这篇完结~")])])},[],!1,null,null,null);e.default=r.exports}}]);