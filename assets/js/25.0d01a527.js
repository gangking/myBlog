(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{211:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"项目心得"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目心得","aria-hidden":"true"}},[e._v("#")]),e._v(" 项目心得")]),e._v(" "),n("h2",{attrs:{id:"styled-components"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#styled-components","aria-hidden":"true"}},[e._v("#")]),e._v(" Styled-Components")]),e._v(" "),n("ul",[n("li",[e._v("css文件一旦在一个文件中引用之后，在其他组件中都生效")]),e._v(" "),n("li",[e._v("所以为了避免样式冲突一般，采用第三方模块插件对样式文件进行管理比较好")])]),e._v(" "),n("p",[e._v("安装：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm i styled-components -S\n")])])]),n("p",[e._v("基本配置：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("style.js：\nimport { createGlobalStyle } from 'styled-component';\n\ncreateGlobalStyle`\n    body {\n        margin: 0;\n        padding: 0;\n        font-family: sans-serif;\n        background: green;\n    }\n`\n")])])]),n("h3",{attrs:{id:"全局样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局样式","aria-hidden":"true"}},[e._v("#")]),e._v(" 全局样式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1、利用createGlobalStyle导出一个样式对象；\nexport const GlobalstyleIcon = createGlobalStyle`\n\t...书写样式\n`;\n2、在主容器组件App.js中以标签组件的形式引入即可\nimport { Globalstyle } from './style';\nimport { GlobalstyleIcon } from './statics/iconfont/iconfont.js';\n\nrender () {\n    return (\n      <div>\n        <Globalstyle></Globalstyle>\n        <GlobalstyleIcon></GlobalstyleIcon>\n        <Header></Header>\n      </div>\n    );\n  }\n")])])]),n("h3",{attrs:{id:"局部样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#局部样式","aria-hidden":"true"}},[e._v("#")]),e._v(" 局部样式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("以标签的形式引入即可，例：\n1、在style.js中引入styled-compnents\nimport styled from 'styled-components';\n\nexport const HeaderWrapper = styled.div`\n    height: 56px;\n    background: red;\n`;\n相当于新建 HeaderWrapper 标签；\n\n2、在Header.js中引入即可\nimport React from 'react';\nimport { HeaderWrapper } from './style'\n\nclass Header extends React.Component {\n  render () {\n    return (\n      <HeaderWrapper>header</HeaderWrapper>\n    )\n  }\n}\n")])])]),n("h3",{attrs:{id:"scss语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scss语法","aria-hidden":"true"}},[e._v("#")]),e._v(" scss语法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1、&.表示同级元素\n")])])]),n("h2",{attrs:{id:"动画过渡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动画过渡","aria-hidden":"true"}},[e._v("#")]),e._v(" 动画过渡")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("安装\nnpm i react-transition-group - S\n\n引入：\nimport { CSSTransition } from 'react-transition-group';\n\n<CSSTransition\n     timeout={200}\n     in={this.state.focused}\n     classNames='slide'\n>\n<NavSearch\n     className={this.state.focused ? 'focused' : ''}\n     onFocus={this.handleInputFocus}\n     onBlur={this.handleInputBlur}\n/>\n</CSSTransition>\n\n样式放在SearchWrapper下面\n.slide-enter {\n      transition: all .2s ease-out\n}\n\n.slide-enter-active{\n      width: 250px;\n}\n\n.slide-exit {\n      transition: all .2s ease-out\n}\n\nslide-exit-active{\n      width: 160px;\n}\n推荐放在NavSearch中，前面追加&.\n表示同级元素\n")])])]),n("h2",{attrs:{id:"数据优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据优化","aria-hidden":"true"}},[e._v("#")]),e._v(" 数据优化")]),e._v(" "),n("h3",{attrs:{id:"react-redux进行应用数据管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-redux进行应用数据管理","aria-hidden":"true"}},[e._v("#")]),e._v(" React-Redux进行应用数据管理")]),e._v(" "),n("p",[e._v("安装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm i react-redux -S\nnpm i redux -S\n\n- store\n++ index.js\n++ reducer.js\n\nApp.js\nimport store from './store';\nimport { Provider } from 'react-redux';\n\n<Provider store={store}>\n   <Header></Header>\n</Provider>\n\n- common\n-- header\n--- index.js\n// 将store中所有数据映射到props\nconst mapStateToProps = (state) => {\n  return {\n    focused: state.focused\n  }\n}\n\n// store.dispatch 挂载到 props上\nconst mapDispathToProps = (dispatch) => {\n  return {\n  }\n}\nexport default connect(mapStateToProps, mapDispathToProps)(Header);\n同时就可以去掉 this.state了,改成this.props\n")])])]),n("h2",{attrs:{id:"性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能优化","aria-hidden":"true"}},[e._v("#")]),e._v(" 性能优化")]),e._v(" "),n("h3",{attrs:{id:"purecomponent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#purecomponent","aria-hidden":"true"}},[e._v("#")]),e._v(" PureComponent")]),e._v(" "),n("p",[e._v("当reducer中某个数据发生变化时，主组件的render主函数都会被重新执行，这样损耗性能。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("shouldComponentUpdate()\n只有当与我这个组件相关的内容发生变化时，组件才重新被渲染；\n但是每个组件中都这么写的话，未免太麻烦了，所以react内置了\n一个PureComponent\n表示一个纯组件\n\n\n与Component区别：\n底层实现了一个shouldComponentUpdate了，不需要再手写了\n\n例如：\nclass Writer extends React.PureComponent {\n  render () {\n    return (\n      <WriterWrapper>\n        Writer\n      </WriterWrapper>\n    )\n  }\n}\n\n注意：\n\t1、必须是组件数据都是immutable数据才适合这个搭配\n\t2、否则可能会遇坑\n")])])]),n("h3",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[e._v("#")])])])},[],!1,null,null,null);t.default=r.exports}}]);