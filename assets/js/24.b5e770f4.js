(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{201:function(t,e,n){"use strict";n.r(e);var a=n(0),r=Object(a.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"react简书项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react简书项目","aria-hidden":"true"}},[t._v("#")]),t._v(" React简书项目")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.jianshu.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("按照简书官网去做一个React项目"),n("OutboundLink")],1),t._v(" "),n("a",{attrs:{href:"https://github.com/gangking/jianshu",target:"_blank",rel:"noopener noreferrer"}},[t._v("项目源码"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"styled-components与reset-cs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#styled-components与reset-cs","aria-hidden":"true"}},[t._v("#")]),t._v(" Styled-Components与Reset.cs")]),t._v(" "),n("ul",[n("li",[t._v("css文件一旦在一个文件中引用之后，在其他组件中都生效")]),t._v(" "),n("li",[t._v("所以为了避免样式冲突一般，采用第三方模块插件对样式文件进行管理")])]),t._v(" "),n("p",[t._v("安装：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm i styled-components -S\n")])])]),n("h3",{attrs:{id:"基本配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本配置")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("index.js\n去掉index.css文件引入style.js文件\nimport { createGlobalStyle } from 'styled-component';\n\ncreateGlobalStyle`\n    body {\n        margin: 0;\n        padding: 0;\n        font-family: sans-serif;\n        background: green;\n    }\n`\n\ninjectGlobal- 全局样式（已弃用）\n改成：createGlobalStyle(推荐)\n用法是\n\t1、利用createGlobalStyle导出一个样式对象；\nexport const GlobalstyleIcon = createGlobalStyle`\n\t...书写样式\n`;\n\t2、在主容器组件App.js中以标签组件的形式引入即可\nimport { Globalstyle } from './style';\nimport { GlobalstyleIcon } from './statics/iconfont/iconfont.js';\n\nrender () {\n    return (\n      <div>\n        <Globalstyle></Globalstyle>\n        <GlobalstyleIcon></GlobalstyleIcon>\n        <Header></Header>\n      </div>\n    );\n  }\n")])])]),n("h3",{attrs:{id:"样式兼容插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#样式兼容插件","aria-hidden":"true"}},[t._v("#")]),t._v(" 样式兼容插件")]),t._v(" "),n("p",[t._v("​\t网页版的简书，需要在不同的浏览器样式保持一致，所以还需要一个新的第三方插件：")]),t._v(" "),n("p",[t._v("Reset CSS:"),n("a",{attrs:{href:"https://meyerweb.com/eric/tools/css/reset/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://meyerweb.com/eric/tools/css/reset/"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("用法：")]),t._v(" "),n("p",[t._v("​\t复制全局样式至createGlobalStyle即可。")]),t._v(" "),n("p",[t._v("主要是消除在不同浏览器上的默认样式。")]),t._v(" "),n("h2",{attrs:{id:"header"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#header","aria-hidden":"true"}},[t._v("#")]),t._v(" Header")]),t._v(" "),n("p",[t._v("&.指同级样式")]),t._v(" "),n("p",[t._v("基本布局：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- common\n-- header\n+++ Header.js\n+++ style.js\n\n1、在style.js中引入styled-compnents\nimport styled from 'styled-components';\n\nexport const HeaderWrapper = styled.div`\n    height: 56px;\n    background: red;\n`;\n相当于新建 HeaderWrapper 标签；\n\n2、在Header.js中引入即可\nimport React from 'react';\nimport { HeaderWrapper } from './style'\n\nclass Header extends React.Component {\n  render () {\n    return (\n      <HeaderWrapper>header</HeaderWrapper>\n    )\n  }\n}\n\nexport default Header;\n")])])]),n("h3",{attrs:{id:"logo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#logo","aria-hidden":"true"}},[t._v("#")]),t._v(" logo")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import logPic from '../../statics/logo.png'\n\nexport const Logo = styled.a.attrs({\n  href: '/'\n})`\n    position:absolute;\n    top: 0;\n    left: 0;\n    width: 100px;\n    height: 58px; \n    background: url(${logPic});\n    background-size: contain;\n`;\n注意：\n\t图片地址的引用；\n\thref属性还可以在标签中直接设置；\n")])])]),n("h3",{attrs:{id:"导航栏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#导航栏","aria-hidden":"true"}},[t._v("#")]),t._v(" 导航栏")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export const Nav = styled.div`\n    width: 960px;\n    height: 100%;\n    padding-rgiht: 70px;\n    box-sizing: border-box;\n    margin: 0 auto;\n    background: green;\n`\n\n导航栏中的元素样式\nexport const NavItem = styled.div`\n    line-height: 56px;\n    padding: 0 15px;\n    font-size: 17px;\n    color: #333;\n    &.left {\n      float: left;\n    }\n    &.right {\n      float: right;\n      color: #969696;\n    }\n    &.active{\n      color: #ea6f5a;\n    }\n`;\n元素页面引用：\n<NavItem className='left active'>首页</NavItem>\n<NavItem className='left'>下载APP</NavItem>\n<NavItem className='right'>登录</NavItem>\n<NavItem className='right'>Aa</NavItem>\n\n查询输入框样式：\nexport const NavSearch = styled.input.attrs({\n  placeholder: '搜索'\n})`\n    width: 160px;\n    height: 38px;\n    border: 1px solid #ccc;\n    outline: none;\n    border-radius: 19px;\n    background: #eee;\n    margin-top: 9px;\n    padding: 0 20px;\n    box-sizing: border-box;\n    font-size: 14px;\n    margin-left: 20px;\n    &::placeholder {\n      color: #999;\n    }\n`;\n")])])]),n("h3",{attrs:{id:"右侧浮动按钮"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#右侧浮动按钮","aria-hidden":"true"}},[t._v("#")]),t._v(" 右侧浮动按钮")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<Addition>\n    <Button className='waitting'>写文章</Button>\n    <Button className='reg'>注册</Button>\n</Addition>\n\nexport const Addition = styled.div`\n      position: absolute;\n      right:0;\n      top:0;\n      height:56px;\n`;\n\nexport const Button = styled.div`\n      float:right;\n      line-height:38px;\n      border-radius:19px;\n      margin-top:9px;\n      border:1px solid #ec6149;\n      margin-right: 20px;\n      padding: 0 20px;\n      font-size: 14px;\n      &.reg{\n        color:#ec6149;\n      }\n      &.waitting{\n        color: #fff;\n        background: #ec6149;\n      }\n`;\n")])])]),n("h3",{attrs:{id:"使用iconfont嵌入图标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用iconfont嵌入图标","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用iconfont嵌入图标")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.iconfont.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿里图标"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"搜索框样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#搜索框样式","aria-hidden":"true"}},[t._v("#")]),t._v(" 搜索框样式")]),t._v(" "),n("h4",{attrs:{id:"基本样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本样式","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本样式")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('export const SearchWrapper = styled.div`\n    float: left;\n    position: relative;\n    .iconfont{\n      position:absolute;\n      right:5px;\n      bottom:5px;\n      width: 30px;\n      height: 30px;\n      border-radius: 15px;\n      line-height: 30px;\n      text-align: center;\n    }\n`;\n\n<SearchWrapper>\n      <NavSearch />\n      <span className="iconfont">&#xe637;</span>\n</SearchWrapper>\n')])])]),n("h4",{attrs:{id:"动画效果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动画效果","aria-hidden":"true"}},[t._v("#")]),t._v(" 动画效果")]),t._v(" "),n("p",[t._v("数据变，react跟着变")]),t._v(" "),n("h4",{attrs:{id:"获取焦点和失去焦点样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取焦点和失去焦点样式","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取焦点和失去焦点样式")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("搜索框长度变化：\nexport const NavSearch = styled.input.attrs({\n  placeholder: '搜索'\n})`\n    width: 160px;\n    height: 38px;\n    border: 1px solid #ccc;\n    outline: none;\n    border-radius: 19px;\n    background: #eee;\n    margin-top: 9px;\n    padding: 0 30px 0 20px;\n    box-sizing: border-box;\n    font-size: 14px;\n    margin-left: 20px;\n    color: #666;\n    &::placeholder {\n      color: #999;\n    }\n\n    &.focused {\n      width: 250px;\n    }\n`;\n图标背景色：\nexport const SearchWrapper = styled.div`\n    float: left;\n    position: relative;\n    .iconfont{\n      position:absolute;\n      right:5px;\n      bottom:5px;\n      width: 30px;\n      height: 30px;\n      border-radius: 15px;\n      line-height: 30px;\n      text-align: center;\n      &.focused {\n        background: #777;\n        color: white;\n      }\n    }\n`;\n\n页面设置：\n<SearchWrapper>\n    <NavSearch\n        className={this.state.focused ? 'focused' : ''}\n        onFocus={this.handleInputFocus}\n        onBlur={this.handleInputBlur}\n    />\n    <span\n        className={this.state.focused ? 'focused iconfont' : 'iconfont'}\n    >&#xe637;</span>\n</SearchWrapper>\n")])])]),n("h4",{attrs:{id:"实现动画过渡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现动画过渡","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现动画过渡")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("安装\nnpm i react-transition-group - S\n\n引入：\nimport { CSSTransition } from 'react-transition-group';\n\n<CSSTransition\n     timeout={200}\n     in={this.state.focused}\n     classNames='slide'\n>\n     <NavSearch\n        className={this.state.focused ? 'focused' : ''}\n        onFocus={this.handleInputFocus}\n        onBlur={this.handleInputBlur}\n      />\n</CSSTransition>\n\n样式放在SearchWrapper下面\n.slide-enter {\n      transition: all .2s ease-out\n}\n\n.slide-enter-active{\n      width: 250px;\n}\n\n.slide-exit {\n      transition: all .2s ease-out\n}\n\nslide-exit-active{\n      width: 160px;\n}\n推荐放在NavSearch中，前面追加&.\n表示同级元素\n")])])]),n("h2",{attrs:{id:"数据优化（重点）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据优化（重点）","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据优化（重点）")]),t._v(" "),n("h3",{attrs:{id:"react-redux进行应用数据管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-redux进行应用数据管理","aria-hidden":"true"}},[t._v("#")]),t._v(" React-Redux进行应用数据管理")]),t._v(" "),n("p",[t._v("安装")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm i react-redux -S\nnpm i redux -S\n\n- store\n++ index.js\n++ reducer.js\n\nApp.js\nimport store from './store';\nimport { Provider } from 'react-redux';\n\n<Provider store={store}>\n   <Header></Header>\n</Provider>\n\n- common\n-- header\n--- index.js\n// 将store中所有数据映射到props\nconst mapStateToProps = (state) => {\n  return {\n    focused: state.focused\n  }\n}\n\n// store.dispatch 挂载到 props上\nconst mapDispathToProps = (dispatch) => {\n  return {\n  }\n}\nexport default connect(mapStateToProps, mapDispathToProps)(Header);\n同时就可以去掉 this.state了,改成this.props\n")])])]),n("h4",{attrs:{id:"绑定事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#绑定事件","aria-hidden":"true"}},[t._v("#")]),t._v(" 绑定事件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// store.dispatch 挂载到 props上\nconst mapDispathToProps = (dispatch) => {\n  return {\n    handleInputFocus (e) {\n      const action = {\n        type: 'search_focus'\n      }\n      dispatch(action)\n    },\n    handleInputBlur (e) {\n      const action = {\n        type: 'search_blur'\n      }\n      dispatch(action)\n    }\n  }\n}\n\nreducer.js\nexport default (state = defaultState, action) => {\n  if (action.type === 'search_focus') {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.focused = true;\n    return newState\n  } else if (action.type === 'search_blur') {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.focused = false;\n    return newState\n  }\n  return state;\n}\n\n可以改成无状态组件了\n")])])]),n("h3",{attrs:{id:"combinereducers完成对数据的拆分管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#combinereducers完成对数据的拆分管理","aria-hidden":"true"}},[t._v("#")]),t._v(" combineReducers完成对数据的拆分管理")]),t._v(" "),n("p",[t._v("​\t当前对于数据的存储以及数据的处理都放在reducer.js中处理，这样如果要存储和处理的数据量非常大的话，那么这个文件代码量也是非常大的。")]),t._v(" "),n("p",[t._v("1、redux-devtools工具使用")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/zalmoxisus/redux-devtools-extension#usage",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux-devtools-extension"),n("OutboundLink")],1)]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n改进：\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reducer from './reducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\n\nconst enhancer = composeEnhancers(\n  // 导入其他插件\n  // applyMiddleware(thunk),\n);\n\nconst store = createStore(reducer, enhancer);\n\nexport default store;\n")])])]),n("p",[t._v("2、拆分reducer.js")]),t._v(" "),n("p",[t._v("​\t例如，header数据相关的就在header下面专门放一个store进行管理。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- common\n-- header\n--- store\n++ reducer.js\n将src - store - reducer.js中内容全部复制过来\n同时\nsrc - store - reducer.js：\nimport { combineReducers } from 'redux';\nimport { reducer as headerReducer } from '../common/header/store/';\n\nconst reducer = combineReducers({\n  header: headerReducer\n})\n\nexport default reducer;\n注意：\n\t1、combineReducers 用来生成一个新的reducer\n\t\n优化路径：\n\t1、在header的store文件夹中新建index.js\nimport reducer from './reducer';\n\nexport { reducer }\n\n这样可以简化下路径；\n")])])]),n("h4",{attrs:{id:"actioncreators与constants的拆分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#actioncreators与constants的拆分","aria-hidden":"true"}},[t._v("#")]),t._v(" actionCreators与constants的拆分")]),t._v(" "),n("h5",{attrs:{id:"actioncreators"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#actioncreators","aria-hidden":"true"}},[t._v("#")]),t._v(" actionCreators")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- header\n-- store\n++ actionCreators.js\nexport const searchFocus = () => ({\n  type: 'search_focus'\n})\n\nexport const searchBlur = () => ({\n  type: 'search_blur'\n})\n\n- header\n-- index.js\nimport * as actionCreators from './store/actionCreators';\n\nconst mapDispathToProps = (dispatch) => {\n  return {\n    handleInputFocus (e) {\n+      dispatch(actionCreators.searchFocus())\n    },\n    handleInputBlur (e) {\n+      dispatch(actionCreators.searchBlur())\n    }\n  }\n}\n")])])]),n("h5",{attrs:{id:"constants"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#constants","aria-hidden":"true"}},[t._v("#")]),t._v(" constants")]),t._v(" "),n("p",[t._v("​\t进一步拆分actionCreators")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- header\n-- store\n++ constants.js\n\nexport const SEARCH_FOCUS = 'header/SEARCH_FOCUS';\nexport const SEARCH_BLUR = 'header/SEARCH_BLUR';\n\nactionCreators.js\n\nimport * as constans from './constants'\nexport const searchFocus = () => ({\n  type: constans.SEARCH_FOCUS\n})\n\nexport const searchBlur = () => ({\n  type: constans.SEARCH_BLUR\n})\n\nreducer.js\n\nimport * as constans from './constants'\n\nif (action.type === constans.SEARCH_FOCUS) {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.focused = true;\n    return newState\n  } else if (action.type === constans.SEARCH_BLUR) {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.focused = false;\n    return newState\n  }\n")])])]),n("p",[t._v("store文件夹下 通过 index.js将所有文件导出去")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import reducer from './reducer';\nimport * as actionCreators from './actionCreators';\nimport * as constants from './constants';\n\nexport { reducer, actionCreators, constants }\n\nheader-index.js\n\n如果要用actionCreators，则：\nimport { actionCreators } from './store';\n")])])]),n("h3",{attrs:{id:"使用immutable-js来管理store中的数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用immutable-js来管理store中的数据","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用Immutable.js来管理store中的数据")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("reducer.js中state只能读取，不能修改。")])]),t._v(" "),n("li",[n("p",[t._v("对于新手容易忘记这个问题")])])]),t._v(" "),n("p",[t._v("所以facebook团队历时三年开发了：")]),t._v(" "),n("ol",[n("li",[t._v("Immutable.js")]),t._v(" "),n("li",[t._v("生成Immutable对象（不可改变的对象）")]),t._v(" "),n("li",[t._v("所以将state变成Immutable对象")])]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/immutable-js/immutable-js",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),n("OutboundLink")],1)]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm install immutable -S\n\nreducer.js\nimport { fromJS } from 'immutable';\n\nconst defaultState = fromJS({\n  focused: false\n});\n\nexport default (state = defaultState, action) => {\n  if (action.type === constans.SEARCH_FOCUS) {\n    // immutable对象的set会结合之前immutable对象的值\n    // 和设置的值，返回一个全新的对象\n    return state.set('focused', true);\n  } else if (action.type === constans.SEARCH_BLUR) {\n    return state.set('focused', false);\n  }\n  return state;\n}\n\n注意：\n\t1、immutable对象的set会结合之前immutable对象的值和设置的值，返回一个全新的对象\n\t2、defaultState必须用fromJS函数转换\n\t\nheader index.js\n// 将store中所有数据映射到props\nconst mapStateToProps = (state) => {\n  return {\n    focused: state.header.get('focused')\n  }\n}\n\n注意： \n\t取值必须通过.get()形式\n")])])]),n("h3",{attrs:{id:"使用redux-immutable统一数据格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用redux-immutable统一数据格式","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用redux-immutable统一数据格式")]),t._v(" "),n("p",[t._v("例如：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 将store中所有数据映射到props\nconst mapStateToProps = (state) => {\n  return {\n    focused: state.header.get('focused')\n  }\n}\n\n获取focused方式是不统一的；\n前面是属性的方式，后面跟方法；\n\n最好统一！（即，state也是immutable对象）\n")])])]),n("p",[t._v("安装第三方插件：redux-immutable")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm i redux-immutable -S\n\n\n- src\n-- store\n-- reducer.js\n将：import { combineReducers } from 'redux';\n改为：import { combineReducers } from 'redux-immutable';\nredux-immutable中有同样的方法\n\n\n- header\n-- index.js\n// 将store中所有数据映射到props\nconst mapStateToProps = (state) => {\n  return {\n    focused: state.get('header').get('focused')\n  }\n}\n\n换个写法：\nfocused: state.getIn(['header','focused'])\n")])])]),n("p",[n("a",{attrs:{href:"https://immutable-js.github.io/immutable-js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("immutable官网"),n("OutboundLink")],1),t._v("：需要翻墙")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://immutable-js.github.io/immutable-js/docs/#/fromJS",target:"_blank",rel:"noopener noreferrer"}},[t._v("fromJs"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("##热门搜索布局")]),t._v(" "),n("h3",{attrs:{id:"样式编码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#样式编码","aria-hidden":"true"}},[t._v("#")]),t._v(" 样式编码")]),t._v(" "),n("p",[t._v("页面定义一个函数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("页面代码部分：\n// 热门搜索方法\nconst getListArea = (show) => {\n  if (show) {\n    return (\n      <SearchInfo>\n        <SearchInfoTitle>\n          热门搜索\n              <SearchInfoSwitch>换一批</SearchInfoSwitch>\n        </SearchInfoTitle>\n        <SearchInfoList>\n          <SearchInfoItem>区块链</SearchInfoItem>\n          <SearchInfoItem>小程序</SearchInfoItem>\n          <SearchInfoItem>Vue</SearchInfoItem>\n          <SearchInfoItem>毕业</SearchInfoItem>\n          <SearchInfoItem>PHP</SearchInfoItem>\n          <SearchInfoItem>故事</SearchInfoItem>\n          <SearchInfoItem>理财</SearchInfoItem>\n          <SearchInfoItem>美食</SearchInfoItem>\n          <SearchInfoItem>投稿</SearchInfoItem>\n        </SearchInfoList>\n      </SearchInfo>\n    );\n  } else {\n    return null;\n  }\n}\n样式代码部分：\nexport const SearchInfo = styled.div`\n      position: absolute;\n      left: 0;\n      top: 56px;\n      width: 240px;\n      padding: 0 20px;\n      box-shadow: 0 0 8px rgba(0,0,0,.2);\n`;\n\nexport const SearchInfoTitle = styled.div`\n      margin-top: 20px;\n      margin-bottom: 15px;\n      line-height: 20px;\n      font-size: 13px;\n      color: #969696;\n`;\n\nexport const SearchInfoSwitch = styled.div`\n      float: right;\n      font-size: 13px;\n`;\n\nexport const SearchInfoList = styled.div`\n      overflow: hidden;\n      width: 200px;\n`;\n\nexport const SearchInfoItem = styled.a`\n      float: left;\n      font-size: 12px;\n      line-height: 20px;\n      padding: 0 5px;\n      border: 1px solid #ddd;\n      color: #787878;\n      border-radius: 3px;\n      display: bloack;\n      margin-right: 10px;\n      margin-bottom: 15px;\n      cursor: pointer;\n      &:hover{\n        background: #787878;\n        color: white;\n      }\n`;\n")])])]),n("p",[t._v("再将函数在搜索框调用，并传入focused")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<SearchWrapper>\n\t......\n    {getListArea(focused)}\n</SearchWrapper>\n")])])]),n("h3",{attrs:{id:"header代码优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#header代码优化","aria-hidden":"true"}},[t._v("#")]),t._v(" header代码优化")]),t._v(" "),n("p",[t._v("​\t因为当前header无状态组件内容很多，依然不便管理，所以需要继续改成普通UI组件。")]),t._v(" "),n("h3",{attrs:{id:"ajax获取推荐数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ajax获取推荐数据","aria-hidden":"true"}},[t._v("#")]),t._v(" Ajax获取推荐数据")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("安装：\nnpm i axios -S\nyarn add redux-thunk\n")])])]),n("h4",{attrs:{id:"基本配置-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本配置-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本配置")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- src \n-- store\n-- index.js\n+ import thunk from 'redux-thunk';\n+ applyMiddleware(thunk),\n\n- header\n-- index.js\n// store.dispatch 挂载到 props上\nconst mapDispathToProps = (dispatch) => {\n  return {\n    handleInputFocus (e) {\n+     dispatch(actionCreators.getList())\n      dispatch(actionCreators.searchFocus())\n    },\n    handleInputBlur (e) {\n      dispatch(actionCreators.searchBlur())\n    }\n  }\n}\n\n配置 action 类型和 方法\n- header\n-- store\n\nconstants.js\nexport const CHANGE_LIST = 'header/CHANGE_LIST';\n\nactionCreators.js\nexport const changeList = (data) => ({\n  type: constans.CHANGE_LIST,\n  data: fromJS(data)\n})\n\nconst api = 'https://www.easy-mock.com/mock/5cac669516fea85e587f8deb/luodiye';\nexport const getList = () => {\n  return (dispatch) => {\n    axios.get(api + '/trending_search').then((res) => {\n      console.log(res.data.data);\n      const data = res.data.data;\n      dispatch(changeList(data));\n    }).catch(() => {\n      alert('调接口失败！')\n    })\n  }\n}\n注意：\n\t1、因为应用了 redux-thunk,所以getList可以为一个函数\n\t2、发送changeList指令传过去的必须也是immutable对象，所以需要用fromJs转化一下。\n\t\nreducer.js\nelse if (action.type === constans.CHANGE_LIST) {\n    // set方法将list本来imutable对象数组转换成了普通list数组\n    // 这样会有问题,所以要将传过来的action提前转成imutable对象\n    return state.set('list', action.data);\n}\n")])])]),n("h4",{attrs:{id:"页面引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#页面引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 页面引用")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、首先挂载list数据\n// 将store中所有数据映射到props\nconst mapStateToProps = (state) => {\n  return {\n    focused: state.getIn(['header', 'focused']),\n    list: state.getIn(['header', 'list'])\n  }\n}\n\n2、页面循环生成DOM\n<SearchInfoList>\n {\n    this.props.list.map((item) => {\n     return <SearchInfoItem key={item}>{item}</SearchInfoItem>\n    })\n  }\n</SearchInfoList>\n")])])]),n("h3",{attrs:{id:"代码优化微调"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码优化微调","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码优化微调")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("在actionCreators.js中有一些不用导出的action指令方法，去掉export,并放在顶部。")])]),t._v(" "),n("li",[n("p",[t._v("循环生成热门搜索标签时，可以将props解构出来。")])]),t._v(" "),n("li",[n("p",[t._v("render()方法中同上；")])]),t._v(" "),n("li",[n("p",[t._v("reducer.js中大量使用了if else语句，可以改成switch语句；")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("switch (action.type) {\n    case constans.SEARCH_FOCUS:\n      return state.set('focused', true);\n    case constans.SEARCH_BLUR:\n      return state.set('focused', false);\n    case constans.CHANGE_LIST:\n      return state.set('list', action.data);\n}\n因为已经 return 了，所以不用 breack了。\n")])])])])]),t._v(" "),n("h2",{attrs:{id:"热门搜索换一批"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#热门搜索换一批","aria-hidden":"true"}},[t._v("#")]),t._v(" 热门搜索换一批")]),t._v(" "),n("h3",{attrs:{id:"默认显示10个"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认显示10个","aria-hidden":"true"}},[t._v("#")]),t._v(" 默认显示10个")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、定义页码和页数\nreducer.js\nconst defaultState = fromJS({\n  focused: false,\n  list: [],\n+  page: 1,\n+  totalPage: 1\n});\n\n2、action指令要发送最新页数\nactionCreators.js\nconst changeList = (data) => ({\n  type: constans.CHANGE_LIST,\n  data: fromJS(data),\n  totalPage: fromJS(data.length / 10)\n})\n\n3、更新list同时更新totalPage\nreturn state.set('list', action.data).set('totalPage', action.totalPage);\n")])])]),n("h3",{attrs:{id:"热门搜索显示与隐藏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#热门搜索显示与隐藏","aria-hidden":"true"}},[t._v("#")]),t._v(" 热门搜索显示与隐藏")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("当失去焦点，但不是在热门搜索中点击时，隐藏热门搜索")])]),t._v(" "),n("li",[n("p",[t._v("当鼠标移入热门搜索区域时，再失去焦点，不能隐藏热门搜索")])]),t._v(" "),n("li",[n("p",[t._v("第二点之后，如果此时鼠标移出热门搜索区域，要隐藏热门搜索了")])])]),t._v(" "),n("p",[t._v("即，")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("定义一个mouseIn变量")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const defaultState = fromJS({\n  focused: false,\n+  mouseIn: false,\n  list: [],\n  page: 1,\n  totalPage: 1\n});\n")])])])]),t._v(" "),n("li",[n("p",[t._v("给热门搜索区域定义移入移除事件，改变mouseIn")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("+ if (focused || mouseIn) {\n      return (\n        <SearchInfo\n+          onMouseEnter={handleMouseEnter}\n+          onMouseLeave={handleMouseLeave}\n        >\n          <SearchInfoTitle>\n            热门搜索\n                <SearchInfoSwitch>换一批</SearchInfoSwitch>\n          </SearchInfoTitle>\n          <SearchInfoList>\n            {pageList}\n          </SearchInfoList>\n        </SearchInfo>\n      );\n    } else {\n      return null;\n    }\n")])])])]),t._v(" "),n("li",[n("p",[t._v("用mouseIn联合focused控制热门搜索区域的显示隐藏")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("if (focused || mouseIn){}\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"换一批"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#换一批","aria-hidden":"true"}},[t._v("#")]),t._v(" 换一批")]),t._v(" "),n("p",[t._v("1、注册点击事件，并传递当前页和总页数")]),t._v(" "),n("p",[t._v("2、判断：当前页小于总页数则加1，等于总页数则置1；")]),t._v(" "),n("p",[t._v("注意：")]),t._v(" "),n("ul",[n("li",[t._v("循环生成选项时，要判断是否有值存在小数情况）")]),t._v(" "),n("li",[t._v("当给reducer传总页数时，记得取整向下取整（即，+1）；")])]),t._v(" "),n("h3",{attrs:{id:"key报错"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#key报错","aria-hidden":"true"}},[t._v("#")]),t._v(" key报错")]),t._v(" "),n("p",[t._v("​\t当经过immutable转换成普通数组之后，渲染页面，明明已经加了key值，依然会有错误提示？")]),t._v(" "),n("p",[t._v("原因：")]),t._v(" "),n("ol",[n("li",[t._v("list的初始值为1，在为请求ajax之前，就进入了循环")])]),t._v(" "),n("p",[t._v("解决方法：")]),t._v(" "),n("p",[t._v("用 if(newList){} 将循环包裹起来")]),t._v(" "),n("h3",{attrs:{id:"immutable的merage方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#immutable的merage方法","aria-hidden":"true"}},[t._v("#")]),t._v(" immutable的merage方法")]),t._v(" "),n("p",[t._v("同时设置多个值")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("return state.merge({\n        list: action.data,\n        totalPage: action.totalPage\n      })\n// return state.set('list', action.data).set('totalPage', action.totalPage);\n    \n")])])]),n("ul",[n("li",[n("p",[t._v("相对于多次调用set，但是性能更高，默认只会调用一次。")])]),t._v(" "),n("li",[n("p",[t._v("而set调用两次，会返回两个immutable数据类型。")])])]),t._v(" "),n("h2",{attrs:{id:"规避无意义的ajax请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#规避无意义的ajax请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 规避无意义的Ajax请求")]),t._v(" "),n("p",[t._v("点击输入框只需要请求一次即可。")]),t._v(" "),n("p",[t._v("即，")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("搜索框获取焦点时，给事件传递list参数；")])]),t._v(" "),n("li",[n("p",[t._v("当list.size为0时才调用接口请求数据")])])]),t._v(" "),n("p",[t._v("注意：带参数传值要用es6语法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<NavSearch\n   className={focused ? 'focused' : ''}\n   onFocus={() => { handleInputFocus(list) }}\n   onBlur={handleInputBlur}\n/>\n\n\nif (list.size === 0) {\n    dispatch(actionCreators.getList())\n}\n\n优化：(list.size === 0) && dispatch(actionCreators.getList());\n")])])]),n("h2",{attrs:{id:"路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由","aria-hidden":"true"}},[t._v("#")]),t._v(" 路由")]),t._v(" "),n("h3",{attrs:{id:"概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),n("p",[t._v("​\t根据url的不同显示不同的内容。")]),t._v(" "),n("p",[t._v("安装：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm i react-router-dom -S\n\nApp.js\n引入：\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\n使用：\nRouter>\n   <Route path='/' exact render={() => <div>home</div>}></Route>\n   <Route path='/detail' exact render={() => <div>detail</div>}></Route>\n</Router>\n\nexact ： 精准匹配\n")])])]),n("h2",{attrs:{id:"首页拆分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#首页拆分","aria-hidden":"true"}},[t._v("#")]),t._v(" 首页拆分")]),t._v(" "),n("p",[t._v("首先创建首页和详情页的结构")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- src\n++ page\n-- page\n+++ datail\n++++ index.js\n+++ home\n++++ index.js\n")])])]),n("p",[t._v("首页包含两大块：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("HomWrapperLeft")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<HomWrapperLeft>\n     <img className='banner-img' src='url' />\n     <Topic>Topic</Topic>\n     <List>List</List>\n</HomWrapperLeft>\n")])])])]),t._v(" "),n("li",[n("p",[t._v("HomWrapperRight")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<HomWrapperRight>\n  <Recommend>Recommend</Recommend>\n  <Writer>Writer</Writer>\n</HomWrapperRight>\n")])])])])]),t._v(" "),n("p",[t._v("根据这两块拆分组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- home \n++ components\n+++ Recommend.js\n+++ List.js\n+++ Topic.js\n+++ Writer.js\n")])])]),n("h3",{attrs:{id:"首页专题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#首页专题","aria-hidden":"true"}},[t._v("#")]),t._v(" 首页专题")]),t._v(" "),n("p",[t._v("Topic.js")]),t._v(" "),n("p",[t._v("思考：")]),t._v(" "),n("p",[t._v("​\t功能少的子组件样式及数据，再单独去用文件夹去定义，就太过了，")]),t._v(" "),n("p",[t._v("所以样式或者数据文件和home.js文件共用是可行的。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- home\n++ store\n+++ reducer.js\n+++ index.js 负责将reducer导出（优化路径，统一）\n\n- src\n-- store\n--- reducer.js中引入即可\n\n注意：\n\timmutable对象直接在dom中遍历时，要符合取值规范\n{topicList.map((item, index) => {\n    return (\n      <TopicItem key={index}>\n        <img className='Topic-pic' src={item.get('imgUrl')} />\n        {item.get('title')}\n      </TopicItem>\n    )\n})}\t\n")])])]),n("h3",{attrs:{id:"首页文章列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#首页文章列表","aria-hidden":"true"}},[t._v("#")]),t._v(" 首页文章列表")]),t._v(" "),n("p",[t._v("新建一个articleList 参数，去List.js中渲染")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("articleList: [\n    {\n      id: 1,\n      title: '用Flutter构建漂亮的UI界面 - 基础组件篇',\n      imgUrl: 'https://upload',\n      desc: '1. 前言 Flutter作为时下最流行的技术之一，凭借其出色的性能以及抹平多端的差异优势，早已引起大批技术爱好者的关注，甚至一些闲鱼，美团，腾...'\n    }]\n    \n{articleList.map((item,index)=>{\n          return (\n            <ListItem key={item.get('id')}>\n              <img className='pic' src={item.get('imgUrl')}/>\n              <ListInfo>\n              <h3 className='title'>{item.get('title')}</h3>\n              <p className='desc'>{item.get('desc')}</p>\n              </ListInfo>\n            </ListItem>\n          )\n        })}\n")])])]),n("p",[t._v("警告提示：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("img elements must have an alt prop, either with meaningful text, or an empty string for decorative images  jsx-a11y/alt-text\n")])])]),n("p",[t._v("原因：")]),t._v(" "),n("p",[t._v("img 标签没有alt'属性")]),t._v(" "),n("p",[t._v("解决方式：")]),t._v(" "),n("p",[t._v("img 标签要加alt=''属性")]),t._v(" "),n("h3",{attrs:{id:"首页推荐部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#首页推荐部分","aria-hidden":"true"}},[t._v("#")]),t._v(" 首页推荐部分")]),t._v(" "),n("p",[t._v("1、首页推荐")]),t._v(" "),n("p",[t._v("RecommendWrapper")]),t._v(" "),n("p",[t._v("2、推荐作者")]),t._v(" "),n("p",[t._v("WriterWrapper")]),t._v(" "),n("h2",{attrs:{id:"首页数据接口定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#首页数据接口定义","aria-hidden":"true"}},[t._v("#")]),t._v(" 首页数据接口定义")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/api/home.json\n\n返回体：\n例：\n{\n    sucess: true,\n    data: {\n        topicList: [\n    {\n      id: 1,\n      title: '程序员',\n      imgUrl: '//upload.jianshu.io/collect'\n    }],\n    articleList: [\n    {\n      id: 1,\n      title: '用Flutter构建漂亮的UI界面 - 基础组件篇',\n      imgUrl: 'https://upload-w/360/h/240',\n      desc: '1. 前言 F'\n    }],\n    recommendList: [\n    {\n      id: 1,\n      imgUrl: 'https://cdn2.jianshu.io/a'\n    }]\n    }\n}\n\nhome\n- index.js\n生命周期函数中调用：\ncomponentDidMount () {\n    const api = ' https://www.easy-mock.com/mock/5cac669516fea85e587f8deb/luodiye'\n    axios.get(api + '/home/data').then((res) => {\n      var result = res.data.data;\n      var action = {\n        type: 'change_home_data',\n        articleList: result.articleList,\n        recommendList: result.recommendList,\n        topicList: result.topicList\n      }\n      this.props.changeHomeData(action);\n      console.log(res);\n    }).catch(() => {\n\n    })\n  }\n}\n通过react-redux中connect来操作即可\nconst mapDispathToProps = (dispatch) => ({\n  changeHomeData (action) {\n    dispatch(action)\n  }\n})\n\nexport default connect(null, mapDispathToProps)(Home);\n\nreducer.js\nimport { fromJS } from 'immutable';\nconst defaultState = fromJS({\n  topicList: [],\n  articleList: [],\n  recommendList: []\n});\n\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case 'change_home_data':\n      console.log(action)\n      // state.set('topicList',fromJS(action.topicList));\n      return state.merge({\n        topicList: fromJS(action.topicList),\n        articleList: fromJS(action.articleList),\n        recommendList: fromJS(action.recommendList)\n      })\n      break;\n    default:\n  }\n  return state;\n}\n\n注意：\n\tmerge\n")])])]),n("h3",{attrs:{id:"代码拆分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码拆分","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码拆分")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、接口请求代码放在mapDispathToProps中\n2、配置actionCreators.js和constans.js来管理action\n")])])]),n("h2",{attrs:{id:"加载更多"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载更多","aria-hidden":"true"}},[t._v("#")]),t._v(" 加载更多")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("ajax请求：\ncase constants.ADD_LIST:\n  console.log(action.list)\n  return state.set('articleList', state.get('articleList').concat(action.list));\nbreak;\n\n分页：\nreducer.js新增页码参数，然后每次加+即可\n")])])]),n("h2",{attrs:{id:"返回顶部"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#返回顶部","aria-hidden":"true"}},[t._v("#")]),t._v(" 返回顶部")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("home\n- index.js\n\n创建按钮\nexport const BackTop = styled.div`\n    position:fixed;\n    right:100px;\n    bottom:100px;\n    font-size:12px;\n    z-index:1000;\n    width:60px;\n    height:60px;\n    line-height:60px;\n    text-align:center;\n    border:1px solid #ccc;\n    cursor: pointer;\n`;\n\n\n<BackTop onClick={this.handleScrollTop}>回到顶部</BackTop>\n绑定事件即可\nhandleScrollTop () {\n    window.scrollTo(0, 0)\n  }\n  \n按钮回到顶部隐藏效果：\n1、reducer新建showSroll值\nshowScroll: false\n\n2、给页面绑定滚动事件\ncomponentDidMount () {\n    this.props.changeHomeData();\n+   this.bindEvents();\n  }\nbindEvents () {\n    window.addEventListener('scroll', this.props.changeScrollTopShow)\n  }\n  \n3、当滚动距离大于100时显示滚动条\nmapDispathToProps：\nchangeScrollTopShow (e) {\n    if (document.documentElement.scrollTop > 100) {\n      dispatch(actionCreators.toggleTopShow(true));\n    } else {\n      dispatch(actionCreators.toggleTopShow(false));\n    }\n    console.log(document.documentElement.scrollTop)\n  }\n  \n4、当组件从从页面卸载后，在wondow中绑定的方法一定要移除\ncomponentWillUnmount () {\n    window.removeEventListener('scroll', this.props.changeScrollTopShow);\n  }\n")])])]),n("h3",{attrs:{id:"代码优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码优化")]),t._v(" "),n("p",[t._v("reducer.js中switch语句比较多的时候，需要单独把处理逻辑提取出来会比较好")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("即，\nconst changeHomeData = (state, action) => {\n  return state.merge({\n    topicList: fromJS(action.topicList),\n    articleList: fromJS(action.articleList),\n    recommendList: fromJS(action.recommendList)\n  })\n}\n\n\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case constants.CHANGE_HOME_DATA:\n      return changeHomeData(state, action);\n    default:\n  }\n  return state;\n}\n")])])]),n("h2",{attrs:{id:"首页性能优化及路由跳转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#首页性能优化及路由跳转","aria-hidden":"true"}},[t._v("#")]),t._v(" 首页性能优化及路由跳转")]),t._v(" "),n("h3",{attrs:{id:"性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),n("p",[t._v("1、当reducer中某个数据发生变化时，主组件的render主函数都会被重新执行，这样损耗性能。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("shouldComponentUpdate()\n只有当与我这个组件相关的内容发生变化时，组件才重新被渲染；\n但是每个组件中都这么写的话，未免太麻烦了，所以react内置了\n一个PureComponent\n表示一个纯组件\n\n\n与Component区别：\n底层实现了一个shouldComponentUpdate了，不需要再手写了\n\n例如：\nclass Writer extends React.PureComponent {\n  render () {\n    return (\n      <WriterWrapper>\n        Writer\n      </WriterWrapper>\n    )\n  }\n}\n\n注意：\n\t1、必须是组件数据都是immutable数据才适合这个搭配\n\t2、否则可能会遇坑\n")])])]),n("h3",{attrs:{id:"路由跳转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由跳转","aria-hidden":"true"}},[t._v("#")]),t._v(" 路由跳转")]),t._v(" "),n("p",[t._v("首页跳转到详情页面")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、进入详情页\n例如：\n<a key={index} href='/detail'></a>\n能跳转但是还是问题：\n\t应该使用单页应用link跳转。单页应用，就是不管网页怎么变，都只会加载一个html页面。\n\t所以a标签跳转，不符合单页面应用跳转规则，跳转一次会重新加载一次html这是比较耗性能的。\n改为：\n<Link key={index} to='/detail'></Link>\n\n2、点击简书logo返回首页\nstyle.js中样式就不能用a标签写的，改成div\n同时层包Link\n<Link to='/'></Link>\n\n注意：设置Link的组件必须包裹在Router中。\n例：\n<Router>\n   <Header></Header>\n   <Route path='/' exact component={Home}></Route>\n   <Route path='/detail' exact component={Detail}></Route>\n</Router>\n")])])]),n("h2",{attrs:{id:"详情页"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#详情页","aria-hidden":"true"}},[t._v("#")]),t._v(" 详情页")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("详情页：\nexport const DetailWrapper = styled.div`\n    overflow:hidden;\n    width:620px;\n    margin:0 auto;\n    padding-bottom:100px;\n`;\n1、标题\nexport const Header = styled.div`\n    margin:50px 0 20px 0;\n    font-size:34px;\n    line-height:44px;\n    color:#333;\n    font-weight:bold;\n`;\n\n2、内容\nexport const Content = styled.div`\n    color:#2f2f2f;\n    img{\n      width:100%;\n    }\n    p{\n      margin:25px 0;\n      color:#2f2f2f;\n      font-size:16px;\n      line-height:30px;\n    }\n`;\n")])])]),n("h3",{attrs:{id:"数据管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据管理")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("按react-rudx一套流程书写\n")])])]),n("h3",{attrs:{id:"页面路由参数传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#页面路由参数传递","aria-hidden":"true"}},[t._v("#")]),t._v(" 页面路由参数传递")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、动态路由\n<Link key={index} to={'/detail/' + item.get('id')}></Link>\n对应的路由匹配设置：\n<Route path='/detail/:id' exact component={Detail}></Route>\n获取id:\n在详情页：this.props.match.params.id即可\n2、方式二：\n<Link key={index} to={'/detail？id=' + item.get('id')}></Link>\n路由配置：\n<Route path='/detail' exact component={Detail}></Route>\n取值方式：\nthis.props.match.location.search // '?id=2'\n需要自己处理字符串\n")])])]),n("h2",{attrs:{id:"登录校验"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#登录校验","aria-hidden":"true"}},[t._v("#")]),t._v(" 登录校验")]),t._v(" "),n("h3",{attrs:{id:"布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#布局","aria-hidden":"true"}},[t._v("#")]),t._v(" 布局")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('+ login\n++ index.js\n<LoginWrapper>\n    <LoginBox>\n        <Input placeholder="账号" />\n        <Input placeholder="密码" />\n        <Button>登陆</Button>\n    </LoginBox>\n</LoginWrapper>\n\n++ style.js\nimport styled from \'styled-components\';\n\nexport const LoginWrapper = styled.div`\n\tz-index: 0;\n\tposition: absolute;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n\ttop: 56px;\n\tbackground: #eee;\n`;\n\nexport const LoginBox = styled.div`\n\twidth: 400px;\n\theight: 180px;\n\tmargin: 100px auto;\n\tpadding-top: 20px;\n\tbackground: #fff;\n\tbox-shadow: 0 0 8px rgba(0,0,0,.1);\n`;\n\nexport const Input = styled.input`\n\tdisplay: block;\n\twidth: 200px;\n\theight: 30px;\n\tline-height: 30px;\n\tpadding: 0 10px;\n\tmargin: 10px auto;\n\tcolor: #777;\n`;\n\nexport const Button = styled.div`\n\twidth: 220px;\n\theight: 30px;\n\tline-height: 30px;\n\tcolor: #fff;\n\tbackground: #3194d0;\n\tborder-radius: 15px;\n\tmargin: 10px auto;\n\ttext-align: center;\n`;\n')])])]),n("h3",{attrs:{id:"功能实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#功能实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 功能实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("+ store\n++ actionCreators.js\n++ constants.js\n++ index.js\n++ reducer.js\n\n1、首页如果登录了隐藏登录，没有登陆则显示登录按钮\n2、登录取值\n3、登陆成功之后去首页\nimport { Redirect } from 'react-router-dom';\n重定向\n- login\n- index.js\n通过登录状态来重定向到首页\n例2：\n} else {\n      return <Redirect to='/' />;\n}\n")])])]),n("h3",{attrs:{id:"登录鉴权及代码优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#登录鉴权及代码优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 登录鉴权及代码优化")]),t._v(" "),n("p",[t._v("​\t写文章页面只有用户登录了才能访问")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const { loginStatus } = this.props;\n    if (loginStatus) {\n      return (\n        <div>写文章</div>\n      )\n    } else {\n      return <Redirect to='/login' />;\n    }\n")])])]),n("p",[t._v("代码优化：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、回车间隔，分号；\n2、reducer.js中case内容太多，可以拆分出来；\n3、异步请求时，请求失败的情况也要处理.catch(()=>{});\n")])])]),n("h2",{attrs:{id:"异步组件及路由使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步组件及路由使用","aria-hidden":"true"}},[t._v("#")]),t._v(" 异步组件及路由使用")]),t._v(" "),n("p",[t._v("​\t打开控制台，network选择js可以发现，路由跳转等才做，都只加载了一个bundle.js说明，页面所有处理都在这一个文件里面。")]),t._v(" "),n("p",[t._v("​\t但如果只是在首页，而把详情页的js也包含了，那也对性能有一定的损耗。")]),t._v(" "),n("p",[t._v("​\t最好是访问首页只加载首页代码，访问详情页加载详情页代码...")]),t._v(" "),n("p",[t._v("基于以上需求，所以就要使用到“异步组件这个概念了”")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/jamiebuilds/react-loadable",target:"_blank",rel:"noopener noreferrer"}},[t._v("react-loadble"),n("OutboundLink")],1)]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm i react-loadable -S\n\n例如详情页：\n- detail\n++ loadable.js\nimport React from 'react';\nimport Loadable from 'react-loadable';\n\n\nconst LoadableComponent = Loadable({\n  // 指异步加载一个新组件\n  loader: () => import('./'),\n  // 指通过函数显示一个临时加载样式组件\n  loading () {\n    return <div>正在加载...</div>\n  },\n});\n\nexport default () => <LoadableComponent />;\n\n- src\n-- App.js\nimport Detail from './page/detail';\n改成：\nimport Detail from './page/detail/loadable';\n\n进入详情页发现报错：\nTypeError: Cannot read property 'params' of undefined\nconsole.log(this.props.match.params.id)\n\n原因：\n通过loadable组件进入的detail页面，不是路由直接对应的组件\n所以loadable能获取到路由数据，但是loadable下的组件就不能获取到。\n\n解决方法：\n- detail\n-- index.js\nimport { withRouter } from 'react-router-dom';\n\nexport default connect(mapStateToProps, mapDispathToProps)(withRouter(Detail));\n\n这样就能获取参数了\n\n此时bundle.js中是没有详情页代码的\n点击进入详情页会加载一个\n1.chunck.js\n")])])]),n("h2",{attrs:{id:"项目上线"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目上线","aria-hidden":"true"}},[t._v("#")]),t._v(" 项目上线")]),t._v(" "),n("p",[t._v("后端上线流程")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、php\n先安装：XAMPP\n帮助本地起一个服务器：\n\n")])])]),n("h2",{attrs:{id:"react版本升级说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react版本升级说明","aria-hidden":"true"}},[t._v("#")]),t._v(" React版本升级说明")])])},[],!1,null,null,null);e.default=r.exports}}]);