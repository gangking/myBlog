(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{206:function(a,t,e){"use strict";e.r(t);var r=e(0),s=Object(r.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"vue单元测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue单元测试","aria-hidden":"true"}},[a._v("#")]),a._v(" vue单元测试")]),a._v(" "),e("h2",{attrs:{id:"为什么要测试？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要测试？","aria-hidden":"true"}},[a._v("#")]),a._v(" 为什么要测试？")]),a._v(" "),e("p",[a._v("​\t测试是完善研发体系中不可或缺的一环。前端同样需要测试，你的css改动可能导致页面错位、js改动可能导致功能不正常。尽管测试领域工具层出不穷，在前端的自动化测试上面却实施并不广泛，但是前端偏向界面所以还是有很多人依旧以手工测试为主。")]),a._v(" "),e("p",[a._v("​\t虽然很多公司有自己的测试部门，而且前端开发大多不涉及测试环节，但鉴于目前前端领域的快速发展，其涉及面越来越广，前端开发者们必然不能止步于目前状态。我认为学好前端测试，不仅仅有利于自己整理需求、检查代码，更是一个优秀开发者的体现。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("黑盒测试：立足于界面功能测试，不涉及源码。\n")])])]),e("h2",{attrs:{id:"vue怎么测试？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue怎么测试？","aria-hidden":"true"}},[a._v("#")]),a._v(" vue怎么测试？")]),a._v(" "),e("p",[a._v("​\t下面采用的是Vue官方工具(Vue-Cli)搭建出来的项目，在这个搭建工具中推荐的两种测试分别是"),e("strong",[a._v("端到端的测试（E2E）和单元测试（Unit Test）")]),a._v("。")]),a._v(" "),e("h3",{attrs:{id:"端到端的测试（e2e）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#端到端的测试（e2e）","aria-hidden":"true"}},[a._v("#")]),a._v(" 端到端的测试（E2E）")]),a._v(" "),e("p",[a._v("​\tE2E或者端到端（End-To-End）或者UI测试是一种测试方法，它用来测试一个应用从头到尾的流程是否和设计的时候所想的一样。简而言之，它从一个用户的角度出发，认为整个系统都是一个黑箱，只有UI会暴露给用户。")]),a._v(" "),e("h3",{attrs:{id:"单元测试（unit-test）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单元测试（unit-test）","aria-hidden":"true"}},[a._v("#")]),a._v(" 单元测试（Unit Test）")]),a._v(" "),e("p",[a._v("​\t测试驱动开发，单元测试就不陌生。单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。比如写个加法函数add(a,b){return a+b}，我们可以编写以下几个测试用例：")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("输入1和1，期待返回结果是2；")])]),a._v(" "),e("li",[e("p",[a._v("输入非数值类型，比如None,[],{}，期待抛出异常；")])])]),a._v(" "),e("p",[a._v("​\t把上面的测试用例放在一个测试模块里，就是一个完整的单元测试。")]),a._v(" "),e("p",[a._v("​\t如果单元测试通过，说明我们测试的这个函数能够正常工作。如果单元测试不通过，要么函数有bug，要么测试条件输入不正确,总之，需要修复使单元测试能够通过。")]),a._v(" "),e("p",[a._v("​\t那在vue中的单元测试中主要使用两个工具分别是(Karma+Mocha)")]),a._v(" "),e("h2",{attrs:{id:"karma"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#karma","aria-hidden":"true"}},[a._v("#")]),a._v(" Karma")]),a._v(" "),e("p",[a._v("​\t基于Node.js的javascript测试执行过程管理工具(Test Runner)。该工具在Vue中主要作用是将项目运行在各种主流Web浏览器进行测试。")]),a._v(" "),e("p",[a._v("​\t换句话说，他是一个测试工具，能让你的代码在浏览器环境下测试。需要他的原因在于，你的代码可能设计在浏览器端执行的，在node环境下测试可能有些bug暴露不出来；另外，浏览器有兼容性问题，karma提供了手段让你的代码自动在多个浏览器(chrome，firefox，ie等)环境下运行。")]),a._v(" "),e("p",[a._v("​\t如果你的代码只会运行在node端，那么你不需要用karma。")]),a._v(" "),e("p",[e("strong",[a._v("暂时用不到")])]),a._v(" "),e("h2",{attrs:{id:"mocha"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mocha","aria-hidden":"true"}},[a._v("#")]),a._v(" Mocha")]),a._v(" "),e("p",[a._v("​\tMocha（发音摩卡）是一个测试框架，在vue-cli中配合Mocha本身不带断言库，所以必须先引入断言库，Chai断言库实现单元测试。")]),a._v(" "),e("p",[a._v("​\t常用命令和用法不算太多，而Chai断言库可以看Chai.js断言库API中文文档,很简单，多查多用就能很快掌握。")]),a._v(" "),e("h3",{attrs:{id:"断言库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断言库","aria-hidden":"true"}},[a._v("#")]),a._v(" 断言库")]),a._v(" "),e("p",[a._v("​\t就是判断源码实际执行结果与预期结果是否一致，如果不一致就抛出一个错误。下面这句断言的意思是，调用add(1,1),结果应该等于2。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var expect = require('chai').expect;\nexpect(1+1).to.be.equal(2);\n")])])]),e("p",[a._v("​\t"),e("a",{attrs:{href:"http://chaijs.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Chai是一种断言库"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("​\t所有的测试用例(IT块)都应该含有一句或多句的断言。它是编写测试用例的关键。断言功能能由断言库来实现。")]),a._v(" "),e("h3",{attrs:{id:"chai的基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chai的基本使用","aria-hidden":"true"}},[a._v("#")]),a._v(" Chai的基本使用")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://www.jianshu.com/p/2df72e64a7ca?fromApp=1",target:"_blank",rel:"noopener noreferrer"}},[a._v("基本使用"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"使用测试步骤（一）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用测试步骤（一）","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用测试步骤（一）")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1、Node环境下安装Vue-Cli\n2、初始化项目\n3、可以运行初始化的测试\nnpm run unit\n- Vue脚手架已经初始化了一个HelloWorld.spec.js的测试文件去测试HelloWord.vue。\n- 你可以在 test/unit/specs/HelloWord.spec.js下找到这个测试文件(提示：将来所有的测试文件，都将放在specs这个目录下，并以测试脚本名.specs.js结尾命名！)\n")])])]),e("p",[e("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/unit-testing.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("官方文档"),e("OutboundLink")],1)])])},[],!1,null,null,null);t.default=s.exports}}]);