(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{205:function(a,t,e){"use strict";e.r(t);var n=e(0),s=Object(n.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"项目开发心得"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目开发心得","aria-hidden":"true"}},[a._v("#")]),a._v(" 项目开发心得")]),a._v(" "),e("h2",{attrs:{id:"路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由","aria-hidden":"true"}},[a._v("#")]),a._v(" 路由")]),a._v(" "),e("h3",{attrs:{id:"路由管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由管理","aria-hidden":"true"}},[a._v("#")]),a._v(" 路由管理")]),a._v(" "),e("p",[a._v("​\t路由的话对于大型项目而言不建议直接写在index.js下面，建议通过创建对应文件夹的形式分模块管理。")]),a._v(" "),e("p",[a._v("例如router文件夹下：")]),a._v(" "),e("p",[a._v("1、index.js下引入分目录对应路由")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("import Vue from 'vue'\nimport Router from 'vue-router'\nimport movieRouter from './movie'\n\nVue.use(Router)\n\nexport default new Router({\n    mode: 'history',\n    base: process.env.BASE_URL,\n    routes: [\n        movieRouter,\n        {\n            path: '/*',\n            redirect: '/movie'\n        }\n    ]\n})\n\n")])])]),e("p",[a._v("2、分目录下路由直接暴露出来即可")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("export default {\n  path: '/mine',\n  component: () => import('@/views/Mine'),\n}\n")])])]),e("h3",{attrs:{id:"路由缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" 路由缓存")]),a._v(" "),e("p",[a._v("切换路由每次都会重新渲染，这样比较消耗内存，keep-alive包裹能起到缓存作用。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("<keep-alive>\n    <router-view />\n</keep-alive>\n\n只要路由匹配上了，就会默认添加router-link-active类名，所以根据这个特性可以设置相应样式\n即，\n#footer ul li.router-link-active {\n  color: #f03d37;\n}\n")])])]),e("h3",{attrs:{id:"路由重定向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由重定向","aria-hidden":"true"}},[a._v("#")]),a._v(" 路由重定向")]),a._v(" "),e("p",[a._v("通过redirect设置重定向路由")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("export default new Router({\n    mode: 'history',\n    base: process.env.BASE_URL,\n    routes: [\n        movieRouter,\n        mineRouter,\n        {\n            path: '/*',\n            redirect: '/movie'\n        }\n    ]\n})\n")])])]),e("h3",{attrs:{id:"命名视图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命名视图","aria-hidden":"true"}},[a._v("#")]),a._v(" 命名视图")]),a._v(" "),e("p",[a._v("有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有 "),e("code",[a._v("sidebar")]),a._v(" (侧导航) 和 "),e("code",[a._v("main")]),a._v(" (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 "),e("code",[a._v("router-view")]),a._v(" 没有设置名字，那么默认为 "),e("code",[a._v("default")]),a._v("。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("<TabBar></TabBar>\n// 同级命名路由\n<router-view name='detail' />\n\n路由设置\n{\n    path: 'detail',\n    components: {\n         detail: () => import('@/views/Movie/detail')\n    }\n}\n")])])]),e("h3",{attrs:{id:"路由传值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由传值","aria-hidden":"true"}},[a._v("#")]),a._v(" 路由传值")]),a._v(" "),e("h4",{attrs:{id:"传值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传值","aria-hidden":"true"}},[a._v("#")]),a._v(" 传值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("路由跳转时绑定Id\nthis.$router.push('/movie/detail/1/' + movieId);\n\n{\n   path: 'detail/:movieId',\n   components: {\n       detail: () => import('@/views/Movie/detail')\n   }\n}\n")])])]),e("h4",{attrs:{id:"取值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#取值","aria-hidden":"true"}},[a._v("#")]),a._v(" 取值")]),a._v(" "),e("p",[a._v("1、通过$route")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var detaiId = this.$route.params.movieId;\n")])])]),e("p",[a._v("2、组件传值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("首先配置路由；\n{\n     path: 'detail/:movieId',\n     components: {\n         detail: () => import('@/views/Movie/detail')\n     },\n     props: {\n         detail: true\n     }\n},\n组件中可以通过props取用\n  props: ['movieId'],\n  mounted () {\n    var movieId = this.movieId;\n}\n")])])]),e("h3",{attrs:{id:"路由默认值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由默认值","aria-hidden":"true"}},[a._v("#")]),a._v(" 路由默认值")]),a._v(" "),e("p",[a._v("场景：比如列表进入详情页")]),a._v(" "),e("p",[a._v("解决：default路由不匹配问题")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("export default {\n    path: '/movie',\n    component: () => import('@/views/Movie'),\n    children: [\n        {\n            path: 'detail/1/:movieId',\n            components: {\n                default: () => import('@/components/NowPlaying'),\n                detail: () => import('@/views/Movie/detail')\n            },\n            props: {\n                detail: true\n            }\n        },\n        {\n            path: 'detail/2/:movieId',\n            components: {\n                default: () => import('@/components/ComingSoon'),\n                detail: () => import('@/views/Movie/detail')\n            },\n            props: {\n                detail: true\n            }\n        },\n        {\n            path: '/movie',\n            redirect: '/movie/nowPlaying'\n        }\n    ]\n}\n")])])]),e("h2",{attrs:{id:"组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件","aria-hidden":"true"}},[a._v("#")]),a._v(" 组件")]),a._v(" "),e("h3",{attrs:{id:"组件创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件创建","aria-hidden":"true"}},[a._v("#")]),a._v(" 组件创建")]),a._v(" "),e("p",[a._v("给组件添加name有利于调试")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("export default {\n  name: 'movie'\n}\n")])])]),e("h3",{attrs:{id:"axios"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#axios","aria-hidden":"true"}},[a._v("#")]),a._v(" axios")]),a._v(" "),e("p",[a._v("最好是在全局安装，方便每个组件调用")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("npm i axios -S\n\nmain.js\nimport axios from 'axios'\nVue.prototype.axios = axios;\n")])])]),e("h2",{attrs:{id:"vuex状态管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex状态管理","aria-hidden":"true"}},[a._v("#")]),a._v(" vuex状态管理")]),a._v(" "),e("p",[a._v("store文件夹下拆分")]),a._v(" "),e("p",[a._v("1、index.js引入")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("import Vue from 'vue'\nimport Vuex from 'vuex'\nimport city from './city';\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n    state: {\n    },\n    mutations: {\n    },\n    actions: {\n    },\n    modules: {\n        city\n    }\n})\n")])])]),e("p",[a._v("2、在子目录下将数据定义出来")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const state = {\n    nm: window.localStorage.getItem('nowNm') || '北京',\n    id: window.localStorage.getItem('nowId') || 1\n};\n\nconst actions = {\n};\n\nconst mutations = {\n    CITY_INFO (state, payload) {\n        state.nm = payload.nm;\n        state.id = payload.id;\n    }\n};\n\nexport default {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n}\n")])])]),e("p",[a._v("3、获取和设置")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("获取：\n<span>{{$store.state.city.nm}}</span>\n设置\nthis.$store.commit('city/CITY_INFO',{ nm , id });\n")])])]),e("h2",{attrs:{id:"生命周期函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 生命周期函数")]),a._v(" "),e("p",[a._v("生命周期activated()：组件激活时调用，activated()替换mounted()")]),a._v(" "),e("p",[a._v("应用场景：比如改变当前定位城市，再切换到正在上映电影列表组件，那么该组件必须重新获取城市id来重新获取数据渲染。")]),a._v(" "),e("p",[a._v("问题：如果没有改变城市，只是切换页面，那么不应该做在这个生命周期函数中执行ajax请求。\n解决方式：")]),a._v(" "),e("ul",[e("li",[a._v("data中新增pevCityId: -1")]),a._v(" "),e("li",[a._v("然后请求之前从vuex中取数据")]),a._v(" "),e("li",[a._v("在请求成功之后，给pevCityId赋值")]),a._v(" "),e("li",[a._v("再到请求之前判断pevCityId是否和vuex中cityid一样")]),a._v(" "),e("li",[a._v("如果一样则不再进行请求")])]),a._v(" "),e("p",[a._v("即将上映、影院和搜索同理\n注意：")]),a._v(" "),e("ul",[e("li",[a._v("搜索组件不需要重新判断城市，因为每次都是异步渲染的")])]),a._v(" "),e("h2",{attrs:{id:"点击事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#点击事件","aria-hidden":"true"}},[a._v("#")]),a._v(" 点击事件")]),a._v(" "),e("p",[a._v("​\t移动端项目点击事件最好采用@touchstart，如果使用@click事件会有一定延时，但是touchstart 在点击和滑动的时候都会触发，这个问题需要解决")]),a._v(" "),e("p",[a._v("解决：使用tap事件。")]),a._v(" "),e("p",[a._v("​\t点击时候触发，滑动的时候不触发，但是vue没有tap事件，需要自己模拟。")]),a._v(" "),e("p",[a._v("模拟tap事件")]),a._v(" "),e("p",[a._v("主要有以下几种方案：")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("1、利用 touchstart 、 touchmove  、touchend来模拟；")])]),a._v(" "),e("li",[e("p",[a._v("2、移动端zepto 也提供tap事件")])]),a._v(" "),e("li",[e("p",[a._v("3、vue-touch")])]),a._v(" "),e("li",[e("p",[a._v("4、利用better-scroll第三方模块也自带tap方法")])])]),a._v(" "),e("p",[a._v("个人推荐第四种")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("npm i better-scroll -S\n\n组件中引入\nimport BScroll from 'better-scroll';\n\n配置tap事件即可\nthis.$nextTick(() => {\n     // 两个参数：最外层容器，配置对象\n     new BScroll(this.$refs.movie_body, {\n         tap: true\n     });\n})\n\n这样组件就能直接使用@tap事件\n")])])]),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/cangqinglang/p/8553746.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("better-scroll全部参数方法"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"鼠标单击选中取消"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#鼠标单击选中取消","aria-hidden":"true"}},[a._v("#")]),a._v(" 鼠标单击选中取消")]),a._v(" "),e("p",[a._v("按一下接盘Ins键即可")]),a._v(" "),e("h2",{attrs:{id:"过滤器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过滤器","aria-hidden":"true"}},[a._v("#")]),a._v(" 过滤器")]),a._v(" "),e("h3",{attrs:{id:"全局过滤器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局过滤器","aria-hidden":"true"}},[a._v("#")]),a._v(" 全局过滤器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("import Vue from \"vue\";\n\nVue.filter('setWH',(url,arg)=>{\n  // 正则替换，将w.h替换成指定的arg\n  return url.replace(/w\\.h/,arg);\n})\n\n\nmain.js引入即可\nimport './filter'\n")])])]),e("h3",{attrs:{id:"局部过滤器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#局部过滤器","aria-hidden":"true"}},[a._v("#")]),a._v(" 局部过滤器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("直接在组建中定义filters，例如：\n\nfilters: {\n    // 过滤卡片名\n    formatCard (key) {\n      var card = {\n        'allowRefund': '改签',\n        'endorse': '退',\n        'sell': '折扣卡',\n        'snack': '小吃'\n      }\n      return card[key];\n    },\n")])])]),e("h2",{attrs:{id:"函数防抖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数防抖","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数防抖")]),a._v(" "),e("p",[a._v("​\t即，快速输入的时候只是针对最后一次去触发，而之前的要进行清除。不让之前的输入触发。")]),a._v(" "),e("p",[a._v("1、原生定时器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("clearTimeout()\nsetTimeout()\n意思就是，将请求放在setTimeout中，每次watch变化时先清除定时器，\n就能保证是最后一次触发\n")])])]),e("p",[a._v("2、axios本身的防抖策略")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("axios终止多次请求\nwatch: {\n    message (val) {\n+      var that = this;\n      // 取消上一次请求\n+      this.cancelRequest();\n\n      this.axios.get('/api/searchList?cityId=10&kw=' + val, {\n+       cancelToken: new this.axios.CancelToken(function executor (c) {\n          that.source = c;\n        })\n      }).then((res) => {\n        console.log(res.data.data)\n        var msg = res.data.msg;\n        var data = res.data.data;\n        if (msg === 'ok') {\n          this.moviesList = data.movies.list;\n        }\n      }).catch((err) => {\n+        if (this.axios.isCancel(err)) {\n          console.log('Rquest canceled', err.message); //请求如果被取消，这里是返回取消的message\n        } else {\n          //handle error\n          console.log(err);\n        }\n      })\n    }\n  },\n  methods: {\n +   cancelRequest () {\n      if (typeof this.source === 'function') {\n        this.source('终止请求')\n      }\n    },\n  }\n\n\n注意：ajax的abort()方法也可以\n")])])]),e("h2",{attrs:{id:"vue模板快速生成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue模板快速生成","aria-hidden":"true"}},[a._v("#")]),a._v(" vue模板快速生成")]),a._v(" "),e("p",[a._v("安装Vetur插件，在新创建的.vue文件中输入scaffold，快速生成vue模板")]),a._v(" "),e("h2",{attrs:{id:"移动端设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移动端设置","aria-hidden":"true"}},[a._v("#")]),a._v(" 移动端设置")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=no">\n')])])]),e("p",[a._v("user-scalable=no禁止用户在手机屏幕上缩放")])])},[],!1,null,null,null);t.default=s.exports}}]);