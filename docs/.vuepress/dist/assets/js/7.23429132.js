(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{186:function(e,n,a){e.exports=a.p+"assets/img/webpack.230eb567.png"},200:function(e,n,a){"use strict";a.r(n);var s=a(0),t=Object(s.a)({},function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"webpack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack","aria-hidden":"true"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),s("h3",{attrs:{id:"webpack-是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" webpack 是什么？")]),e._v(" "),s("p",[e._v("本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(186),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"基本的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本的概念","aria-hidden":"true"}},[e._v("#")]),e._v(" 基本的概念")]),e._v(" "),s("h3",{attrs:{id:"mode-开发模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mode-开发模式","aria-hidden":"true"}},[e._v("#")]),e._v(" mode 开发模式")]),e._v(" "),s("p",[e._v("webpack 提供 mode 配置选项，配置 webpack 相应模式的内置优化。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// webpack.production.config.js\nmodule.exports = {\n+  mode: 'production',// 产品模式\n}\n")])])]),s("h3",{attrs:{id:"入口文件-entry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#入口文件-entry","aria-hidden":"true"}},[e._v("#")]),e._v(" 入口文件(entry)")]),e._v(" "),s("p",[e._v("入口文件，类似于其他语言的起始文件。比如：c 语言的 main 函数所在的文件。")]),e._v(" "),s("p",[e._v("入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。")]),e._v(" "),s("p",[e._v("可以在 webpack 的配置文件中配置入口，配置节点为： "),s("code",[e._v("entry")]),e._v(",当然可以配置一个入口，也可以配置多个。")]),e._v(" "),s("h3",{attrs:{id:"输出-output"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输出-output","aria-hidden":"true"}},[e._v("#")]),e._v(" 输出(output)")]),e._v(" "),s("p",[e._v("output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-first-webpack.bundle.js'\n  }\n};\n")])])]),s("h3",{attrs:{id:"loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loader","aria-hidden":"true"}},[e._v("#")]),e._v(" loader")]),e._v(" "),s("p",[e._v("loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。")]),e._v(" "),s("h3",{attrs:{id:"插件-plugins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插件-plugins","aria-hidden":"true"}},[e._v("#")]),e._v(" 插件(plugins")]),e._v(" "),s("p",[e._v("loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。")]),e._v(" "),s("h2",{attrs:{id:"webpack-的安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的安装","aria-hidden":"true"}},[e._v("#")]),e._v(" webpack 的安装")]),e._v(" "),s("p",[e._v("请确保安装了 "),s("code",[e._v("Node.js")]),e._v(" 的最新版本。而且已经在您的项目根目录下已经初始化好了最基本的"),s("code",[e._v("package.json")]),e._v("文件")]),e._v(" "),s("h3",{attrs:{id:"本地安装-webpack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地安装-webpack","aria-hidden":"true"}},[e._v("#")]),e._v(" 本地安装 webpack")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ npm install --save-dev webpack\n\n# 如果你使用 webpack 4+ 版本，你还需要安装 CLI。\nnpm install --save-dev webpack-cli\n")])])]),s("p",[e._v("安装完成后，可以添加"),s("code",[e._v("npm")]),e._v("的"),s("code",[e._v("script")]),e._v("脚本")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('// package.json\n"scripts": {\n    "start": "webpack --config webpack.config.js"\n}\n')])])]),s("h3",{attrs:{id:"全局安装-webpack（不推荐"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局安装-webpack（不推荐","aria-hidden":"true"}},[e._v("#")]),e._v(" 全局安装 webpack（不推荐)")]),e._v(" "),s("p",[e._v("将使 webpack 在全局环境下可用：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --global webpack\n")])])]),s("blockquote",[s("p",[e._v("注意：不推荐全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。")])]),e._v(" "),s("h2",{attrs:{id:"快速入门完整-demo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门完整-demo","aria-hidden":"true"}},[e._v("#")]),e._v(" 快速入门完整 demo")]),e._v(" "),s("ul",[s("li",[e._v("第一步：创建项目结构")])]),e._v(" "),s("p",[e._v("首先我们创建一个目录，初始化 npm，然后 在本地安装 webpack，接着安装 webpack-cli（此工具用于在命令行中运行 webpack）：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mkdir webpack-demo && cd webpack-demo\nnpm init -y\nnpm install webpack webpack-cli --save-dev\n")])])]),s("p",[e._v("项目结构")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  webpack-demo\n+ |- package.json\n+ |- /dist\n+   |- index.html\n+ |- /src\n+   |- index.js\n")])])]),s("ul",[s("li",[e._v("第二步：安装 loadash 依赖和编写 js 文件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save lodash\n")])])]),s("p",[e._v("编写：src/index.js 文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import _ from 'lodash';\n\nfunction createDomElement() {\n  var dom = document.createElement('div');\n  dom.innerHTML = _.join(['aicoder', '.com', ' wow'], '');\n  return dom;\n}\n\ndocument.body.appendChild(createDomElement());\n")])])]),s("p",[e._v("index.html")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta http-equiv="X-UA-Compatible" content="ie=edge">\n  <title>起步</title>\n</head>\n<body>\n  <script src="./main.js"><\/script>\n</body>\n</html>\n')])])]),s("ul",[s("li",[e._v("第三步：编写 webpack 配置文件")])]),e._v(" "),s("p",[e._v("根目录下添加 "),s("code",[e._v("webpack.config.js")]),e._v("文件。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  webpack-demo\n  |- package.json\n+ |- webpack.config.js\n  |- /dist\n    |- index.html\n  |- /src\n    |- index.js\n")])])]),s("p",[e._v("webpack.config.js 内容如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const path = require('path');\n\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, './dist')\n  }\n};\n")])])]),s("ul",[s("li",[e._v("执行构建任务")])]),e._v(" "),s("p",[e._v("直接执行构建任务：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npx webpack\n")])])]),s("p",[e._v("打开： dist/index.html 可以查看到页面的结果。")]),e._v(" "),s("h2",{attrs:{id:"加载非-js-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载非-js-文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 加载非 js 文件")]),e._v(" "),s("p",[e._v("webpack 最出色的功能之一就是，除了 JavaScript，还可以通过 loader 引入任何其他类型的文件")]),e._v(" "),s("h3",{attrs:{id:"加载-css-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载-css-文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 加载 CSS 文件")]),e._v(" "),s("ul",[s("li",[e._v("第一步： 安装 css 和 style 模块解析的依赖 "),s("code",[e._v("style-loader")]),e._v(" 和 "),s("code",[e._v("css-loader")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save-dev style-loader css-loader\n")])])]),s("ul",[s("li",[e._v("第二步： 添加 css 解析的 loader")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  }\n};\n")])])]),s("ul",[s("li",[s("code",[e._v("css-loader")]),e._v("： 辅助解析 js 中的 "),s("code",[e._v("import './main.css'")])]),e._v(" "),s("li",[s("code",[e._v("style-loader")]),e._v(": 把 js 中引入的 css 内容 注入到 html 标签中，并添加 style 标签.依赖 "),s("code",[e._v("css-loader")])])]),e._v(" "),s("blockquote",[s("p",[e._v("你可以在依赖于此样式的 js 文件中 导入样式文件，比如：import './style.css'。现在，当该 js 模块运行时，含有 CSS 字符串的 "),s("code",[e._v("<style>")]),e._v(" 标签，将被插入到 html 文件的 "),s("code",[e._v("<head>")]),e._v("中。")])]),e._v(" "),s("ul",[s("li",[e._v("第三步： 编写 css 文件和修改 js 文件")])]),e._v(" "),s("p",[e._v("在 src 目录中添加 "),s("code",[e._v("style.css")]),e._v("文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" webpack-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- bundle.js\n    |- index.html\n  |- /src\n+   |- style.css\n    |- index.js\n  |- /node_modules\n")])])]),s("p",[e._v("src/style.css")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(".hello {\n  color: red;\n}\n")])])]),s("p",[e._v("修改 js 文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  import _ from 'lodash';\n+ import './style.css';\n\n  function createDomElement() {\n    let dom = document.createElement('div');\n    dom.innerHTML = _.join(['aicoder', '.com', ' wow'], '');\n+   dom.className = 'hello';\n    return dom;\n  }\n\n  document.body.appendChild(createDomElement());\n")])])]),s("p",[e._v("最后重新打开 dist 目录下的 index.html 看一下文字是否变成了红色的了。")]),e._v(" "),s("h3",{attrs:{id:"module-配置补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module-配置补充","aria-hidden":"true"}},[e._v("#")]),e._v(" module 配置补充")]),e._v(" "),s("p",[e._v("模块(module): 这些选项决定了如何处理项目中的不同类型的模块。")]),e._v(" "),s("p",[e._v("webpack 模块可以支持如下:")]),e._v(" "),s("ul",[s("li",[e._v("ES2015 import 语句")]),e._v(" "),s("li",[e._v("CommonJS require() 语句")]),e._v(" "),s("li",[e._v("AMD define 和 require 语句")]),e._v(" "),s("li",[e._v("css/sass/less 文件中的 @import 语句。")]),e._v(" "),s("li",[e._v("样式"),s("code",[e._v("(url(...))")]),e._v("或 HTML 文件"),s("code",[e._v("(<img src=...>)")]),e._v("中的图片链接"),s("code",[e._v("(image url)")])])]),e._v(" "),s("h4",{attrs:{id:"module-noparse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module-noparse","aria-hidden":"true"}},[e._v("#")]),e._v(" module.noParse")]),e._v(" "),s("p",[e._v("值的类型： RegExp | [RegExp] | function")]),e._v(" "),s("p",[e._v("防止 webpack 解析那些任何与给定正则表达式相匹配的文件。忽略的文件中不应该含有 import, require, define 的调用，或任何其他导入机制。忽略大型的 library 可以提高构建性能。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module.exports = {\n  mode: 'devleopment',\n  entry: './src/index.js',\n  ...\n  module: {\n    noParse: /jquery|lodash/,\n    // 从 webpack 3.0.0 开始,可以使用函数，如下所示\n    // noParse: function(content) {\n    //   return /jquery|lodash/.test(content);\n    // }\n  }\n  ...\n};\n")])])]),s("h4",{attrs:{id:"module-rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module-rules","aria-hidden":"true"}},[e._v("#")]),e._v(" module.rules")]),e._v(" "),s("p",[e._v("创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)。")]),e._v(" "),s("p",[e._v("创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module.exports = {\n  ...\n  module: {\n    noParse: /jquery|lodash/,\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  }\n  ...\n};\n")])])]),s("h4",{attrs:{id:"module-rule"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module-rule","aria-hidden":"true"}},[e._v("#")]),e._v(" module Rule")]),e._v(" "),s("p",[e._v("Rule 条件详解")]),e._v(" "),s("ul",[s("li",[e._v("字符串：匹配输入必须以提供的字符串开始。是的。目录绝对路径或文件绝对路径。")]),e._v(" "),s("li",[e._v("正则表达式：test 输入值。")]),e._v(" "),s("li",[e._v("函数：调用输入的函数，必须返回一个真值(truthy value)以匹配。")]),e._v(" "),s("li",[e._v("条件数组：至少一个匹配条件。")]),e._v(" "),s("li",[e._v("对象：匹配所有属性。每个属性都有一个定义行为。")])]),e._v(" "),s("h4",{attrs:{id:"rule-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rule-test","aria-hidden":"true"}},[e._v("#")]),e._v(" Rule.test")]),e._v(" "),s("ul",[s("li",[e._v("{ test: Condition }：匹配特定条件。一般是提供一个正则表达式或正则表达式的数组，但这不是强制的。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  }\n  ...\n};\n")])])]),s("p",[e._v("其他的条件比如：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("{ include: Condition }")]),e._v(":匹配特定条件。一般是提供一个字符串或者字符串数组，但这不是强制的。")]),e._v(" "),s("li",[s("code",[e._v("{ exclude: Condition }")]),e._v(":排除特定条件。一般是提供一个字符串或字符串数组，但这不是强制的。")]),e._v(" "),s("li",[s("code",[e._v("{ and: [Condition] }")]),e._v(":必须匹配数组中的所有条件")]),e._v(" "),s("li",[s("code",[e._v("{ or: [Condition] }")]),e._v(":匹配数组中任何一个条件")]),e._v(" "),s("li",[s("code",[e._v("{ not: [Condition] }")]),e._v(":必须排除这个条件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        include: [\n          path.resolve(__dirname, \"app/styles\"),\n          path.resolve(__dirname, \"vendor/styles\")\n        ],\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  }\n  ...\n};\n")])])]),s("h4",{attrs:{id:"rule-use"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rule-use","aria-hidden":"true"}},[e._v("#")]),e._v(" Rule.use")]),e._v(" "),s("p",[e._v("应用于模块指定使用一个 loader。")]),e._v(" "),s("p",[e._v("Loaders can be chained by passing multiple loaders, which will be applied from right to left (last to first configured).")]),e._v(" "),s("p",[e._v("加载器可以链式传递，从右向左进行应用到模块上。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("use: [\n  'style-loader',\n  {\n    loader: 'css-loader'\n  },\n  {\n    loader: 'less-loader',\n    options: {\n      noIeCompat: true\n    }\n  }\n];\n")])])]),s("blockquote",[s("p",[e._v('传递字符串（如：use: [ "style-loader" ]）是 loader 属性的简写方式（如：use: [ { loader: "style-loader "} ]）。')])]),e._v(" "),s("h3",{attrs:{id:"加载-sass-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载-sass-文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 加载 Sass 文件")]),e._v(" "),s("p",[e._v("加载 Sass 需要"),s("code",[e._v("sass-loader")]),e._v("。")]),e._v(" "),s("p",[e._v("安装")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install sass-loader node-sass webpack --save-dev\n")])])]),s("p",[e._v("使用：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// webpack.config.js\nmodule.exports = {\n  ...\n  module: {\n    rules: [{\n      test: /\\.scss$/,\n      use: [{\n        loader: \"style-loader\"\n      }, {\n        loader: \"css-loader\"\n      }, {\n        loader: \"sass-loader\"\n      }]\n    }]\n  }\n};\n\n// a.scss\n$bgColor: pink;\n.box{\n    background-color: $bgColor;\n    font-size: 30px;\n}\n.test{\n    span {\n        color: greenyellow;\n    }\n}\n\n// index.js\nimport _ from 'lodash';\nimport './style.css';\n+ import './a.scss';\n\nfunction createDomElement() {\n  var dom = document.createElement('div');\n  dom.innerHTML = _.join(['aicoder', '.com', ' wow'], '');\n//   dom.className = 'hello';\n +  dom.classList.add('box');\n  return dom;\n}\n\ndocument.body.appendChild(createDomElement());\n")])])]),s("p",[e._v("为 sass 文件注入内容：")]),e._v(" "),s("p",[e._v("如果你要将 Sass 代码放在实际的入口文件(entry file)之前，可以设置 data 选项。此时 sass-loader 不会覆盖 data 选项，只会将它拼接在入口文件的内容之前。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n    loader: "sass-loader",\n    options: {\n        data: "$env: " + process.env.NODE_ENV + ";"\n    }\n}\n')])])]),s("blockquote",[s("p",[e._v("注意：由于代码注入, 会破坏整个入口文件的 source map。\b 通常一个简单的解决方案是，多个 Sass 文件入口。")])]),e._v(" "),s("h3",{attrs:{id:"创建-source-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-source-map","aria-hidden":"true"}},[e._v("#")]),e._v(" 创建 Source Map")]),e._v(" "),s("p",[e._v("在调试中显示scss文件及行数")]),e._v(" "),s("p",[s("code",[e._v("css-loader")]),e._v("和"),s("code",[e._v("sass-loader")]),e._v("都可以通过该 options 设置启用 sourcemap。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('// webpack.config.js\nmodule.exports = {\n  ...\n  module: {\n    rules: [{\n      test: /\\.scss$/,\n      use: [{\n        loader: "style-loader"\n      }, {\n        loader: "css-loader",\n        options: {\n          sourceMap: true\n        }\n      }, {\n        loader: "sass-loader",\n        options: {\n          sourceMap: true\n        }\n      }]\n    }]\n  }\n};Copy to clipboardErrorCopied\n')])])]),s("h3",{attrs:{id:"postcss-处理-loader（附带：添加-css3-前缀）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#postcss-处理-loader（附带：添加-css3-前缀）","aria-hidden":"true"}},[e._v("#")]),e._v(" PostCSS 处理 loader（附带：添加 css3 前缀）")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://postcss.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PostCSS"),s("OutboundLink")],1),e._v("是一个 CSS 的预处理工具，可以帮助我们：给 CSS3 的属性添加前缀，样式格式校验（stylelint），提前使用 css 的新特性比如：表格布局，更重要的是可以实现 CSS 的模块化，防止 CSS 样式冲突。")]),e._v(" "),s("p",[e._v("我们常用的就是使用 PostCSS 进行添加前缀，以此为例：")]),e._v(" "),s("p",[e._v("安装")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i -D postcss-loader\nnpm install autoprefixer --save-dev\n\n# 以下可以不用安装\n# cssnext可以让你写CSS4的语言，并能配合autoprefixer进行浏览器兼容的不全，而且还支持嵌套语法\n$ npm install postcss-cssnext --save-dev\n\n# 类似scss的语法，实际上如果只是想用嵌套的话有cssnext就够了\n$ npm install precss --save-dev\n\n# 在@import css文件的时候让webpack监听并编译\n$ npm install postcss-import --save-dev\nconst path = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, './dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(sa|sc|c)ss$/,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              ident: 'postcss',\n              sourceMap: true,\n              plugins: loader => [\n                require('autoprefixer')({ browsers: ['> 0.15% in CN'] }) // 添加前缀\n              ]\n            }\n          },\n          {\n            loader: 'sass-loader',\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n")])])]),s("h3",{attrs:{id:"样式表抽离成专门的单独文件并且设置版本号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#样式表抽离成专门的单独文件并且设置版本号","aria-hidden":"true"}},[e._v("#")]),e._v(" 样式表抽离成专门的单独文件并且设置版本号")]),e._v(" "),s("p",[e._v("首先以下的 css 的处理我们都把 mode 设置为 "),s("code",[e._v("production")]),e._v("。")]),e._v(" "),s("p",[e._v("webpack4 开始使用： "),s("code",[e._v("mini-css-extract-plugin")]),e._v("插件, 1-3 的版本可以用： "),s("code",[e._v("extract-text-webpack-plugin")])]),e._v(" "),s("blockquote",[s("p",[e._v("抽取了样式，就不能再用 "),s("code",[e._v("style-loader")]),e._v("注入到 html 中了。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save-dev mini-css-extract-plugin\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// webpack.product.config.js\n// 部署模式\n\n// 最终部署模式文件\n// 单独抽取css\nconst path = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nmodule.exports = {\n    mode: 'production',\n    entry: './src/index.js',\n    output: {\n        filename: 'main.js',\n        path: path.resolve(__dirname, './dist')\n    },\n    module: {\n        rules: [{\n            test: /\\.(sa|sc|c)ss$/,\n            use: [\n                MiniCssExtractPlugin.loader,\n                {\n                    loader: \"css-loader\",\n                    options: {\n                        sourceMap: true\n                    }\n                },\n                {\n                    loader: 'postcss-loader',\n                    options: {\n                        ident: 'postcss',\n                        sourceMap: true,\n                        plugins: loader => [\n                            require('autoprefixer')({\n                                browsers: ['> 0.15% in CN'] // 浏览器范围，包含ie8\n                            }) // 添加前缀\n                        ]\n                    }\n                },\n                {\n                    loader: \"sass-loader\",\n                    options: {\n                        sourceMap: true\n                    }\n                }\n            ]\n        }]\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name].[hash].css', // 设置最终输出的文件名\n            chunkFilename: '[id].css'\n        })\n    ]\n};\n")])])]),s("p",[e._v("再次运行打包：")]),e._v(" "),s("p",[e._v("npx webpack -h 查看帮助文档")]),e._v(" "),s("p",[e._v("npx webpack --config webpack.product.config.js")]),e._v(" "),s("p",[e._v("在 dist 目录中已经把 css 抽取到单独的一个 css 文件中了。修改 html，引入此 css 就能看到结果了。")]),e._v(" "),s("h3",{attrs:{id:"压缩-css"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#压缩-css","aria-hidden":"true"}},[e._v("#")]),e._v(" 压缩 CSS")]),e._v(" "),s("p",[e._v("webpack5 貌似会内置 css 的压缩，webpack4 可以自己设置一个插件即可。")]),e._v(" "),s("p",[e._v("压缩 css 插件："),s("code",[e._v("optimize-css-assets-webpack-plugin")])]),e._v(" "),s("p",[e._v("安装")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i -D optimize-css-assets-webpack-plugin\nconst path = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nconst autoprefixer = require('autoprefixer');\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    filename: 'main.[hash].js',\n    path: path.resolve(__dirname, './dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(sa|sc|c)ss$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            loader: 'css-loader'\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              ident: 'postcss',\n              plugins: loader => [autoprefixer({ browsers: ['> 0.15% in CN'] })]\n            }\n          },\n          {\n            loader: 'sass-loader'\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name][hash].css',\n      chunkFilename: '[id][hash].css'\n    })\n  ],\n  optimization: {\n    minimizer: [new OptimizeCSSAssetsPlugin({})]\n  }\n};\n")])])]),s("h3",{attrs:{id:"js-压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-压缩","aria-hidden":"true"}},[e._v("#")]),e._v(" JS 压缩")]),e._v(" "),s("p",[e._v("压缩需要一个插件： "),s("code",[e._v("uglifyjs-webpack-plugin")]),e._v(", 此插件需要一个前提就是："),s("code",[e._v("mode: 'production'")]),e._v(".")]),e._v(" "),s("p",[e._v("安装")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i -D uglifyjs-webpack-plugin\nconst path = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nconst autoprefixer = require('autoprefixer');\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    filename: 'main.[hash].js', // 重点！！！！\n    path: path.resolve(__dirname, './dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(sa|sc|c)ss$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            loader: 'css-loader'\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              ident: 'postcss',\n              plugins: loader => [autoprefixer({ browsers: ['> 0.15% in CN'] })]\n            }\n          },\n          {\n            loader: 'sass-loader'\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name][hash].css', // 重点\n      chunkFilename: '[id][hash].css'\n    })\n  ],\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        cache: true,\n        parallel: true,\n        sourceMap: true // set to true if you want JS source maps\n      }),\n      new OptimizeCSSAssetsPlugin({}) //压缩css\n    ]\n  }\n};\n")])])]),s("h3",{attrs:{id:"解决-css-文件或者-js-文件名字哈希变化的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决-css-文件或者-js-文件名字哈希变化的问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 解决 CSS 文件或者 JS 文件名字哈希变化的问题")]),e._v(" "),s("p",[s("code",[e._v("HtmlWebpackPlugin")]),e._v("插件，可以把打包后的 CSS 或者 JS 文件引用直接注入到 HTML 模板中，这样就不用每次手动修改文件引用了。")]),e._v(" "),s("p",[e._v("安装")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save-dev html-webpack-plugin\nconst path = require('path');\n+ const HtmlWebpackPlugin = require('html-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nconst autoprefixer = require('autoprefixer');\n\nmodule.exports = {\n  mode: 'production',\n  entry: './src/index.js',\n  output: {\n    filename: 'main.[hash].js',\n    path: path.resolve(__dirname, './dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(sa|sc|c)ss$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            loader: 'css-loader'\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              ident: 'postcss',\n              plugins: loader => [autoprefixer({ browsers: ['> 0.15% in CN'] })]\n            }\n          },\n          {\n            loader: 'sass-loader'\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name][hash].css',\n      chunkFilename: '[id][hash].css'\n    }),\n +   new HtmlWebpackPlugin({\n +     title: 'AICODER 全栈线下实习', // 默认值：Webpack App\n +     filename: 'main.html', // 默认值： 'index.html'\n +    template: path.resolve(__dirname, 'src/main.html'), // 注意是src下面的\n +     minify: {\n +       collapseWhitespace: true, // 是否移除空行\n +       removeComments: true, // 是否去掉注释\n +       removeAttributeQuotes: true // 移除属性的引号\n +     }\n +   })\n  ],\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        cache: true,\n        parallel: true,\n        sourceMap: true // set to true if you want JS source maps\n      }),\n      new OptimizeCSSAssetsPlugin({})\n    ]\n  }\n};\n")])])]),s("h3",{attrs:{id:"清理-dist-目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清理-dist-目录","aria-hidden":"true"}},[e._v("#")]),e._v(" 清理 dist 目录")]),e._v(" "),s("p",[e._v("每次构建，我们的 "),s("code",[e._v("/dist")]),e._v(" 文件夹都会保存生成的文件，然后就会非常杂乱。")]),e._v(" "),s("p",[e._v("通常，在每次构建前清理 "),s("code",[e._v("/dist")]),e._v(" 文件夹，是比较推荐的做法")]),e._v(" "),s("p",[s("code",[e._v("clean-webpack-plugin")]),e._v(" 是一个比较普及的管理插件，让我们安装和配置下。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install clean-webpack-plugin --save-dev\n")])])]),s("p",[e._v("webpack.config.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  const path = require('path');\n  ....\n+ const CleanWebpackPlugin = require('clean-webpack-plugin');\n\n  module.exports = {\n    entry: {\n      app: './src/index.js',\n      print: './src/print.js'\n    },\n    plugins: [\n+     new CleanWebpackPlugin(['/dist'])\n      ...\n    ],\n    output: {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    }\n    ...\n  };\n")])])]),s("p",[e._v("现在执行 "),s("code",[e._v("npm run build")]),e._v("，再检查 "),s("code",[e._v("/dist")]),e._v(" 文件夹。如果一切顺利，你现在应该不会再看到旧的文件，只有构建后生成的文件！")]),e._v(" "),s("p",[e._v("npm i clean-webpack-plugin@0.1.19 -D  装这个版本")]),e._v(" "),s("blockquote",[s("p",[s("em",[e._v("由于最新版本变化@2.0.1")]),e._v("之前的写法已经不能使用："),s("code",[e._v("new CleanWebpackPlugin(['/dist'])")]),e._v("。 官方文档地址："),s("a",{attrs:{href:"https://www.npmjs.com/package/clean-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.npmjs.com/package/clean-webpack-plugin"),s("OutboundLink")],1),e._v(" 可以直接设置一个对象参考： "),s("code",[e._v("new CleanWebpackPlugin({cleanOnceBeforeBuildPatterns: ['**/*', '!static-files*']})")])])]),e._v(" "),s("h3",{attrs:{id:"加载图片与图片优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载图片与图片优化","aria-hidden":"true"}},[e._v("#")]),e._v(" 加载图片与图片优化")]),e._v(" "),s("p",[e._v("在 css 文件或者 sass 文件中添加如下代码")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$red: #900;\n$size: 20px;\n\n.box {\n  height: 30px*2;\n  font-size: $size;\n  transform: translate3d( 0, 0, 0 );\n+ background: url('../static/1.jpeg')\n}Copy to clipboardErrorCopied\n")])])]),s("p",[e._v("运行打包发现如下错误：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ERROR in ./src/static/1.jpeg 1:0\nModule parse failed: Unexpected character '�' (1:0)\nYou may need an appropriate loader to handle this file type.Copy to clipboardErrorCopied\n")])])]),s("p",[e._v("解决方案："),s("code",[e._v("file-loader")]),e._v("处理文件的导入")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save-dev file-loader\n")])])]),s("p",[e._v("webpack.config.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            'style-loader',\n            'css-loader'\n          ]\n        },\n+       {\n+         test: /\\.(png|svg|jpg|gif)$/,\n+         use: [\n+           'file-loader'\n+         ]\n+       }\n      ]\n    }\n  };Copy to clipboardErrorCopied\n")])])]),s("p",[e._v("此时运行打包，发现 dist 目录多了一个图片文件，另外报错不再出现。")]),e._v(" "),s("p",[e._v("那更进一步，图片如何进行优化呢？")]),e._v(" "),s("p",[s("code",[e._v("image-webpack-loader")]),e._v("可以帮助我们对图片进行压缩和优化。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install image-webpack-loader --save-dev\n")])])]),s("p",[e._v("使用：webpack.config.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            'style-loader',\n            'css-loader'\n          ]\n        },\n        {\n          test: /\\.(png|svg|jpg|gif|jpeg|ico)$/,\n          use: [\n            'file-loader',\n+           {\n+             loader: 'image-webpack-loader',\n+             options: {\n+               mozjpeg: {\n+                 progressive: true,\n+                 quality: 65\n+               },\n+               optipng: {\n+                 enabled: false,\n+               },\n+               pngquant: {\n+                 quality: '65-90',\n+                 speed: 4\n+               },\n+               gifsicle: {\n+                 interlaced: false,\n+               },\n+               webp: {\n+                 quality: 75\n+               }\n+             }\n+           },\n          ]\n        }\n      ]\n    }\n  };Copy to clipboardErrorCopied\n")])])]),s("p",[e._v("此时在运行 webpack，发现会 生成的图片的大小会被压缩很多。")]),e._v(" "),s("h3",{attrs:{id:"更进一步处理图片成-base64"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更进一步处理图片成-base64","aria-hidden":"true"}},[e._v("#")]),e._v(" 更进一步处理图片成 base64")]),e._v(" "),s("p",[s("code",[e._v("url-loader")]),e._v("功能类似于 file-loader，可以把 url 地址对应的文件，打包成 base64 的 DataURL，提高访问的效率。")]),e._v(" "),s("p",[e._v("如何使用：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save-dev url-loader\n")])])]),s("p",[e._v("webpack.config.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|svg|jpg|gif|jpeg|ico|woff|woff2|eot|ttf|otf)$/,\n        use: [\n          {\n            loader: 'url-loader', // 根据图片大小，把图片优化成base64\n            options: {\n              limit: 10000\n            }\n          },\n          {\n            loader: 'image-webpack-loader', // 先进行图片优化\n            options: {\n              mozjpeg: {\n                progressive: true,\n                quality: 65\n              },\n              optipng: {\n                enabled: false\n              },\n              pngquant: {\n                quality: '65-90',\n                speed: 4\n              },\n              gifsicle: {\n                interlaced: false\n              },\n              webp: {\n                quality: 75\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n")])])]),s("h3",{attrs:{id:"字体的处理（同图片）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字体的处理（同图片）","aria-hidden":"true"}},[e._v("#")]),e._v(" 字体的处理（同图片）")]),e._v(" "),s("p",[e._v("由于 css 中可能引用到自定义的字体，处理也是跟图片一致。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const path = require('path');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            'style-loader',\n            'css-loader'\n          ]\n        },\n        {\n          test: /\\.(png|svg|jpg|gif)$/,\n          use: [\n            'file-loader'\n          ]\n        },\n+       {\n+         test: /\\.(woff|woff2|eot|ttf|otf)$/,\n+         use: [\n+           'file-loader'\n+         ]\n+       }\n      ]\n    }\n  };\n")])])]),s("h2",{attrs:{id:"开发相关辅助"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发相关辅助","aria-hidden":"true"}},[e._v("#")]),e._v(" 开发相关辅助")]),e._v(" "),s("h3",{attrs:{id:"合并两个webpack的js配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并两个webpack的js配置文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 合并两个webpack的js配置文件")]),e._v(" "),s("p",[e._v("开发环境(development)和生产环境(production)配置文件有很多不同点，但是也有一部分是相同的配置内容，如果在两个配置文件中都添加相同的配置节点， 就非常不爽。")]),e._v(" "),s("p",[s("code",[e._v("webpack-merge")]),e._v(" 的工具可以实现两个配置文件进合并，这样我们就可以把 开发环境和生产环境的公共配置抽取到一个公共的配置文件中。")]),e._v(" "),s("p",[e._v("安装：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save-dev webpack-merge\n")])])]),s("p",[e._v("例如：")]),e._v(" "),s("p",[e._v("project")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  webpack-demo\n  |- package.json\n- |- webpack.config.js \n+ |- webpack.common.js  公共\n+ |- webpack.dev.js  开发阶段\n+ |- webpack.prod.js  生产阶段\n  |- /dist\n  |- /src\n    |- index.js\n    |- math.js\n  |- /node_modules\n")])])]),s("p",[e._v("webpack.common.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  module: {\n    rules: [\n      {\n        test: /\\.(png|svg|jpg|gif|jpeg|ico|woff|woff2|eot|ttf|otf)$/,\n        use: [{\n            loader: 'url-loader', // 根据图片大小，把图片优化成base64\n            options: {\n              limit: 10000\n            }\n          },\n          {\n            loader: 'image-webpack-loader', // 先进行图片优化\n            options: {\n              mozjpeg: {\n                progressive: true,\n                quality: 65\n              },\n              optipng: {\n                enabled: false\n              },\n              pngquant: {\n                quality: '65-90',\n                speed: 4\n              },\n              gifsicle: {\n                interlaced: false\n              },\n              webp: {\n                quality: 75\n              }\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: 'AICODER 全栈线下实习', // 默认值：Webpack App\n      filename: 'main.html', // 默认值： 'index.html'\n      template: path.resolve(__dirname, 'src/main.html'),\n      minify: {\n        collapseWhitespace: true,\n        removeComments: true,\n        removeAttributeQuotes: true // 移除属性的引号\n      }\n    }),\n    new CleanWebpackPlugin(['dist']) // 清除dist\n  ]\n};\n")])])]),s("p",[e._v("webpack.dev.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const path = require('path');\nconst merge = require('webpack-merge');\nconst common = require('./webpack.common.js');\n\nlet devConfig = {\n    mode: 'production',\n    output: {\n        filename: 'main.[hash].js',\n        path: path.resolve(__dirname, './dist')\n    },\n    module: {\n        rules: [{\n            test: /\\.(sa|sc|c)ss$/,\n            use: [\n                'style-loader',\n                {\n                    loader: 'css-loader',\n                    options: {\n                        sourceMap: true\n                    }\n                },\n                {\n                    loader: 'postcss-loader',\n                    options: {\n                        ident: 'postcss',\n                        sourceMap: true,\n                        plugins: loader => [require('autoprefixer')({\n                            overrideBrowserslist: ['> 0.15% in CN']\n                        })]\n                    }\n                },\n                {\n                    loader: 'sass-loader',\n                    options: {\n                        sourceMap: true\n                    }\n                }\n            ]\n        }]\n    }\n};\n\nmodule.exports = merge(common, devConfig)\n")])])]),s("p",[e._v("webpack.prod.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const path = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');\n\nconst merge = require('webpack-merge');\nconst common = require('./webpack.common.js');\n\nlet prodConfig = module.exports = {\n    mode: 'production',\n    entry: './src/index.js',\n    output: {\n        filename: 'main.[hash].js',\n        path: path.resolve(__dirname, './dist')\n    },\n    module: {\n        rules: [{\n            test: /\\.(sa|sc|c)ss$/,\n            use: [\n                'style-loader',\n                {\n                    loader: 'css-loader'\n                },\n                {\n                    loader: 'postcss-loader',\n                    options: {\n                        ident: 'postcss',\n                        plugins: loader => [require('autoprefixer')({\n                            overrideBrowserslist: ['> 0.15% in CN']\n                        })]\n                    }\n                },\n                {\n                    loader: 'sass-loader'\n                }\n            ]\n        }]\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name][hash].css',\n            chunkFilename: '[id][hash].css'\n        })\n    ],\n    optimization: {\n        minimizer: [\n            new UglifyJsPlugin({\n                cache: true,\n                parallel: true,\n                sourceMap: true // 如果需要JS源映射，请设置为true\n            }),\n            new OptimizeCSSAssetsPlugin({})\n        ]\n    }\n};\n\nmodule.exports = merge(common, prodConfig)\n")])])]),s("h3",{attrs:{id:"js-使用-source-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-使用-source-map","aria-hidden":"true"}},[e._v("#")]),e._v(" js 使用 source map")]),e._v(" "),s("p",[e._v("当 webpack 打包源代码时，可能会很难追踪到错误和警告在源代码中的原始位置。例如，如果将三个源文件（a.js, b.js 和 c.js）打包到一个 bundle（bundle.js）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会简单地指向到 bundle.js。")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v("inline-source-map")]),e._v(" 选项，这有助于解释说明 js 原始出错的位置。（"),s("strong",[e._v("不要用于生产环境")]),e._v("）：")]),e._v(" "),s("p",[e._v("webpack.config.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  const path = require('path');\n  const HtmlWebpackPlugin = require('html-webpack-plugin');\n  const CleanWebpackPlugin = require('clean-webpack-plugin');\n\n  module.exports = {\n    entry: {\n      app: './src/index.js',\n      print: './src/print.js'\n    },\n+   devtool: 'inline-source-map',\n    plugins: [\n      new CleanWebpackPlugin(['dist']),\n      new HtmlWebpackPlugin({\n        title: 'Development'\n      })\n    ],\n    output: {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    }\n  };Copy to clipboardErrorCopied\n")])])]),s("p",[s("img",{attrs:{src:"https://malun666.github.io/aicoder_vip_doc/images/webpackinline.png",alt:"inline-source-map"}})]),e._v(" "),s("h3",{attrs:{id:"监控文件变化，自动编译。使用观察模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#监控文件变化，自动编译。使用观察模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 监控文件变化，自动编译。使用观察模式")]),e._v(" "),s("p",[e._v("每次修改完毕后，都手动编译异常痛苦。最简单解决的办法就是启动"),s("code",[e._v("watch")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npx webpack --watch\n")])])]),s("p",[e._v("当然可以添加到 npm 的 script 中")]),e._v(" "),s("p",[e._v("package.json")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "webpack.config.js",\n    "scripts": {\n     \t"test": "echo \\"Error: no test specified\\" && exit 1",\n    \t"dev": "npx webpack --config webpack.dev.js",\n    \t"watch": "npx webpack --watch --config webpack.dev.js",\n    \t"build": "npx webpack --config webpack.prod.js"\n    },\n    "devDependencies": {\n      "clean-webpack-plugin": "^0.1.16",\n      "css-loader": "^0.28.4",\n      "csv-loader": "^2.1.1",\n      "file-loader": "^0.11.2",\n      "html-webpack-plugin": "^2.29.0",\n      "style-loader": "^0.18.2",\n      "webpack": "^3.0.0",\n      "xml-loader": "^1.2.1"\n    }\n  }Copy to clipboardErrorCopied\n')])])]),s("p",[e._v("但是有个 bug，就是每次我们修改 js 或者 css 文件后，要看到修改后的 html 的变化，需要我自己重新刷新页面。")]),e._v(" "),s("p",[e._v("如何能不刷新页面，自动更新变化呢？")]),e._v(" "),s("h3",{attrs:{id:"使用-webpack-dev-server-和热更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-webpack-dev-server-和热更新","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用 webpack-dev-server 和热更新")]),e._v(" "),s("p",[e._v("webpack-dev-server 为你提供了一个简单的 web 服务器，并且能够实时重新加载(live reloading)。")]),e._v(" "),s("p",[e._v("安装")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save-dev webpack-dev-server\n")])])]),s("p",[e._v("webpack.config.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  const path = require('path');\n  const HtmlWebpackPlugin = require('html-webpack-plugin');\n  const CleanWebpackPlugin = require('clean-webpack-plugin');\n\n  module.exports = {\n    entry: {\n      app: './src/index.js',\n      print: './src/print.js'\n    },\n    devtool: 'inline-source-map',\n+   devServer: {\n+     contentBase: './dist'\n+   },\n    plugins: [\n      new CleanWebpackPlugin(['dist']),\n      new HtmlWebpackPlugin({\n        title: 'Development'\n      })\n    ],\n    output: {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    }\n  };Copy to clipboardErrorCopied\n")])])]),s("p",[e._v("启动此 webserver：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("webpack-dev-server --open\n")])])]),s("p",[s("a",{attrs:{href:"https://webpack.docschina.org/configuration/dev-server/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网其他配置"),s("OutboundLink")],1),e._v("：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('devServer: {\n  clientLogLevel: \'warning\', // 可能的值有 none, error, warning 或者 info（默认值)\n  hot: true,  // 启用 webpack 的模块热替换特性, 这个需要配合： webpack.HotModuleReplacementPlugin插件\n  contentBase:  path.join(__dirname, "dist"), // 告诉服务器从哪里提供内容， 默认情况下，将使用当前工作目录作为提供内容的目录\n  compress: true, // 一切服务都启用gzip 压缩\n  host: \'0.0.0.0\', // 指定使用一个 host。默认是 localhost。如果你希望服务器外部可访问 0.0.0.0\n  port: 8080, // 端口\n  open: true, // 是否打开浏览器\n  overlay: {  // 出现错误或者警告的时候，是否覆盖页面线上错误消息。\n    warnings: true,\n    errors: true\n  },\n  publicPath: \'/\', // 此路径下的打包文件可在浏览器中访问。\n  proxy: {  // 设置代理\n    "/api": {  // 访问api开头的请求，会跳转到  下面的target配置\n      target: "http://192.168.0.102:8080",\n      pathRewrite: {"^/api" : "/mockjsdata/5/api"}\n    }\n  },\n  quiet: true, // necessary for FriendlyErrorsPlugin. 启用 quiet 后，除了初始启动信息之外的任何内容都不会被打印到控制台。这也意味着来自 webpack 的错误或警告在控制台不可见。\n  watchOptions: { // 监视文件相关的控制选项\n    poll: true,   // webpack 使用文件系统(file system)获取文件改动的通知。在某些情况下，不会正常工作。例如，当使用 Network File System (NFS) 时。Vagrant 也有很多问题。在这些情况下，请使用轮询. poll: true。当然 poll也可以设置成毫秒数，比如：  poll: 1000\n    ignored: /node_modules/, // 忽略监控的文件夹，正则\n    aggregateTimeout: 300 // 默认值，当第一个文件更改，会在重新构建前增加延迟\n  }\n}\n')])])]),s("p",[e._v("如何启用热更新呢？")]),e._v(" "),s("p",[e._v("webpack.config.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  const path = require('path');\n  const HtmlWebpackPlugin = require('html-webpack-plugin');\n  const CleanWebpackPlugin = require('clean-webpack-plugin');\n+ const webpack = require('webpack');\n\n  module.exports = {\n    entry: {\n       app: './src/index.js'\n    },\n    devtool: 'inline-source-map',\n    devServer: {\n      contentBase: './dist',\n+     hot: true\n    },\n    plugins: [\n      new CleanWebpackPlugin(['dist']),\n      new HtmlWebpackPlugin({\n        title: 'Hot Module Replacement'\n      }),\n+     new webpack.NamedModulesPlugin(),  // 更容易查看(patch)的依赖\n+     new webpack.HotModuleReplacementPlugin()  // 替换插件\n    ],\n    output: {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    }\n  };\n")])])]),s("p",[e._v("注意：配置入口文件时改成index.html")])])},[],!1,null,null,null);n.default=t.exports}}]);